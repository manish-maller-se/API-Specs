{
	"info": {
		"_postman_id": "78c89fa2-1e7c-4b75-bccf-5d065cbdec7f",
		"name": "RP Controller - Web API",
		"description": "# Overview\n\n<!-- <img src=\"https://github.com/SESA545913/SE-EnergyManagement-Team/raw/main/schneider_LOGO.jpg\" style=\"zoom:60%;\" /> -->\n\n\n## API overview and usage\n\nThis document describes the usage of RP Controller (RP-C) Web Service API. It is a general tutorial for users who want to consume it and obtain BACnet objects and properties.\n\n## How it works\n\nUsing the Web Service API, a Schneider Electric partner can remotely access BACnet objects and properties on the RP-C, which will return a list of object ids available and a list of property ids for a specific object.\n\n<img src=\"https://github.com/SESA545913/SE-EnergyManagement-Team/raw/main/WebServiceUserScenario.png\" style=\"zoom:60%;\" /> \n\n- 3rd party client application can access BACnet objects and properties if the user credential is valid. The user will be authenticated based on User DB in RP-C.\n\n- EcoStruxure System with multiple RP-Cs, users can be authenticated based on centralized User DB on the RP-C, AS-P or Enterprise Server by configuring Web Service Settings.\n\n# Developer Guide\n\n## How to enable the Web API on RP-C\n\n1.\tUpdate the RP-C with firmware which supports Web Service feature.\n\n2.\tConfigure Web Service Settings.\n\n\t  - In WorkStation, in the **System Tree** pane, expand the RP-C.\n\t\n\t  - Click and expand the **System** folder.\n\t\n\t  - In the **Web Service** box, enter the address of the **SpaceLogic Certificate configuration tool** and enable the Web Service.\n\t\n\t \t  - Ensure that the SpaceLogic Certificate Configuration Tool with configuration of the RP-C is running prior to enabling Web Service. This is required for the first setup only.\n\t\n\t\t  - Run **Restore optional properties**. (**Device** -> **Advanced** -> **Restore optional properties**), if you don't see the Web Service box.\n\t\t\n\t  - The Web Service State will be **Running** if Web Service starts successfully.\n\n3.\tUpdate admin user name and password as soon as the Web Service is enabled for security.\n\n4.\tGenerate the mandatory Service certificate and key for each RP-C. You can deploy the Service Certificate and the key can be deployed using the **SpaceLogic Certificate Configuration Tool** (First time only) or APIs in web server settings.\n\n## Limitations\n\n- The number of calls to the API in the Sandbox is limited.\n\n- The Sandbox application for this API document will return BACnet object data based on [RP-33 FCU.A01.194_2c](<a href=\"https://bms-applications.schneider-electric.com/type/RP/download/33\" target=\"_blank\">https://bms-applications.schneider-electric.com/type/RP/download/33</a>) BMS application.\n\n- Because there is a single instance of a database in the Sandbox application, you may get values updated by other users. The single instance of a database will be reset after a timeout without any incoming requests.\n\n- To fully experience and extend the thresholds, enable the Web Service on the RP-C and use the environment.\n\n## Authentication guide\n\nThere are two layers of authentication when creating secure connection between the server and a client. The first one is based on a Digital Certificate, and the other is based on a user database (Local or Central).\n\n- Server Certificate Validation and Client Certificate Authentication\n\t\n\t- Server Certificate Validation\n\t\n\t\tTo protect a HTTPS client, a server need to return the certificate to the client. The client should be able to validate identity and ownership of the certificate from the server using the CA Certificate.\n\t\t\n\t\tYou can create self-signed certificates to set this up.\n\t\t\n\t\tFirst of all, generate root key. To protect your key, please set up a passphrase.\n\t\t\n\t\t>openssl ecparam -genkey -name prime256v1 -out rootCA.key\n\t\t\n\t\tThen, generate a root certificate. You need to enter a list of information.\n\t\t\n\t\t>openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 1825 -out rootCA.pem\n\t\t\n\t\tNow, you need to create the server key and certificate using this root certificate.\n\t\t\n\t\tGenerate ECC Server Key. (Available from the RP application software v5.0.x, RSA key is no more available from the RP application software v6.0)\n\t\t\n\t\t>openssl ecparam -genkey -name prime256v1 -out server.key\n\t\t\n\t\tGenerate a CSR (Certificate Signing Request). You need to enter a list of information.\n\t\t\n\t\t>openssl req -new -key server.key -out server.csr\n\t\t\n\t\tGenerate a configuration file (server.ext). If you have a domain name server, you can add the address of your RP-C. Otherwise, you can add the IP address of your RP-C.\n\t\t\n\t\t```\n\t\tauthorityKeyIdentifier=keyid,issuer\n\t\tkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\n\t\tbasicConstraints=CA:FALSE\n\t\tsubjectAltName = @alt_names\n\t\t[alt_names]\n\t\tIP.1 = 192.168.0.100\n\t\tor\n\t\tDNS.1 = www.your-domain.com\n\t\t```\n\t\t\n\t\tGenerate a server Certificate.\n\t\t\n\t\t>openssl x509 -req -in ./server.csr -CA ./rootCA.pem -CAkey ./rootCA.key -CAcreateserial -out ./server.crt -days 825 -sha256 -extfile ./server.ext\n\t\t\n\t\tConvert the server key and certificate to DER format to import to RP-C via web server settings API.\n\t\t\n\t\t>openssl ec -inform PEM -outform DER -in ./server.key -out ./server.key.der \\\n\t\t>openssl x509 -inform PEM -outform DER -in ./server.crt -out ./server.crt.der\n\t\t\n\t\tConvert the server key and certificate to .pfx format in order to import them to the RP-C via the SpaceLogic Certificate Configuration Tool. For more information about installing and using the tool, see the EcoStruxure Building Operation Technical Reference Guide.\n\t\t\n\t\t>openssl pkcs12 -export -out ./server.pfx -inkey server.key -in server.crt\t\t\n\t\n\t- Client Authentication Certificate (Optional)\n\t\n\t\tThe server can authenticate a client using the certificate. You can also create self-signed certificates to configure this.\n\t\t\n\t\tFirst of all, generate a root key. To protect your key, set up a passphrase.\n\t\t\n\t\t>openssl ecparam -genkey -name prime256v1 -out rootCA.key\n\t\t\n\t\tThen, generate a root certificate. You need to enter a list of information.\n\t\t\n\t\t>openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 1825 -out rootCA.pem\n\t\t\n\t\tNow, create a client key and a certificate using this root certificate.\n\t\t\n\t\tGenerate a client key.\n\t\t\n\t\t>openssl ecparam -genkey -name prime256v1 -out client.key\n\t\t\n\t\tGenerate a CSR (Certificate Signing Request). You need to enter a list of information.\n\t\t\n\t\t>openssl req -new -key client.key -out client.csr\n\t\t\n\t\tGenerate a configuration file (client.ext).\n\t\t\n\t\t```\n\t\tauthorityKeyIdentifier = keyid,issuer\n\t\tkeyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment\n\t\tbasicConstraints = CA:FALSE\n\t\tnsCertType = client, email\n\t\tnsComment = \"Client Certificate\"\n\t\tsubjectKeyIdentifier = hash\n\t\textendedKeyUsage = clientAuth, emailProtection\n\t\t```\n\t\t\n\t\tGenerate a client certificate.\n\t\t\n\t\t>openssl x509 -req -in ./client.csr -CA ./rootCA.pem -CAkey ./rootCA.key -CAcreateserial -out ./client.crt -days 365 -sha256 -extfile ./client.ext\n\t\t\n\t\tConvert the root CA certificate to DER format in order to import to RP-C.\n\t\t\n\t\t>openssl x509 -inform PEM -in rootCA.pem -outform DER -out rootCA.der\n\t\t\n\t\tIf you are using SOAP UI for development, you need to merge the client key and certificate to pfx format.\n\n\t\t>openssl pkcs12 -export -out client.pfx -inkey client.key -in client.crt -certfile rootCA.pem\n\n- Token-based user authentication (Local and Centralized)\n\n\tToken-based authentication is a process where the client application first send a request to a server with a valid credencials. The server sends an access token back to the client as response. The client application then uses the token to acess the restricted resources in the next request until the token is valid.\n\t\n\tThe RP-C returns an access token which contains enough data to identity a particular user. The token has an expiry time and if the token expires, the client application can request a new access token.\n\t\n\t<img src=\"https://github.com/SESA545913/SE-EnergyManagement-Team/raw/main/TokenBasedAuthentication_v2.png\" style=\"zoom:40%;\" /> \n\t\n- Centralized user authentication \n\n\t- If you are using the EcoStruxure BMS System and want user authentication, enable the **EWS Server**.\n\n\t- In WorkStation, in the **System Tree** pane, expand the **System** of a server (Enterprise Server or Automation Server).\n\n\t- In the **List View**, click **EcoStruxure Web Services** and **EWS Server Configuration**.\n\n\t- In the Configuration Information box, enable **EWS Server**.\n\n\t- Create an Authentication Point for the RP-C Web Service\n\n\t\t- Create a folder in the EcoStruxure BMS server (Enterprise Server or Automation Server).\n\n\t\t- Create a **Digital Value** object.\n\n\t\t- Eg. **ewsResourceId** is **01/Server 1/RPC_WebAPI/WebAPI_Authentication_Point**.\n\n\t\t\t<img src=\"https://github.com/SESA545913/SE-EnergyManagement-Team/raw/main/AuthenticationPoint.PNG\" style=\"zoom:80%;\" /> \n\n\t- Enable EWS authentication on the RP-C using the web server settings API. Ensure the following:\n\n\t\t- **ewsUserAuthEnabled** is true.\n\n\t\t- **ewsIPAddress** and **ewsPortNumber** are from the EcoStruxure BMS server (Enterprise Server or Automation Server).\n\n\t\t- **ewsResourceId** is from an authentication point.\n\nNote:\n- If client certificate authentication is enabled, a client needs to have a vaild client certificate for authentication.\n- Local user authentication or EWS (Centralized) user authentication is required based on the Web Service Settting.\n- Token-based user authentication is available to protect a user password. Basic authentication is required to get a access token.\n\n## BACnet Property Identifier\n\n| | ||\n|:----------|:--------------|:--------------|\n|acked-transitions (0) <br/>ack-required (1) <br/>action (2) <br/>action-text (3) <br/>active-text (4) <br/>active-vt-sessions (5) <br/>alarm-value (6) <br/>alarm-values (7) <br/>all (8) <br/>all-writes-successful (9) <br/>apdu-segment-timeout (10) <br/>apdu-timeout (11) <br/>application-software-version (12) <br/>archive (13) <br/>bias (14) <br/>change-of-state-count (15) <br/>change-of-state-time (16) <br/>notification-class (17) <br/>controlled-variable-reference (19) <br/>controlled-variable-units (20) <br/>controlled-variable-value (21) <br/>cov-increment (22) <br/>date-list (23) <br/>daylight-savings-status (24) <br/>deadband (25) <br/>derivative-constant (26) <br/>derivative-constant-units (27) <br/>description (28) <br/>description-of-halt (29) <br/>device-address-binding (30) <br/>device-type (31) <br/>effective-period (32) <br/>elapsed-active-time (33) <br/>error-limit (34) <br/>event-enable (35) <br/>event-state (36) <br/>event-type (37) <br/>exception-schedule (38) <br/>fault-values (39) <br/>feedback-value (40) <br/>file-access-method (41) <br/>file-size (42) <br/>file-type (43) <br/>firmware-revision (44) <br/>high-limit (45) <br/>inactive-text (46) <br/>in-process (47) <br/>instance-of (48) <br/>integral-constant (49) <br/>integral-constant-units (50) <br/>limit-enable (52) <br/>list-of-group-members (53) <br/>list-of-object-property-references (54) <br/>local-date (56) <br/>local-time (57) <br/>location (58) <br/>low-limit (59) <br/>manipulated-variable-reference (60) <br/>maximum-output (61) <br/>max-apdu-length-accepted (62) <br/>max-info-frames (63) <br/>max-master (64) <br/>max-pres-value (65) <br/>minimum-off-time (66) <br/>minimum-on-time (67) <br/>minimum-output (68) <br/>min-pres-value (69) <br/>model-name (70) <br/>modification-date (71) <br/>notify-type (72) <br/>number-of-apdu-retries (73) <br/>number-of-states (74) <br/>object identifier (75) <br/>object-list (76) <br/>object-name (77) <br/>object-property-reference (78) <br/>object type (79) <br/>optional (80) <br/>out-of-service (81) <br/>output-units (82) <br/>event-parameters (83) <br/>polarity (84) <br/>present value (85) <br/>priority (86) <br/>priority-array (87) <br/>priority-for-writing (88) <br/>process-identifier (89) <br/>program-change (90) <br/>program-location (91) <br/>program-state (92) <br/>proportional-constant (93) <br/>proportional-constant-units (94) <br/>protocol-object-types-supported (96) <br/>protocol-services-supported (97) <br/>protocol-version (98) <br/>read-only (99) <br/>reason-for-halt (100) <br/>recipient-list (102) <br/>reliability (103) <br/>relinquish-default (104) <br/>required (105) <br/>resolution (106) <br/>segmentation-supported (107) <br/>setpoint (108) <br/>setpoint-reference (109) <br/>state-text (110) <br/>status-flags (111) <br/>system-status (112) <br/>time-delay (113) <br/>time-of-active-time-reset (114) <br/>time-of-state-count-reset (115) <br/>time-synchronization-recipients (116) <br/>units (117) <br/>update-interval (118) <br/>utc-offset (119) <br/>vendor-identifier (120) <br/>vendor-name (121) <br/>vt-classes-supported (122) <br/>weekly-schedule (123) <br/>attempted-samples (124) <br/>average-value (125) <br/>buffer-size (126) <br/>client-cov-increment (127) <br/>cov-resubscription-interval (128) <br/>event-time-stamps (130) <br/>log-buffer (131) <br/>log-device-object-property (132) <br/>enable (133) <br/>log-interval (134) <br/>maximum-value (135) <br/>minimum-value (136) <br/>notification-threshold (137) <br/>protocol-revision (139) <br/>records-since-notification (140) <br/>record-count (141) <br/>start-time (142) <br/>stop-time (143) <br/>stop-when-full (144) <br/>total-record-count (145) <br/>valid-samples (146) <br/>window-interval (147) <br/>window-samples (148) <br/>maximum-value-timestamp (149) <br/>minimum-value-timestamp (150) <br/>variance-value (151) <br/>active-cov-subscriptions (152) <br/>backup-failure-timeout (153) <br/>configuration-files (154) <br/>database-revision (155) <br/>direct-reading (156) <br/>last-restore-time (157) <br/>maintenance-required (158)|member-of (159) <br/>mode (160) <br/>operation-expected (161) <br/>setting (162) <br/>silenced (163) <br/>tracking-value (164) <br/>zone-members (165) <br/>life-safety-alarm-values (166) <br/>max-segments-accepted (167) <br/>profile-name (168) <br/>auto-slave-discovery (169) <br/>manual-slave-address-binding (170) <br/>slave-address-binding (171) <br/>slave-proxy-enable (172) <br/>last-notify-record (173) <br/>schedule-default (174) <br/>accepted-modes (175) <br/>adjust-value (176) <br/>count (177) <br/>count-before-change (178) <br/>count-change-time (179) <br/>cov-period (180) <br/>input-reference (181) <br/>limit-monitoring-interval (182) <br/>logging-object (183) <br/>logging-record (184) <br/>prescale (185) <br/>pulse-rate (186) <br/>scale (187) <br/>scale-factor (188) <br/>update-time (189) <br/>value-before-change (190) <br/>value-set (191) <br/>value-change-time (192) <br/>align-intervals (193) <br/>interval-offset (195) <br/>last-restart-reason (196) <br/>logging-type (197) <br/>restart-notification-recipients (202) <br/>time-of-device-restart (203) <br/>time-synchronization-interval (204) <br/>trigger (205) <br/>utc-time-synchronization-recipients (206) <br/>node-subtype (207) <br/>node-type (208) <br/>structured-object-list (209) <br/>subordinate-annotations (210) <br/>subordinate-list (211) <br/>actual-shed-level (212) <br/>duty-window (213) <br/>expected-shed-level (214) <br/>full-duty-baseline (215) <br/>requested-shed-level (218) <br/>shed-duration (219) <br/>shed-level-descriptions (220) <br/>shed-levels (221) <br/>state-description (222) <br/>door-alarm-state (226) <br/>door-extended-pulse-time (227) <br/>door-members (228) <br/>door-open-too-long-time (229) <br/>door-pulse-time (230) <br/>door-status (231) <br/>door-unlock-delay-time (232) <br/>lock-status (233) <br/>masked-alarm-values (234) <br/>secured-status (235) <br/>absentee-limit (244) <br/>access-alarm-events (245) <br/>access-doors (246) <br/>access-event (247) <br/>access-event-authentication-factor (248) <br/>access-event-credential (249) <br/>access-event-time (250) <br/>access-transaction-events (251) <br/>accompaniment (252) <br/>accompaniment-time (253) <br/>activation-time (254) <br/>active-authentication-policy (255) <br/>assigned-access-rights (256) <br/>authentication-factors (257) <br/>authentication-policy-list (258) <br/>authentication-policy-names (259) <br/>authentication-status (260) <br/>authorization-mode (261) <br/>belongs-to (262) <br/>credential-disable (263) <br/>credential-status (264) <br/>credentials (265) <br/>credentials-in-zone (266) <br/>days-remaining (267) <br/>entry-points (268) <br/>exit-points (269) <br/>expiration-time (270) <br/>extended-time-enable (271) <br/>failed-attempt-events (272) <br/>failed-attempts (273) <br/>failed-attempts-time (274) <br/>last-access-event (275) <br/>last-access-point (276) <br/>last-credential-added (277) <br/>last-credential-added-time (278) <br/>last-credential-removed (279) <br/>last-credential-removed-time (280) <br/>last-use-time (281) <br/>lockout (282) <br/>lockout-relinquish-time (283) <br/>max-failed-attempts (285) <br/>members (286) <br/>muster-point (287) <br/>negative-access-rules (288) <br/>number-of-authentication-policies (289) <br/>occupancy-count (290) <br/>occupancy-count-adjust (291) <br/>occupancy-count-enable (292) <br/>occupancy-lower-limit (294) <br/>occupancy-lower-limit-enforced (295) <br/>occupancy-state (296) <br/>occupancy-upper-limit (297) <br/>occupancy-upper-limit-enforced (298) <br/>passback-mode (300) <br/>passback-timeout (301) <br/>positive-access-rules (302) <br/>reason-for-disable (303) <br/>supported-formats (304) <br/>supported-format-classes (305) <br/>threat-authority (306) <br/>threat-level (307) <br/>trace-flag (308) <br/>transaction-notification-class (309) <br/>user-external-identifier (310) <br/>user-information-reference (311) <br/>user-name (317) <br/>user-type (318) <br/>uses-remaining (319) <br/>zone-from (320) <br/>zone-to (321) <br/>access-event-tag (322) <br/>global-identifier (323) <br/>verification-time (326) <br/>base-device-security-policy (327) <br/>distribution-key-revision (328) <br/>do-not-hide (329) <br/>key-sets (330) <br/>last-key-server (331) <br/>network-access-security-policies (332) <br/>packet-reorder-time (333) <br/>security-pdu-timeout (334) <br/>security-time-window (335) <br/>supported-security-algorithms (336) <br/>update-key-set-timeout (337)|backup-and-restore-state (338) <br/>backup-preparation-time (339) <br/>restore-completion-time (340) <br/>restore-preparation-time (341) <br/>bit-mask (342) <br/>bit-text (343) <br/>is-utc (344) <br/>group-members (345) <br/>group-member-names (346) <br/>member-status-flags (347) <br/>requested-update-interval (348) <br/>covu-period (349) <br/>covu-recipients (350) <br/>event-message-texts (351) <br/>event-message-texts-config (352) <br/>event-detection-enable (353) <br/>event-algorithm-inhibit (354) <br/>event-algorithm-inhibit-ref (355) <br/>time-delay-normal (356) <br/>reliability-evaluation-inhibit (357) <br/>fault-parameters (358) <br/>fault-type (359) <br/>local-forwarding-only (360) <br/>process-identifier-filter (361) <br/>subscribed-recipients (362) <br/>port-filter (363) <br/>authorization-exemptions (364) <br/>allow-group-delay-inhibit (365) <br/>channel-number (366) <br/>control-groups (367) <br/>execution-delay (368) <br/>last-priority (369) <br/>write-status (370) <br/>property-list (371) <br/>serial-number (372) <br/>blink-warn-enable (373) <br/>default-fade-time (374) <br/>default-ramp-rate (375) <br/>default-step-increment (376) <br/>egress-time (377) <br/>in-progress (378) <br/>instantaneous-power (379) <br/>lighting-command (380) <br/>lighting-command-default-priority (381) <br/>max-actual-value (382) <br/>min-actual-value (383) <br/>power (384) <br/>transition (385) <br/>egress-active (386) <br/>interface-value (387) <br/>fault-high-limit (388) <br/>fault-low-limit (389) <br/>low-diff-limit (390) <br/>strike-count (391) <br/>time-of-strike-count-reset (392) <br/>default-timeout (393) <br/>initial-timeout (394) <br/>last-state-change (395) <br/>state-change-values (396) <br/>timer-running (397) <br/>timer-state (398) <br/>apdu-length (399) <br/>ip-address (400) <br/>ip-default-gateway (401) <br/>ip-dhcp-enable (402) <br/>ip-dhcp-lease-time (403) <br/>ip-dhcp-lease-time-remaining (404) <br/>ip-dhcp-server (405) <br/>ip-dns-server (406) <br/>bacnet-ip-global-address (407) <br/>bacnet-ip-mode (408) <br/>bacnet-ip-multicast-address (409) <br/>bacnet-ip-nat-traversal (410) <br/>ip-subnet-mask (411) <br/>bacnet-ip-udp-port (412) <br/>bbmd-accept-fd-registrations (413) <br/>bbmd-broadcast-distribution-table (414) <br/>bbmd-foreign-device-table (415) <br/>changes-pending (416) <br/>command (417) <br/>fd-bbmd-address (418) <br/>fd-subscription-lifetime (419) <br/>link-speed (420) <br/>link-speeds (421) <br/>link-speed-autonegotiate (422) <br/>mac-address (423) <br/>network-interface-name (424) <br/>network-number (425) <br/>network-number-quality (426) <br/>network-type (427) <br/>routing-table (428) <br/>virtual-mac-address-table (429) <br/>command-time-array (430) <br/>current-command-priority (431) <br/>last-command-time (432) <br/>value-source (433) <br/>value-source-array (434) <br/>bacnet-ipv6-mode (435) <br/>ipv6-address (436) <br/>ipv6-prefix-length (437) <br/>bacnet-ipv6-udp-port (438) <br/>ipv6-default-gateway (439) <br/>bacnet-ipv6-multicast-address (440) <br/>ipv6-dns-server (441) <br/>ipv6-auto-addressing-enable (442) <br/>ipv6-dhcp-lease-time (443) <br/>ipv6-dhcp-lease-time-remaining (444) <br/>ipv6-dhcp-server (445) <br/>ipv6-zone-index (446) <br/>assigned-landing-calls (447) <br/>car-assigned-direction (448) <br/>car-door-command (449) <br/>car-door-status (450) <br/>car-door-text (451) <br/>car-door-zone (452) <br/>car-drive-status (453) <br/>car-load (454) <br/>car-load-units (455) <br/>car-mode (456) <br/>car-moving-direction (457) <br/>car-position (458) <br/>elevator-group (459) <br/>energy-meter (460) <br/>energy-meter-ref (461) <br/>escalator-mode (462) <br/>fault-signals (463) <br/>floor-text (464) <br/>group-id (465) <br/>group-mode (467) <br/>higher-deck (468) <br/>installation-id (469) <br/>landing-calls (470) <br/>landing-call-control (471) <br/>landing-door-status (472) <br/>lower-deck (473) <br/>machine-room-id (474) <br/>making-car-call (475) <br/>next-stopping-floor (476) <br/>operation-direction (477) <br/>passenger-alarm (478) <br/>power-mode (479) <br/>registered-car-call (480) <br/>active-cov-multiple-subscriptions (481) <br/>protocol-level (482) <br/>reference-port (483) <br/>deployed-profile-location (484) <br/>profile-location (485) <br/>tags (486) <br/>subordinate-node-types (487) <br/>subordinate-tags (488) <br/>subordinate-relationships (489) <br/>default-subordinate-relationship (490) <br/>represents (491)|\n\nIn case of proprietary properties, please refer to [RP-C PICS Protocol document](<a href=\"https://www.bacnetinternational.net/catalog/manu/schneider%20electric/EcoStruxure%20RP-C%20PICS_Protocol%20Rev%2014_April26_2019_FINAL.pdf\" target=\"_blank\">https://www.bacnetinternational.net/catalog/manu/schneider%20electric/EcoStruxure%20RP-C%20PICS_Protocol%20Rev%2014_April26_2019_FINAL.pdf</a>)\n\n## Notification Messages\n\nYou can use Notification APIs to efficiently monitor object value changes. First, the Web Service client needs to create COV(Change Of Value) subscriptions for the monitored objects.\n\nWhen the property value (present value: 85) of a subscribed object is changed, a notification message is queued. The Web Service client can call an API to get the queued message periodically to monitor the value.\n\nThe default size of the notification message queue is 20. You can change the size of queue from 20 to 999 via Web Server settings API.\n\nFor efficient communications, the Web Service client needs to provide a query parameter \"lastNotificationId\" which is the Id of last message from the previous API request. Then the Web Service will return queued messages after the last notification message. If there is no messages after the last notification message, it will return an empty message with \"outOfSync\" as false.\n\n\"outOfSync\" is true when requested lastNotificationId notification message doesn't exist in the queue. This means that the Web Service client missed several notification messages which would be popped out from the queue already. If so, the monitoring(or cached) values on the Web Service client application may be out of sync with the RP-C values. \n\n<img src=\"https://github.com/SESA545913/SE-EnergyManagement-Team/raw/main/QueuedNotification.PNG\" style=\"zoom:60%;\" /> \n\nIn this case, RP-C returns the last 20 queued messages to synchronize the lastNotificationId between RP and the client application. If the client application has monitoring(or cached) values, it should obtain property values once more to refresh them.\n\n## Response Codes\n\nThe RP Series controller Web API follows the error response format proposed in [RFC 7807](https://tools.ietf.org/html/rfc7807) also known as Problem Details for HTTP APIs.  As with our normal API responses, your client must be prepared to gracefully handle additional members of the response.\n\n| HTTP Status Code    |Error Reason |\n|:----------:|--------------|\n| **400**<br/>**Bad Request** |This is the generic error type for not being able to process the request, and will generally contain an explanation in the message.<br/>Other reasons could be: <br /> **Invalid Resource**: The submitted POST body failed our input validation. This error may include an additional “errors” property, with a list of the validation issues. <br /> **Invalid Action**: Returned when you try to access an action on a resource that doesn’t support that action.<br /> **JSON Parse Exception**:  The JSON sent in the request body is not valid JSON.|  \n| **401**<br/>**APIKeyMissing**| Your request did not include an API key.This error suggests that your API key was missing from your request, or that something was formatted or named improperly in your header.<br/>Other reason could be:<br/>**APIKeyInvalid**: Your API key may be invalid, or you've attempted to access the wrong data center. Check that your API key was input correctly, and verify which data center to access.|\n| **403**<br/>**Forbidden**| You are not permitted to access this resource. This is a generic error. <br/>Other reasons could be:<br/>**UserDisabled**: This account has been disabled.<br/>**WrongDatacenter**: The API key provided is linked to a different data center. This error suggests that you tried to contact the wrong data center. It's often associated with misconfigured libraries. |\n|**404**<br/>**ResourceNotFound**|The requested resource could not be found. This error tells you a specific resource doesn't exist. It's possible that the resource has been moved or deleted, or that there's a typo in your request. |\n|**405**<br/>**MethodNotAllowed**|The requested method and resource are not compatible. See the Allow header for this resource's available methods. This error means that the requested resource does not support the HTTP method you used. Find out which methods are allowed for each resource in the API Reference. |\n|**414**<br/>**ResourceNestingTooDeep**|The sub-resource requested is nested too deeply. This uncommon error appears if you've tried to generate a URL with too many resources. |\n|**422**<br/>**InvalidMethodOverride**|This error lets you know you've tried to override an incompatible method. You can only use the X-HTTP-Method-Override header with the POST method.<br/>Other reasons could be:<br/>**RequestedFieldsInvalid**: The fields requested from this resource are invalid.This error suggests there is a typo in your field request or some other type of syntax error or problem that invalidates your request.|\n|**429**<br/>**TooManyRequests**|You have exceeded the limit of 10 simultaneous connections. When you reach the connection limit, we'll throttle the server response. If any of your requests time out after you've reached the limit, those requests could still be considered open and continue to slow your connection. |\n|**500**<br/>**InternalServerError**|An unexpected internal error has occurred. This error lets you know RP-C has experienced a problem. |\n|**503**<br/>**ComplianceRelated**|This method has been disabled. |\n\n## Support\n\nContact the SE Exchange support team at exchange.support@se.com and include:\n\n- Endpoint URL\n- Request/Response\n- Any additional information like Screenshots , Postman collections.\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34682654"
	},
	"item": [
		{
			"name": "v1",
			"item": [
				{
					"name": "token",
					"item": [
						{
							"name": "Create Token",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"token"
									]
								},
								"description": "A web token is created and returned. The Client application then uses the token to access APIs in the next request until the token is valid."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/token",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"access_token\": \"eyJh...\",\n  \"token_type\": \"bearer\",\n  \"expires_in\": \"<integer>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "system",
					"item": [
						{
							"name": "settings",
							"item": [
								{
									"name": "webserver",
									"item": [
										{
											"name": "certificate",
											"item": [
												{
													"name": "servercert",
													"item": [
														{
															"name": "Upload certificate",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/octet-stream"
																	}
																],
																"body": {
																	"mode": "file",
																	"file": {}
																},
																"url": {
																	"raw": "{{baseUrl}}/v1/system/settings/webserver/certificate/servercert",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"v1",
																		"system",
																		"settings",
																		"webserver",
																		"certificate",
																		"servercert"
																	]
																},
																"description": "A new server certificate is uploaded\\\n**This API is available for admin user only.**"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/octet-stream"
																			}
																		],
																		"body": {
																			"mode": "file",
																			"file": {}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/v1/system/settings/webserver/certificate/servercert",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"v1",
																				"system",
																				"settings",
																				"webserver",
																				"certificate",
																				"servercert"
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "text",
																	"header": [],
																	"cookie": [],
																	"body": ""
																}
															]
														}
													]
												},
												{
													"name": "serverprivatekey",
													"item": [
														{
															"name": "Upload private key",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/octet-stream"
																	}
																],
																"body": {
																	"mode": "file",
																	"file": {}
																},
																"url": {
																	"raw": "{{baseUrl}}/v1/system/settings/webserver/certificate/serverprivatekey",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"v1",
																		"system",
																		"settings",
																		"webserver",
																		"certificate",
																		"serverprivatekey"
																	]
																},
																"description": "A new server private key is uploaded.\\\n**This API is available for admin user only.**"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/octet-stream"
																			}
																		],
																		"body": {
																			"mode": "file",
																			"file": {}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/v1/system/settings/webserver/certificate/serverprivatekey",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"v1",
																				"system",
																				"settings",
																				"webserver",
																				"certificate",
																				"serverprivatekey"
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "text",
																	"header": [],
																	"cookie": [],
																	"body": ""
																}
															]
														}
													]
												},
												{
													"name": "clientcacert",
													"item": [
														{
															"name": "Upload client CA certificate",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/octet-stream"
																	}
																],
																"body": {
																	"mode": "file",
																	"file": {}
																},
																"url": {
																	"raw": "{{baseUrl}}/v1/system/settings/webserver/certificate/clientcacert",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"v1",
																		"system",
																		"settings",
																		"webserver",
																		"certificate",
																		"clientcacert"
																	]
																},
																"description": "A new client CA certificate is uploaded.\\\n**This API is available for admin user only.**"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/octet-stream"
																			}
																		],
																		"body": {
																			"mode": "file",
																			"file": {}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/v1/system/settings/webserver/certificate/clientcacert",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"v1",
																				"system",
																				"settings",
																				"webserver",
																				"certificate",
																				"clientcacert"
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "text",
																	"header": [],
																	"cookie": [],
																	"body": ""
																}
															]
														}
													]
												},
												{
													"name": "trynewcerts",
													"item": [
														{
															"name": "Try new certs",
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/v1/system/settings/webserver/certificate/trynewcerts",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"v1",
																		"system",
																		"settings",
																		"webserver",
																		"certificate",
																		"trynewcerts"
																	]
																},
																"description": "New certificates are tried by restarting the web server.\\\nIf you reboot your device or restart the web server without storing it, new certs will be discarded.\\\n**This API is available for admin user only.**"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/v1/system/settings/webserver/certificate/trynewcerts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"v1",
																				"system",
																				"settings",
																				"webserver",
																				"certificate",
																				"trynewcerts"
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "text",
																	"header": [],
																	"cookie": [],
																	"body": ""
																}
															]
														}
													]
												},
												{
													"name": "storecerts",
													"item": [
														{
															"name": "Store certs",
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/v1/system/settings/webserver/certificate/storecerts",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"v1",
																		"system",
																		"settings",
																		"webserver",
																		"certificate",
																		"storecerts"
																	]
																},
																"description": "The certificates running on a system currently are stored\\\nThis api should be called after trynewcerts API to store new certificates.\\\n**This API is available for admin user only.**"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/v1/system/settings/webserver/certificate/storecerts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"v1",
																				"system",
																				"settings",
																				"webserver",
																				"certificate",
																				"storecerts"
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "text",
																	"header": [],
																	"cookie": [],
																	"body": ""
																}
															]
														}
													]
												}
											]
										},
										{
											"name": "Get web server settings",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/system/settings/webserver",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"system",
														"settings",
														"webserver"
													]
												},
												"description": "Web Server Settings are returned.\\\n**This API is available for admin user only.**"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/v1/system/settings/webserver",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"v1",
																"system",
																"settings",
																"webserver"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"portNumber\": 443,\n  \"clientCertificateAuthEnabled\": false,\n  \"notificationQueueSize\": 20,\n  \"ewsUserAuthEnabled\": false,\n  \"ewsIPAddress\": \"<string>\",\n  \"ewsPortNumber\": \"<integer>\",\n  \"ewsResourceId\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Update web server settings",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"portNumber\": 443,\n  \"clientCertificateAuthEnabled\": false,\n  \"notificationQueueSize\": 20,\n  \"ewsUserAuthEnabled\": false,\n  \"ewsIPAddress\": \"<string>\",\n  \"ewsPortNumber\": \"<integer>\",\n  \"ewsResourceId\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v1/system/settings/webserver",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"system",
														"settings",
														"webserver"
													]
												},
												"description": "Web server settings are updated.\\\n**This API is available for admin user only.**"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"portNumber\": 443,\n  \"clientCertificateAuthEnabled\": false,\n  \"notificationQueueSize\": 20,\n  \"ewsUserAuthEnabled\": false,\n  \"ewsIPAddress\": \"<string>\",\n  \"ewsPortNumber\": \"<integer>\",\n  \"ewsResourceId\": \"<string>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/v1/system/settings/webserver",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"v1",
																"system",
																"settings",
																"webserver"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"portNumber\": 443,\n  \"clientCertificateAuthEnabled\": false,\n  \"notificationQueueSize\": 20,\n  \"ewsUserAuthEnabled\": false,\n  \"ewsIPAddress\": \"<string>\",\n  \"ewsPortNumber\": \"<integer>\",\n  \"ewsResourceId\": \"<string>\"\n}"
												},
												{
													"name": "Bad Request",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"portNumber\": 443,\n  \"clientCertificateAuthEnabled\": false,\n  \"notificationQueueSize\": 20,\n  \"ewsUserAuthEnabled\": false,\n  \"ewsIPAddress\": \"<string>\",\n  \"ewsPortNumber\": \"<integer>\",\n  \"ewsResourceId\": \"<string>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/v1/system/settings/webserver",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"v1",
																"system",
																"settings",
																"webserver"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "local",
					"item": [
						{
							"name": "usermngmt",
							"item": [
								{
									"name": "admin",
									"item": [
										{
											"name": "Update admin user",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"adminName\": \"admin\",\n  \"adminPassword\": \"password\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v1/local/usermngmt/admin",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"local",
														"usermngmt",
														"admin"
													]
												},
												"description": "Admin user information is updated.\\\n**This API is available for admin user only.**\\\nThe admin name and password policy is as follow,\n- Maximum length of a user name is 20.\n- User password must be between 8 and 20 characters.\n- User password must contain at least one uppercase, or capital, letter (ex: A, B, etc.)\n- User password must contain at least one lowercase letter.\n- User password must contain at least one number digit (ex: 0, 1, 2, 3, etc.)\n- User password must contain at least one special character -for example: $, #, @, !,%,^,&,*,(,)"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"adminName\": \"admin\",\n  \"adminPassword\": \"password\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/v1/local/usermngmt/admin",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"v1",
																"local",
																"usermngmt",
																"admin"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Bad Request",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"adminName\": \"admin\",\n  \"adminPassword\": \"password\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/v1/local/usermngmt/admin",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"v1",
																"local",
																"usermngmt",
																"admin"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "{userId}",
									"item": [
										{
											"name": "Get user information",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/local/usermngmt/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"local",
														"usermngmt",
														":userId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "<integer>",
															"description": "(Required) unique number of user."
														}
													]
												},
												"description": "User information is returned.\\\n**This API is available for admin user only.**"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/v1/local/usermngmt/:userId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"v1",
																"local",
																"usermngmt",
																":userId"
															],
															"variable": [
																{
																	"key": "userId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"userId\": \"<integer>\",\n  \"userName\": \"<string>\",\n  \"writePermission\": \"<boolean>\"\n}"
												},
												{
													"name": "Property not found",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/v1/local/usermngmt/:userId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"v1",
																"local",
																"usermngmt",
																":userId"
															],
															"variable": [
																{
																	"key": "userId"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Update user information",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"userPassword\": \"<string>\",\n  \"writePermission\": \"<boolean>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v1/local/usermngmt/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"local",
														"usermngmt",
														":userId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "<integer>",
															"description": "(Required) unique number of user."
														}
													]
												},
												"description": "User information is updated.\\\n**This API is available for admin user only.**"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"userPassword\": \"<string>\",\n  \"writePermission\": \"<boolean>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/v1/local/usermngmt/:userId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"v1",
																"local",
																"usermngmt",
																":userId"
															],
															"variable": [
																{
																	"key": "userId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"userId\": \"<integer>\",\n  \"userName\": \"<string>\",\n  \"writePermission\": \"<boolean>\"\n}"
												},
												{
													"name": "Bad Request",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"userPassword\": \"<string>\",\n  \"writePermission\": \"<boolean>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/v1/local/usermngmt/:userId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"v1",
																"local",
																"usermngmt",
																":userId"
															],
															"variable": [
																{
																	"key": "userId"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Property not found",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"userPassword\": \"<string>\",\n  \"writePermission\": \"<boolean>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/v1/local/usermngmt/:userId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"v1",
																"local",
																"usermngmt",
																":userId"
															],
															"variable": [
																{
																	"key": "userId"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Delete user account",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v1/local/usermngmt/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"local",
														"usermngmt",
														":userId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "<integer>",
															"description": "(Required) unique number of user."
														}
													]
												},
												"description": "User information is deleted.\\\n**This API is available for admin user only.**"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/v1/local/usermngmt/:userId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"v1",
																"local",
																"usermngmt",
																":userId"
															],
															"variable": [
																{
																	"key": "userId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Property not found",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/v1/local/usermngmt/:userId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"v1",
																"local",
																"usermngmt",
																":userId"
															],
															"variable": [
																{
																	"key": "userId"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get user Id list",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/local/usermngmt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"local",
												"usermngmt"
											]
										},
										"description": "A list of user Ids is returned.\\\n**This API is available for admin user only.**"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/local/usermngmt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"local",
														"usermngmt"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"userIds\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}"
										}
									]
								},
								{
									"name": "Create user account",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userName\": \"<string>\",\n  \"userPassword\": \"<string>\",\n  \"writePermission\": \"<boolean>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/local/usermngmt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"local",
												"usermngmt"
											]
										},
										"description": "A user account is created.\\\n**This API is available for admin user only.**\\\nMax number of users is 20.\\\nThe user name and password policy is as follow,\n- Maximum length of a user name is 20.\n- User password must be between 8 and 20 characters.\n- User password must contain at least one uppercase, or capital, letter (ex: A, B, etc.)\n- User password must contain at least one lowercase letter.\n- User password must contain at least one number digit (ex: 0, 1, 2, 3, etc.)\n- User password must contain at least one special character -for example: $, #, @, !,%,^,&,*,(,)"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"userName\": \"<string>\",\n  \"userPassword\": \"<string>\",\n  \"writePermission\": \"<boolean>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v1/local/usermngmt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"local",
														"usermngmt"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"userId\": \"<integer>\",\n  \"userName\": \"<string>\",\n  \"writePermission\": \"<boolean>\"\n}"
										},
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"userName\": \"<string>\",\n  \"userPassword\": \"<string>\",\n  \"writePermission\": \"<boolean>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v1/local/usermngmt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"local",
														"usermngmt"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "protocols",
					"item": [
						{
							"name": "bacnet",
							"item": [
								{
									"name": "local",
									"item": [
										{
											"name": "objects",
											"item": [
												{
													"name": "{objectId}",
													"item": [
														{
															"name": "properties",
															"item": [
																{
																	"name": "{propertyId}",
																	"item": [
																		{
																			"name": "Find BACnet property by ID",
																			"request": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/v1/protocols/bacnet/local/objects/:objectId/properties/:propertyId",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"v1",
																						"protocols",
																						"bacnet",
																						"local",
																						"objects",
																						":objectId",
																						"properties",
																						":propertyId"
																					],
																					"variable": [
																						{
																							"key": "objectId",
																							"value": "<integer>",
																							"description": "(Required) objectId is combination of object type and instance number.\nFor example, 00000000 01 (object type: 1) / 000000 00000000 00001011 (instance Number: 11)"
																						},
																						{
																							"key": "propertyId",
																							"value": "<integer>",
																							"description": "(Required) unique property identifier. For more information, see the BACnet Property Identifier subsection in this document."
																						}
																					]
																				},
																				"description": "A single property is returned\n\nThe Sandbox application for this API document returns BACnet object data based on RP-33 BMS application. For more information, see the Limitations section in this document."
																			},
																			"response": [
																				{
																					"name": "successful operation",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/v1/protocols/bacnet/local/objects/:objectId/properties/:propertyId",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"v1",
																								"protocols",
																								"bacnet",
																								"local",
																								"objects",
																								":objectId",
																								"properties",
																								":propertyId"
																							],
																							"variable": [
																								{
																									"key": "objectId"
																								},
																								{
																									"key": "propertyId"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"objectId\": \"<integer>\",\n  \"propertyId\": \"<integer>\",\n  \"anyOfValue\": [\n    {\n      \"type\": \"<string>\",\n      \"isArray\": \"<boolean>\",\n      \"value\": \"<integer>\"\n    },\n    {\n      \"type\": \"<string>\",\n      \"isArray\": \"<boolean>\",\n      \"value\": \"<integer>\"\n    }\n  ],\n  \"readOnly\": \"<boolean>\"\n}"
																				},
																				{
																					"name": "Property not found",
																					"originalRequest": {
																						"method": "GET",
																						"header": [],
																						"url": {
																							"raw": "{{baseUrl}}/v1/protocols/bacnet/local/objects/:objectId/properties/:propertyId",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"v1",
																								"protocols",
																								"bacnet",
																								"local",
																								"objects",
																								":objectId",
																								"properties",
																								":propertyId"
																							],
																							"variable": [
																								{
																									"key": "objectId"
																								},
																								{
																									"key": "propertyId"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "text",
																					"header": [],
																					"cookie": [],
																					"body": ""
																				}
																			]
																		},
																		{
																			"name": "Update property value",
																			"request": {
																				"method": "PUT",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"anyOfValue\": [\n    {\n      \"type\": \"<string>\",\n      \"isArray\": \"<boolean>\",\n      \"value\": \"<integer>\"\n    },\n    {\n      \"type\": \"<string>\",\n      \"isArray\": \"<boolean>\",\n      \"value\": \"<integer>\"\n    }\n  ]\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/v1/protocols/bacnet/local/objects/:objectId/properties/:propertyId?index=<integer>&priorityIndex=<integer>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"v1",
																						"protocols",
																						"bacnet",
																						"local",
																						"objects",
																						":objectId",
																						"properties",
																						":propertyId"
																					],
																					"query": [
																						{
																							"key": "index",
																							"value": "<integer>",
																							"description": "This is optional. It can be used to update a value in an array."
																						},
																						{
																							"key": "priorityIndex",
																							"value": "<integer>",
																							"description": "This is optional. It can be used to update a priority array via the present value"
																						}
																					],
																					"variable": [
																						{
																							"key": "objectId",
																							"value": "<integer>",
																							"description": "(Required) objectId is combination of object type and instance number.\nFor example, 00000000 01 (object type: 1) / 000000 00000000 00001011 (instance Number: 11)"
																						},
																						{
																							"key": "propertyId",
																							"value": "<integer>",
																							"description": "(Required) unique property identifier. For more information, see the BACnet Property Identifier subsection in this document."
																						}
																					]
																				},
																				"description": "The property value is updated and returned.\n\nThe Sandbox application for this API document returns BACnet object data based on RP-33 BMS application. For more information, see the Limitations section in this document."
																			},
																			"response": [
																				{
																					"name": "successful operation",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"anyOfValue\": [\n    {\n      \"type\": \"<string>\",\n      \"isArray\": \"<boolean>\",\n      \"value\": \"<integer>\"\n    },\n    {\n      \"type\": \"<string>\",\n      \"isArray\": \"<boolean>\",\n      \"value\": \"<integer>\"\n    }\n  ]\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/v1/protocols/bacnet/local/objects/:objectId/properties/:propertyId?index=<integer>&priorityIndex=<integer>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"v1",
																								"protocols",
																								"bacnet",
																								"local",
																								"objects",
																								":objectId",
																								"properties",
																								":propertyId"
																							],
																							"query": [
																								{
																									"key": "index",
																									"value": "<integer>",
																									"description": "This is optional. It can be used to update a value in an array."
																								},
																								{
																									"key": "priorityIndex",
																									"value": "<integer>",
																									"description": "This is optional. It can be used to update a priority array via the present value"
																								}
																							],
																							"variable": [
																								{
																									"key": "objectId"
																								},
																								{
																									"key": "propertyId"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"objectId\": \"<integer>\",\n  \"propertyId\": \"<integer>\",\n  \"anyOfValue\": [\n    {\n      \"type\": \"<string>\",\n      \"isArray\": \"<boolean>\",\n      \"value\": \"<integer>\"\n    },\n    {\n      \"type\": \"<string>\",\n      \"isArray\": \"<boolean>\",\n      \"value\": \"<integer>\"\n    }\n  ],\n  \"readOnly\": \"<boolean>\"\n}"
																				},
																				{
																					"name": "Bad Request",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"anyOfValue\": [\n    {\n      \"type\": \"<string>\",\n      \"isArray\": \"<boolean>\",\n      \"value\": \"<integer>\"\n    },\n    {\n      \"type\": \"<string>\",\n      \"isArray\": \"<boolean>\",\n      \"value\": \"<integer>\"\n    }\n  ]\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/v1/protocols/bacnet/local/objects/:objectId/properties/:propertyId?index=<integer>&priorityIndex=<integer>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"v1",
																								"protocols",
																								"bacnet",
																								"local",
																								"objects",
																								":objectId",
																								"properties",
																								":propertyId"
																							],
																							"query": [
																								{
																									"key": "index",
																									"value": "<integer>",
																									"description": "This is optional. It can be used to update a value in an array."
																								},
																								{
																									"key": "priorityIndex",
																									"value": "<integer>",
																									"description": "This is optional. It can be used to update a priority array via the present value"
																								}
																							],
																							"variable": [
																								{
																									"key": "objectId"
																								},
																								{
																									"key": "propertyId"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "text",
																					"header": [],
																					"cookie": [],
																					"body": ""
																				},
																				{
																					"name": "Property not found",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"anyOfValue\": [\n    {\n      \"type\": \"<string>\",\n      \"isArray\": \"<boolean>\",\n      \"value\": \"<integer>\"\n    },\n    {\n      \"type\": \"<string>\",\n      \"isArray\": \"<boolean>\",\n      \"value\": \"<integer>\"\n    }\n  ]\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/v1/protocols/bacnet/local/objects/:objectId/properties/:propertyId?index=<integer>&priorityIndex=<integer>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"v1",
																								"protocols",
																								"bacnet",
																								"local",
																								"objects",
																								":objectId",
																								"properties",
																								":propertyId"
																							],
																							"query": [
																								{
																									"key": "index",
																									"value": "<integer>",
																									"description": "This is optional. It can be used to update a value in an array."
																								},
																								{
																									"key": "priorityIndex",
																									"value": "<integer>",
																									"description": "This is optional. It can be used to update a priority array via the present value"
																								}
																							],
																							"variable": [
																								{
																									"key": "objectId"
																								},
																								{
																									"key": "propertyId"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "text",
																					"header": [],
																					"cookie": [],
																					"body": ""
																				}
																			]
																		}
																	]
																},
																{
																	"name": "Get property list",
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/v1/protocols/bacnet/local/objects/:objectId/properties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"v1",
																				"protocols",
																				"bacnet",
																				"local",
																				"objects",
																				":objectId",
																				"properties"
																			],
																			"variable": [
																				{
																					"key": "objectId",
																					"value": "<integer>",
																					"description": "(Required) objectId is combination of object type and instance number.\nFor example, 00000000 01 (object type: 1) / 000000 00000000 00001011 (instance Number: 11)"
																				}
																			]
																		},
																		"description": "A list of propertyIDs that exist on the object is returned.\\\nYou will find the BACnet Property Identifier in the BACnet protocol document.\n\nThe Sandbox application for this API document returns BACnet object data based on RP-33 BMS application. For more information, see the Limitations section in this document."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/v1/protocols/bacnet/local/objects/:objectId/properties",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"v1",
																						"protocols",
																						"bacnet",
																						"local",
																						"objects",
																						":objectId",
																						"properties"
																					],
																					"variable": [
																						{
																							"key": "objectId"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"propertyIds\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}"
																		},
																		{
																			"name": "Properties not found",
																			"originalRequest": {
																				"method": "GET",
																				"header": [],
																				"url": {
																					"raw": "{{baseUrl}}/v1/protocols/bacnet/local/objects/:objectId/properties",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"v1",
																						"protocols",
																						"bacnet",
																						"local",
																						"objects",
																						":objectId",
																						"properties"
																					],
																					"variable": [
																						{
																							"key": "objectId"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "text",
																			"header": [],
																			"cookie": [],
																			"body": ""
																		}
																	]
																}
															]
														},
														{
															"name": "Find BACnet object by ID",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/v1/protocols/bacnet/local/objects/:objectId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"v1",
																		"protocols",
																		"bacnet",
																		"local",
																		"objects",
																		":objectId"
																	],
																	"variable": [
																		{
																			"key": "objectId",
																			"value": "<integer>",
																			"description": "(Required) objectId is combination of object type and instance number.\nFor example, 00000000 01 (object type: 1) / 000000 00000000 00001011 (instance Number: 11)"
																		}
																	]
																},
																"description": "A single object is returned.\n\nThe Sandbox application for this API document returns BACnet object data based on RP-33 BMS application. For more information, see the Limitations section in this document."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/v1/protocols/bacnet/local/objects/:objectId",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"v1",
																				"protocols",
																				"bacnet",
																				"local",
																				"objects",
																				":objectId"
																			],
																			"variable": [
																				{
																					"key": "objectId"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"objectId\": \"<integer>\",\n  \"objectType\": \"<integer>\",\n  \"profileName\": \"<string>\",\n  \"objectName\": \"<string>\",\n  \"covSubscriptionSupport\": \"<boolean>\"\n}"
																},
																{
																	"name": "Object not found",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/v1/protocols/bacnet/local/objects/:objectId",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"v1",
																				"protocols",
																				"bacnet",
																				"local",
																				"objects",
																				":objectId"
																			],
																			"variable": [
																				{
																					"key": "objectId"
																				}
																			]
																		}
																	},
																	"status": "Not Found",
																	"code": 404,
																	"_postman_previewlanguage": "text",
																	"header": [],
																	"cookie": [],
																	"body": ""
																}
															]
														}
													]
												},
												{
													"name": "properties",
													"item": [
														{
															"name": "{propertyId}",
															"item": [
																{
																	"name": "Get a property list for multiple objects",
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/v1/protocols/bacnet/local/objects/properties/:propertyId?objectIds=<integer>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"v1",
																				"protocols",
																				"bacnet",
																				"local",
																				"objects",
																				"properties",
																				":propertyId"
																			],
																			"query": [
																				{
																					"key": "objectIds",
																					"value": "<integer>",
																					"description": "(Required) One or multiple objectIds are supported up to 20 objectIds, e.g., 1,2,3."
																				}
																			],
																			"variable": [
																				{
																					"key": "propertyId",
																					"value": "<integer>",
																					"description": "(Required) unique property identifier. For more information, see the BACnet Property Identifier subsection in this document."
																				}
																			]
																		},
																		"description": "A list of properties that are mutually available for multiple objects is returned.\n\n**This API is available from the RP application software v5.0.x.**\n\nThe Sandbox application for this API document returns BACnet object data based on RP-33 BMS application. For more information, see the Limitations section in this document."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/v1/protocols/bacnet/local/objects/properties/:propertyId?objectIds=<integer>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"v1",
																						"protocols",
																						"bacnet",
																						"local",
																						"objects",
																						"properties",
																						":propertyId"
																					],
																					"query": [
																						{
																							"key": "objectIds",
																							"value": "<integer>",
																							"description": "(Required) One or multiple objectIds are supported up to 20 objectIds, e.g., 1,2,3."
																						}
																					],
																					"variable": [
																						{
																							"key": "propertyId"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "[\n  {\n    \"objectId\": \"<integer>\",\n    \"propertyId\": \"<integer>\",\n    \"anyOfValue\": [\n      {\n        \"type\": \"<string>\",\n        \"isArray\": \"<boolean>\",\n        \"value\": \"<integer>\"\n      },\n      {\n        \"type\": \"<string>\",\n        \"isArray\": \"<boolean>\",\n        \"value\": \"<integer>\"\n      }\n    ],\n    \"readOnly\": \"<boolean>\"\n  },\n  {\n    \"objectId\": \"<integer>\",\n    \"propertyId\": \"<integer>\",\n    \"anyOfValue\": [\n      {\n        \"type\": \"<string>\",\n        \"isArray\": \"<boolean>\",\n        \"value\": \"<integer>\"\n      },\n      {\n        \"type\": \"<string>\",\n        \"isArray\": \"<boolean>\",\n        \"value\": \"<integer>\"\n      }\n    ],\n    \"readOnly\": \"<boolean>\"\n  }\n]"
																		},
																		{
																			"name": "Property not found",
																			"originalRequest": {
																				"method": "GET",
																				"header": [],
																				"url": {
																					"raw": "{{baseUrl}}/v1/protocols/bacnet/local/objects/properties/:propertyId?objectIds=<integer>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"v1",
																						"protocols",
																						"bacnet",
																						"local",
																						"objects",
																						"properties",
																						":propertyId"
																					],
																					"query": [
																						{
																							"key": "objectIds",
																							"value": "<integer>",
																							"description": "(Required) One or multiple objectIds are supported up to 20 objectIds, e.g., 1,2,3."
																						}
																					],
																					"variable": [
																						{
																							"key": "propertyId"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "text",
																			"header": [],
																			"cookie": [],
																			"body": ""
																		}
																	]
																}
															]
														},
														{
															"name": "Get propertyId list for multiple objects",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/v1/protocols/bacnet/local/objects/properties?objectIds=<integer>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"v1",
																		"protocols",
																		"bacnet",
																		"local",
																		"objects",
																		"properties"
																	],
																	"query": [
																		{
																			"key": "objectIds",
																			"value": "<integer>",
																			"description": "(Required) One or multiple objectIds are supported up to 20 objectIds, e.g., 1,2,3."
																		}
																	]
																},
																"description": "A list of propertyIDs that are mutually available for multiple objects is returned.\n\n**This API is available from the RP application software v5.0.x.**\n\nYou will find the BACnet Property Identifier in the BACnet protocol document.\n\nThe Sandbox application for this API document returns BACnet object data based on RP-33 BMS application. For more information, see the Limitations section in this document."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/v1/protocols/bacnet/local/objects/properties?objectIds=<integer>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"v1",
																				"protocols",
																				"bacnet",
																				"local",
																				"objects",
																				"properties"
																			],
																			"query": [
																				{
																					"key": "objectIds",
																					"value": "<integer>",
																					"description": "(Required) One or multiple objectIds are supported up to 20 objectIds, e.g., 1,2,3."
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"propertyIds\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}"
																},
																{
																	"name": "Properties not found",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/v1/protocols/bacnet/local/objects/properties?objectIds=<integer>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"v1",
																				"protocols",
																				"bacnet",
																				"local",
																				"objects",
																				"properties"
																			],
																			"query": [
																				{
																					"key": "objectIds",
																					"value": "<integer>",
																					"description": "(Required) One or multiple objectIds are supported up to 20 objectIds, e.g., 1,2,3."
																				}
																			]
																		}
																	},
																	"status": "Not Found",
																	"code": 404,
																	"_postman_previewlanguage": "text",
																	"header": [],
																	"cookie": [],
																	"body": ""
																}
															]
														}
													]
												},
												{
													"name": "Get Object list",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/v1/protocols/bacnet/local/objects?objectType=<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"v1",
																"protocols",
																"bacnet",
																"local",
																"objects"
															],
															"query": [
																{
																	"key": "objectType",
																	"value": "<integer>",
																	"description": "This is optional. BACnet Object type."
																}
															]
														},
														"description": "A list of object Ids that are accessible via the APIs.  \nHere's a list of object types available.\n- 0: Analog-Input Object\n- 1: Analog-Output Object\n- 2: Analog-Value Object\n- 3: Binary-Input Object\n- 4: Binary-Output Object\n- 5: Binary-Value Object\n- 9: Event-enrollment Object (Available from the RP application software v5.0.x)\n- 13: Multi-state Input Object\n- 14: Multi-state Output Object\n- 15: Notification-class Object (Available from the RP application software v5.0.x)\n- 19: Multi-state Value Object\n- 40: Characterstring-Value Object (Available from the RP application software v5.0.x)\n- 44: Datetime-Value Object (Available from the RP application software v5.0.x)\n- 45: Integer-Value Object\n- 146: MPX-Integer-Input Object (Proprietary object, Available from the RP application software v5.0.x)\n- 148: MPX-Integer-Output Object (Proprietary object, Available from the RP application software v5.0.x)\n\nThe Sandbox application for this API document return BACnet object data based on the RP-33 BMS application. For more information, see the Limitations section in this document."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/v1/protocols/bacnet/local/objects?objectType=<integer>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"v1",
																		"protocols",
																		"bacnet",
																		"local",
																		"objects"
																	],
																	"query": [
																		{
																			"key": "objectType",
																			"value": "<integer>",
																			"description": "This is optional. BACnet Object type."
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"objectIds\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}"
														}
													]
												}
											]
										},
										{
											"name": "activealarm",
											"item": [
												{
													"name": "Get active alarm list",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/v1/protocols/bacnet/local/activealarm?lastObjectId=<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"v1",
																"protocols",
																"bacnet",
																"local",
																"activealarm"
															],
															"query": [
																{
																	"key": "lastObjectId",
																	"value": "<integer>",
																	"description": "This is optional. If there is more alarms to be returend, 'moreAlarms' will be returned as true. In this case, object Id of the last one from the active alarm list need to be specified to get following alarms."
																}
															]
														},
														"description": "A list of active alarms is returned.\n\n**This API is available from the RP application software v5.0.x.**\n\nThe Sandbox application for this API document return BACnet object data based on the RP-33 BMS application. For more information, see the Limitations section in this document."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/v1/protocols/bacnet/local/activealarm?lastObjectId=<integer>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"v1",
																		"protocols",
																		"bacnet",
																		"local",
																		"activealarm"
																	],
																	"query": [
																		{
																			"key": "lastObjectId",
																			"value": "<integer>",
																			"description": "This is optional. If there is more alarms to be returend, 'moreAlarms' will be returned as true. In this case, object Id of the last one from the active alarm list need to be specified to get following alarms."
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"listOfAlarms\": [\n    {\n      \"objectId\": \"<integer>\",\n      \"notifyType\": \"<integer>\",\n      \"eventState\": \"<integer>\",\n      \"acknowledgedTransitions\": [\n        \"<boolean>\",\n        \"<boolean>\"\n      ],\n      \"timeStamp\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"priorities\": [\n        \"<integer>\",\n        \"<integer>\"\n      ],\n      \"eventEnabled\": [\n        \"<boolean>\",\n        \"<boolean>\"\n      ]\n    },\n    {\n      \"objectId\": \"<integer>\",\n      \"notifyType\": \"<integer>\",\n      \"eventState\": \"<integer>\",\n      \"acknowledgedTransitions\": [\n        \"<boolean>\",\n        \"<boolean>\"\n      ],\n      \"timeStamp\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"priorities\": [\n        \"<integer>\",\n        \"<integer>\"\n      ],\n      \"eventEnabled\": [\n        \"<boolean>\",\n        \"<boolean>\"\n      ]\n    }\n  ],\n  \"moreAlarms\": \"<boolean>\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "notifications",
											"item": [
												{
													"name": "covsubscriptions",
													"item": [
														{
															"name": "{objectId}",
															"item": [
																{
																	"name": "Delete cov subscription of an object.",
																	"request": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/v1/protocols/bacnet/local/notifications/covsubscriptions/:objectId",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"v1",
																				"protocols",
																				"bacnet",
																				"local",
																				"notifications",
																				"covsubscriptions",
																				":objectId"
																			],
																			"variable": [
																				{
																					"key": "objectId",
																					"value": "<integer>",
																					"description": "(Required) objectId is combination of object type and instance number.\nFor example, 00000000 01 (object type: 1) / 000000 00000000 00001011 (instance Number: 11)"
																				}
																			]
																		},
																		"description": "A cov subscription of an object is deleted.\n\n**This API is available from the RP application software v5.0.x.**\n\n**This API is available for admin user only.**"
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "DELETE",
																				"header": [],
																				"url": {
																					"raw": "{{baseUrl}}/v1/protocols/bacnet/local/notifications/covsubscriptions/:objectId",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"v1",
																						"protocols",
																						"bacnet",
																						"local",
																						"notifications",
																						"covsubscriptions",
																						":objectId"
																					],
																					"variable": [
																						{
																							"key": "objectId"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "text",
																			"header": [],
																			"cookie": [],
																			"body": ""
																		},
																		{
																			"name": "Bad Request",
																			"originalRequest": {
																				"method": "DELETE",
																				"header": [],
																				"url": {
																					"raw": "{{baseUrl}}/v1/protocols/bacnet/local/notifications/covsubscriptions/:objectId",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"v1",
																						"protocols",
																						"bacnet",
																						"local",
																						"notifications",
																						"covsubscriptions",
																						":objectId"
																					],
																					"variable": [
																						{
																							"key": "objectId"
																						}
																					]
																				}
																			},
																			"status": "Bad Request",
																			"code": 400,
																			"_postman_previewlanguage": "text",
																			"header": [],
																			"cookie": [],
																			"body": ""
																		}
																	]
																}
															]
														},
														{
															"name": "Get subscribed objectId list.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/v1/protocols/bacnet/local/notifications/covsubscriptions",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"v1",
																		"protocols",
																		"bacnet",
																		"local",
																		"notifications",
																		"covsubscriptions"
																	]
																},
																"description": "A list of objectIds which are subscribed is returned.\n\n\n**This API is available from the RP application software v5.0.x.**"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/v1/protocols/bacnet/local/notifications/covsubscriptions",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"v1",
																				"protocols",
																				"bacnet",
																				"local",
																				"notifications",
																				"covsubscriptions"
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"objectIds\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}"
																}
															]
														},
														{
															"name": "Create cov subscriptions for objects.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"objectIds\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/v1/protocols/bacnet/local/notifications/covsubscriptions",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"v1",
																		"protocols",
																		"bacnet",
																		"local",
																		"notifications",
																		"covsubscriptions"
																	]
																},
																"description": "Cov subscriptions for objects are created.\n\n**This API is available from the RP application software v5.0.x.**\n\n**This API is available for admin user only.**"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"objectIds\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/v1/protocols/bacnet/local/notifications/covsubscriptions",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"v1",
																				"protocols",
																				"bacnet",
																				"local",
																				"notifications",
																				"covsubscriptions"
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"objectIds\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}"
																},
																{
																	"name": "Bad Request",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"objectIds\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/v1/protocols/bacnet/local/notifications/covsubscriptions",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"v1",
																				"protocols",
																				"bacnet",
																				"local",
																				"notifications",
																				"covsubscriptions"
																			]
																		}
																	},
																	"status": "Bad Request",
																	"code": 400,
																	"_postman_previewlanguage": "text",
																	"header": [],
																	"cookie": [],
																	"body": ""
																}
															]
														},
														{
															"name": "Delete cov subscriptions for objects.",
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"objectIds\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/v1/protocols/bacnet/local/notifications/covsubscriptions?deleteAll=<boolean>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"v1",
																		"protocols",
																		"bacnet",
																		"local",
																		"notifications",
																		"covsubscriptions"
																	],
																	"query": [
																		{
																			"key": "deleteAll",
																			"value": "<boolean>",
																			"description": "This is optional. Set true if you want to delete all."
																		}
																	]
																},
																"description": "Cov subscriptions for objects are deleted.\n\n**This API is available from the RP application software v5.0.x.**\n\n**This API is available for admin user only.**"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"objectIds\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/v1/protocols/bacnet/local/notifications/covsubscriptions?deleteAll=<boolean>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"v1",
																				"protocols",
																				"bacnet",
																				"local",
																				"notifications",
																				"covsubscriptions"
																			],
																			"query": [
																				{
																					"key": "deleteAll",
																					"value": "<boolean>",
																					"description": "This is optional. Set true if you want to delete all."
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "text",
																	"header": [],
																	"cookie": [],
																	"body": ""
																},
																{
																	"name": "Bad Request",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"objectIds\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/v1/protocols/bacnet/local/notifications/covsubscriptions?deleteAll=<boolean>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"v1",
																				"protocols",
																				"bacnet",
																				"local",
																				"notifications",
																				"covsubscriptions"
																			],
																			"query": [
																				{
																					"key": "deleteAll",
																					"value": "<boolean>",
																					"description": "This is optional. Set true if you want to delete all."
																				}
																			]
																		}
																	},
																	"status": "Bad Request",
																	"code": 400,
																	"_postman_previewlanguage": "text",
																	"header": [],
																	"cookie": [],
																	"body": ""
																}
															]
														}
													]
												},
												{
													"name": "messages",
													"item": [
														{
															"name": "Get notification message list.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/v1/protocols/bacnet/local/notifications/messages?lastNotificationId=<integer>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"v1",
																		"protocols",
																		"bacnet",
																		"local",
																		"notifications",
																		"messages"
																	],
																	"query": [
																		{
																			"key": "lastNotificationId",
																			"value": "<integer>",
																			"description": "(Required) A notificationId of last message that client received in previous request. It will return a list of notification messages after the notificationId.\n\n0 can be provided if it is first request."
																		}
																	]
																},
																"description": "A list of notification messages is returned. It returns up to 20 messages at a request.\n\n\n**This API is available from the RP application software v5.0.x.**"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/v1/protocols/bacnet/local/notifications/messages?lastNotificationId=<integer>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"v1",
																				"protocols",
																				"bacnet",
																				"local",
																				"notifications",
																				"messages"
																			],
																			"query": [
																				{
																					"key": "lastNotificationId",
																					"value": "<integer>",
																					"description": "(Required) A notificationId of last message that client received in previous request. It will return a list of notification messages after the notificationId.\n\n0 can be provided if it is first request."
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"outOfSync\": \"<boolean>\",\n  \"eventNotifications\": [\n    {\n      \"notificationId\": \"<integer>\",\n      \"objectId\": \"<integer>\",\n      \"propertyId\": \"<integer>\",\n      \"timeStamp\": \"<string>\",\n      \"anyOfValue\": [\n        {\n          \"type\": \"<string>\",\n          \"isArray\": \"<boolean>\",\n          \"value\": \"<integer>\"\n        },\n        {\n          \"type\": \"<string>\",\n          \"isArray\": \"<boolean>\",\n          \"value\": \"<integer>\"\n        }\n      ]\n    },\n    {\n      \"notificationId\": \"<integer>\",\n      \"objectId\": \"<integer>\",\n      \"propertyId\": \"<integer>\",\n      \"timeStamp\": \"<string>\",\n      \"anyOfValue\": [\n        {\n          \"type\": \"<string>\",\n          \"isArray\": \"<boolean>\",\n          \"value\": \"<integer>\"\n        },\n        {\n          \"type\": \"<string>\",\n          \"isArray\": \"<boolean>\",\n          \"value\": \"<integer>\"\n        }\n      ]\n    }\n  ]\n}"
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://sandbox.dev.api.exchange.se.app/rp-controller"
		}
	]
}