{
	"info": {
		"_postman_id": "b5ab0f22-9f9b-4a41-9faa-2d4b90509ef9",
		"name": "EcoStruxure™ Energy Hub GraphQL API",
		"description": "# Introduction\n\n## EcoStruxure Energy API\n\nThis API has been designed to give access to all energy and power data coming from an EcoStruxure Power system. It allows external applications to request the data from the connected energy sensors and electrical devices including the utility counters like water and gas. Advanced queries can also be used for better understanding of contextualized information of the sites, site topology, electrical and metering hierarchy information. It includes electrical monitoring data with alarms.\n\nWith these APIs, external applications gain visibility of relevant energy data to reduce consumption and improve a site’s performance, and its energy analysis understanding for efficiency improvements. Applications can also remotely monitor the electrical installation for remote maintenance.\n\n## Data Model\n\nThe objective of the EcoStruxure Energy Data Model (EEDM) is to provide a unified view of information coming from different device types to the appropriate applications. The **E**coStruxure **E**nergy **D**ata **M**odel (EEDM) has been designed to simplify the user experience and the development of energy management applications by providing a common data model independent of the data source.\n\n### The EEDM uses\n\n* A limited set of generic classes, rather than domain specific ones.\n* Dictionaries to provide the semantic, rather than domain specific class attributes.\n\n## EEDM Concepts\n\n### What is a \"Thing\"?\n\n* `Thing` is an instance of a given concept.\n* A `Thing` references its associated concept via its URN.\n* A `Thing` has a set of property values and possibly also measurement values.\n\n`Thing` can be used to represent a physical device in the installation, a location or any object which matters for the end user but that we have only an indirect access to. In other words, a `Thing` can be used to represent an “asset” to expose, to the customer, what is the most relevant for his application, but that we only have an indirect view of.\n\nNote: Asset corresponds to what is sometimes called a “source”, “abstracts” or “virtual” by some teams.\n\nFor example, we may have access to instrument sensors for a motor and so be able to provide a diagnostic about the motor, yet without having any communication with the motor itself. `Thing` would be used to represent the motor, even if it is behind such an object and we have in fact access only to the information from the various separate sensors.\n\n### What is a dictionary?\n\nThe Dictionary API is the Interface that allows developers use to structure the data model information:\n\n* `Concept`: It is the kind of a `Thing`, such as a Building, Power Meter, Temperature Sensor, Tenant Bill.\n* `Measure`: It is the value measured by a `Thing` (such as a Power meter). Examples would be \"Voltage Phase A\", \"Ambient Temperature\", \"Active Energy Received\".\n* `Property`: It is the attributes of a `Thing`. For a building it can be an address or a building type, and for a Power Meter it can be the model or serial number.\n\nSuch generic classes and the relationships between them are sometimes called a meta model. These generic classes are containers for dictionary entries. Each entry within a dictionary is identified by its URN and corresponds to a very precise semantic.\n\n## Why is GraphQL at the top of our data model?\n\nThe EcoStruxure Energy Platform (EEP) data models are selectively projected to the GraphQL API in the form of types in a GraphQL schema. Projections allow API developers to serve parts of an entity data in response to a GraphQL request. The GraphQL API services expose queries to read data and mutations to manipulate data, which are often collocated in the same schema with types.\n\n## What is GraphQL?\nThe GraphQL API is the interface used between applications and the EEDM data model. GraphQL is an open-source language for APIs and provides a web API approach in which clients define the structure of the data to be returned by the server. GraphQL consists of:\n\n* Type system\n* Query language and execution semantics\n* Static validation\n* Type introspection\n\nThe result of a single query or mutation is returned in JSON format.\n\n### Queries and Mutations\n\nGraphQL uses Queries and Mutations.\n\nQueries can traverse related objects and their fields, which allows clients to fetch related data in one request, instead of making several roundtrip requests.\n\nMutations are used to modify server-side data. Like in queries, the mutation field returns an object type, which can be in nested fields.\n\n## How GraphQL works\n\nThe GraphQL API integrates with the EEDM and EEH data models through a well-defined schema in GraphQL, which serves as the foundation for both querying and manipulating data. This integration is key to how GraphQL operates within our system:\n\n1. Schema-Based Data Projection: The schema defines the structure of types that correspond to various aspects of the EEDM and EEH data models. This allows for selective projection of entity data, making the API versatile and responsive to specific GraphQL requests.\n\n2. Operation Types - Queries and Mutations:\n\n    * **Queries**: Empower clients to read data efficiently. They enable traversing between related objects and fields, thus facilitating the retrieval of interconnected data in one streamlined request.\n    * **Mutations**: Facilitate data manipulation on the server side. They return detailed object types and can include nested fields, allowing for precise and controlled data updates.\n    \nThe underlying principle of this setup is to offer a responsive, flexible API that caters to the complex data retrieval and manipulation needs of our clients, all within a unified GraphQL framework.\n\n## List of Abbreviations\n\n* ACME – Assembling Configuration Management Environments\n* API – Application programming Interface\n* CDD – Cooling Degree Days\n* EEDM – EcoStruxure Energy Data Model\n* EEH – EcoStructure Energy Hub\n* EEO – EcoStruxure Energy One (Hub)\n* HDD – Heating Degree Days\n* HTTP – Hypertext Transfer Protocol\n* ID – Identity Document\n* IDMS – Integrated Database Management System\n* JSON – JavaScript object Notation\n* JWT – JSON Web Token\n* pvUrns – property values URN\n* SLD – Single Line Diagram\n* URL – Uniform Resource Locator\n* URN – Uniform Resource Name\n* UUID – Universal unique identifier\n\n\n# Get started\n\n## Authentication guide\n\nThis API supports the following authentication mechanism:\n\n- [OAuth2 Authorization Code Flow](#oauth2-authorization-code-flow)\n- [Personal Access Token Flow](#personal-access-token-flow)\n\n### OAuth2 Authorization Code Flow\n\nThis authorization schema is intended for ISV applications that have obtained authorization from a Schneider Electric customer. Follow the steps below to initiate the authorization process, obtain an access token, and refresh the token as needed.\n\n**Step 1: Initiate Authorization and Consent Flow**\n\nFirstly, your application should initiate the Authorization and Consent flow by calling the Authorize Endpoint.\n\n```bash\ncurl -X GET \"https://api.exchange.se.com/ecostruxure/v1/oauth/authorize\" \\\n     -d \"client_id=YOUR_CLIENT_ID\" \\\n     -d \"response_type=code\" \\\n     -d \"redirect_uri=YOUR_REDIRECT_URI\" \\\n     -d \"scope=required_scope1 required_scope2\" \\\n     -d \"state=YOUR_STATE_STRING\"\n```\n\nUpon successful authorization and user consent, you'll be redirected to the `redirect_uri` you provided, and an authorization code will be appended as a query parameter.\n\n**Step 2: Exchange Authorization Code for Token**\n\nOnce you have received the authorization code, you need to exchange it for an access token by calling the Token Endpoint.\n\n```bash\ncurl -X POST \"https://api.exchange.se.com/ecostruxure/v1/oauth/token\" \\\n     -d \"grant_type=authorization_code\" \\\n     -d \"code=RECEIVED_AUTHORIZATION_CODE\" \\\n     -d \"redirect_uri=YOUR_REDIRECT_URI\" \\\n     -d \"client_id=YOUR_CLIENT_ID\" \\\n     -d \"client_secret=YOUR_CLIENT_SECRET\"\n```\n\nThis will return an `access_token` and a `refresh_token`.\n\n**Step 3: Refresh the Token**\n\nYour `access_token` will be valid for 1 hour. To get a new one without requiring the user to log in again, use the `refresh_token`.\n\n```bash\ncurl -X POST \"https://api.exchange.se.com/ecostruxure/v1/oauth/token\" \\\n     -d \"grant_type=refresh_token\" \\\n     -d \"refresh_token=YOUR_REFRESH_TOKEN\" \\\n     -d \"client_id=YOUR_CLIENT_ID\" \\\n     -d \"client_secret=YOUR_CLIENT_SECRET\"\n```\n\nBy following these steps, your ISV application can securely interact with Schneider Electric's API services, with the proper authorizations in place.\n\n### Personal Access Token Flow\n\nThis authorization mechanism is intended for end users who are using the API to access their own data in Schneider Electric's ecosystem. Upon purchasing the API, end users can generate a Personal Access Token directly from the Exchange DevPortal.\n\n**How to Generate a Personal Access Token**\n\n1. Log in to the [Exchange DevPortal](https://exchange.se.com).\n2. Navigate to the API product you have subscribed to.\n3. Locate the \"Generate Personal Access Token\" section and follow the on-screen instructions to create your token.\n\nYour Personal Access Token serves as a credential that grants you access to your own data. Ensure that you keep it secure and never share it publicly.\n\n## How to make your first GraphQL request\n\nUser can leverage any GraphQL client application to invoke API endpoint and by passing previously generate token, either through OAuth 2 authorization flow or Personal Access Token, as bearer token.\n\nA CURL example below,\n\n```bash\ncurl -X POST \"https://api.exchange.se.com/ecostruxure/energy-hub/v1/graphql\" \\\n     -H \"Authorization: Bearer <Token from previous step>\"\n     -d '{\"query\":\"query getTenants{\\r\\n  tenants {\\r\\n    id\\r\\n    label\\r\\n  }\\r\\n}\",\"variables\":{}}'\n```\n\nThe request body could vary based on the query, here is an example of how to get the **Tenants id and label**. :\n\n```graphql title=\"GraphQL Query\"\nquery getTenants{\n  tenants {\n    id\n    label\n  }\n}\n```\n\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"tenants\": [\n      {\n        \"id\": 87275,\n        \"label\": \"ACME Inc\"\n      },\n      {\n        \"id\": 87293,\n        \"label\": \"Mindt Chocolates\"\n      }\n    ]\n  }\n}\n```\n\n## Useful tools\n\nUsing the recommended GraphQL tools, client application developers can easily discover GraphQL schema via introspections.\n\n### [Altair](https://altair.sirmuel.design/)\n\nA comprehensive GraphQL client tool that helps to explore, organize and test queries as well as mutations.\n\n### [GraphiQL Explorer](https://www.npmjs.com/package/graphiql-explorer)\n\nPlugin for Altair (and other clients) to help create queries and mutations.\n\n### [Postman](https://learning.postman.com/docs/sending-requests/graphql/graphql/)\n\nPostman can make HTTP calls using GraphQL, an open-source data query and manipulation language for APIs.\n\n### [GraphQL Voyager](https://apis.guru/graphql-voyager/)\n\n Helps the user to visualize the whole GraphQL schema and the links between entities.\n\n### [Banana Cake Pop](https://chillicream.com/products/bananacakepop/)\n\nA powerful GraphQL IDE that joins you and your team on your GraphQL journey.\n\n## Support\n\nContact our Exchange support team at exchange.support@se.com and include,\n\n    - Endpoint URL\n    - Request/Response of the URL\n    - Any additional information like Screenshots, Postman collections\n\nGet help from the community [here](https://community.se.com/t5/EcoStruxure-Energy-Hub-User/bd-p/ecostruxure-energy-hub-user-community).\n\n# Use cases\n\n## Tenant ID\n\n### What is a Tenant ID\n\nA Tenant ID is a unique identifier for the organization in EEH.\n\nYou will need a Tenant ID as an input to get the SiteID.\n\n### Query\n```graphql\nquery getTenants{\n  tenants {\n    id\n    label\n  }\n}\n```\n\n### Query Response\n```json\n{\n  \"data\": {\n    \"tenants\": [\n      {\n        \"id\": 12345,\n        \"label\": \"One organization\"\n      },\n      {\n        \"id\": 678910,\n        \"label\": \"Another organization\"\n      },\n      {\n        \"id\": 111213,\n        \"label\": \"A third organization\"\n      }\n    ]\n  }\n}\n```\n\n## SiteID\n\n### What is a SiteID\n\nIt is a unique identifier in EEH to represent the site under which a gateway will be commissioned.\n\n### Query\n```graphql\nquery getPhysicalHierarchy($appContext: [EMCP_TopoNodeContextInput]) {\n  hierarchy(appContext: $appContext, mode: PHYSICAL) {\n    level\n    parentId\n    thing {\n      id\n      label\n      handle\n\n    }\n  }\n}\n```\n\nUse the ID from the Query Response in GetTenantID Query Response as the ID for this input variable.\n\nQuery Input Variables\n```json\n{\n  \"appContext\":[\n    {\"id\":912986,\"type\":\"TENANT\",\"urn\":\"urn:edm-se:em:core:pr:tenant\"}\n  ]\n}\n```\n\nQuery Response\n```json\n{\n  \"data\": {\n    \"hierarchy\": [\n      {\n        \"level\": 0,\n        \"parentId\": null,\n        \"thing\": {\n          \"id\": 912986,\n          \"label\": \"Shri Ram Hospital\",\n          \"handle\": null\n        }\n      },\n      {\n        \"level\": 2,\n        \"parentId\": 912986,\n        \"thing\": {\n          \"id\": 1012814,\n          \"label\": \"SRH-Site\",\n          \"handle\": \"Site:a07996e9-3ce4-4029-8389-f8463b5dbfdf\"\n        }\n      },\n      {\n        \"level\": null,\n        \"parentId\": 1012814,\n        \"thing\": {\n          \"id\": 1012817,\n          \"label\": \"Panel-ForAI\",\n          \"handle\": \"ION:e0fdba6b-fc95-4790-b642-acb98a09fa48\"\n        }\n      },\n      {\n        \"level\": null,\n        \"parentId\": 1012817,\n        \"thing\": {\n          \"id\": 1012818,\n          \"label\": \"CircuitBreaker-ForAI\",\n          \"handle\": \"eb499998-a8f8-4e35-acff-c98d93aba004\"\n        }\n      },\n      {\n        \"level\": null,\n        \"parentId\": 1012817,\n        \"thing\": {\n          \"id\": 1012819,\n          \"label\": \"TH110-A\",\n          \"handle\": \"b16c809f-0ee5-46d8-82e2-46a6c9007562\"\n        }\n      },\n      {\n        \"level\": null,\n        \"parentId\": 1012817,\n        \"thing\": {\n          \"id\": 1012820,\n          \"label\": \"TH110-B\",\n          \"handle\": \"d4c1c09a-f30d-4e7b-aa68-fb3ea1273715\"\n        }\n      },\n      {\n        \"level\": null,\n        \"parentId\": 1012817,\n        \"thing\": {\n          \"id\": 1012821,\n          \"label\": \"TH110-C\",\n          \"handle\": \"e250c95b-cb99-4b95-a93c-636c18bb4380\"\n        }\n      }\n    ]\n  }\n}\n```\n\n## Site property\n\nThis query is designed to get the properties for your site.\n\n### Overview\n\nThis site property data will cover the steps and query to get the site properties.\n\nThe high-level overview of the steps are:\n\n* Query for the Tenant\n* Query for the Site\n* Query for the Site Properties\n\n### Arguments\n\n* `appContext` : an Array on `EMCP_TopoNodeContextInput` to filter the result by topology. NOTE: To create an `appContext`, you will need Tenant ID and SiteID. Refer Step 1 for Tenant ID and refer Step 2 for SiteID. NOTE: `appContext` must be in the following order:\n  * Type\n  * Tenant ID\n  * SiteID\n* `includeAllParents`: Boolean (default set to false), add the parent for thing (from `appContext`) if `appContext` is used - optional.\n\n### Behaviour\n* Site properties defines `SiteName`, `description`, `address_line`, `Electricity rate` and other properties.\n* `description`: Site property descriptions like street address specifying longitude and latitude of site location.\n* `concept`: Defines site and different types of site properties urn.\n* `weather_station`: Retrieves local climate data for the display of energy consumption normalized by degree days.\n\n### Step 1\n\n#### What is a Tenant ID?\n\nA Tenant ID is a unique identifier for the organization in EEH.\n\nYou will need a Tenant ID as an input in Step 2 to get the SiteID.\n\n#### How to get a Tenant ID?\n\nTo get a Tenant ID, you need to perform a query as it is described in [GetTenantID Query](#tenant-id) and you will receive the Response as described with Tenant ID.\n\n### Step 2\n\n#### What is a SiteID?\nIt is a unique identifier in EEH to represent the site under which a gateway will be commissioned.\n\n#### How to get a SiteID?\nTo get a SiteID, you need to perform a query as described in [GetSiteID Query](#siteid) and you will receive the Response as described with SiteID.\n\nIn the Response there will be many nodes. For example: We have an `Organization`, a `Region`, and a `Site`. You will need the IDs for all three of those toponodes to prepare the query for Step 3.\n\nIn the response find the Site and collect the SiteID field as well as the parentId field. The parentId field may be an Organization or Region depending on the Energy Hierarchy.\n\nAt the end of this step, you have three IDs:\n\n* Tenant ID\n* Region ID\n* SiteID\n\n### Step 3\nIn this step take the three IDs from Step 2 and use them as the input variables.\n\nTo get the site properties:\n\n### Query\n```graphql\nfragment conceptFragment on EMCP_Concept {\n  urn\n  label\n  description\n  conceptKind\n  __typename\n}\n\nfragment propertyLinks on EMCP_Property {\n  propertyLinks {\n    concept {\n      urn\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment uiPreference on EMCP_Property {\n  uiPreference {\n    preference\n    urn\n    __typename\n  }\n  __typename\n}\n\nfragment unit on EMCP_Property {\n  unit {\n    name\n    isSi\n    symbol\n    quantityName\n    __typename\n  }\n  __typename\n}\n\nfragment propertyFragment on EMCP_Property {\n  name\n  urn\n  label\n  description\n  mandatory\n  visible\n  example\n  defIVal\n  defFVal\n  defSVal\n  orderingType\n  encodingType\n  accessType\n  facetType\n  enumUrn\n  concept {\n    urn\n    __typename\n  }\n  ...unit\n  ...uiPreference\n  ...propertyLinks\n  __typename\n}\n\nfragment pvalueFragment on EMCP_PValue {\n  pival\n  pfval\n  psval\n  property {\n    ...propertyFragment\n    __typename\n  }\n  __typename\n}\n\nfragment nodeLinkFragment on EMCP_NodeLink {\n  __typename\n  dstId\n  kind\n  dst {\n    __typename\n    concept {\n      __typename\n      urn\n    }\n  }\n}\n\nfragment thingFragment on EMCP_Thing {\n  id\n  label\n  handle\n  concept {\n    ...conceptFragment\n    __typename\n  }\n  pvalues(where: $pvalueFilter) {\n    ...pvalueFragment\n    __typename\n  }\n  nodeLinkSrcs(where: $nodeLinkSrcsFilter) {\n    ...nodeLinkFragment\n    __typename\n  }\n  __typename\n}\n\nquery infoPanel_queryThings($appContext: [EMCP_TopoNodeContextInput]!, $thingFilter: EMCP_ThingFilterInput!, $pvalueFilter: EMCP_PValueFilterInput!, $nodeLinkSrcsFilter: EMCP_NodeLinkFilterInput!) {\n  things(\n    appContext: $appContext\n    includeLeafDevice: true\n    includeAllParents: false\n    where: $thingFilter\n  ) {\n    items {\n      ...thingFragment\n      __typename\n    }\n    __typename\n  }\n}\n```\n\n### Query Input Variables\n```json\n{\n  \"appContext\": [\n    {\n      \"id\": 549010,\n      \"urn\": \"urn:edm-se:em:core:pr:tenant\",\n      \"label\": \"Quest Manufacturing\",\n      \"type\": \"TENANT\"\n    }\n  ],\n  \"thingFilter\": {\n    \"id\": {\n      \"in\": [\n        1914464\n      ]\n    }\n  },\n  \"pvalueFilter\": {\n    \"property\": {\n      \"or\": [\n        {\n          \"visible\": {\n            \"neq\": \"NONE\"\n          },\n          \"urn\": {\n            \"nin\": [\n              \"urn:edm-se:em:core:pr:name\",\n              \"urn:edm-se:em:core:pr:label\",\n              \"urn:edm-se:em:core:pr:created_by\",\n              \"urn:edm-se:em:core:pr:updated_by\"\n            ]\n          }\n        }\n      ]\n    }\n  },\n  \"nodeLinkSrcsFilter\": {\n    \"dst\": {\n      \"concept\": {\n        \"urn\": {\n          \"in\": [\n            \"urn:edm-se:em:core:ec:weather_station\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\nQuery Response\n```json\n\n```\n\n## Energy Hierarchy\n\nThis query represents organization's all site related assets, energy usages hierarchical details.\n\n### Overview\n\nThis data will cover the steps and queries to the contents of Energy Hierarchy.\n\nThe high-level overview of the steps are:\n\n1. Query for the Tenant\n2. Query for the Site\n3. Query for the Energy Hierarchy\n\n### Arguments\n\n* `appContext`: an Array on `EMCP_TopoNodeContextInput` to filter the result by topology. NOTE: To create an `appContext`, you will need Tenant ID and SiteID. Refer Step 1 for Tenant ID and refer Step 2 for SiteID. NOTE: `appContext` must be in the following order:\n1. Type\n2. Tenant ID\n3. SiteID\n* `mode` : enum(`ENERGY`, `PHYSICAL`, `COMMUNICATION`, `BILLING`, `EQUIPMENT`) to specify which type of Hierarchy is required.\n* `whereClause`: type `EMCP_HierarchyFilterInput`: allows advanced filtering capabilities – optional.\n* `includeAllParents`: Boolean (default set to false) add the parent for `thing` (from `appContext`) if `appContext` is used - optional.\n\n### Behaviour\n\n* The level from toponode: 0 is for site, the level starting from 0 for the root returned item and is increased for children.\n* Kinds of `thing` returned:\n* `Thing` with a LOAD linked to them with a `NodelinkKind` Performs or Measure.\n* Topo nodes (`Site`, `Building`, `Floor`, `Area`, `Space`, `Production Line`, `Zone`, `Panel Board`)\n* `LOAD` type `thing` label indicate usages, such as lighting, heating, or other type for energy consumers and energy sources in organization model.\n* How Parents/Child relationship is computed:\n  * For topo nodes: Parent will be the lowest level of all the topo nodes, defined in the `thing` properties.\n  * For other `things`: Parent will be the parent of the linked `LOAD` things.\n\n### Step 1\n\n#### What is a Tenant ID?\n\nA Tenant ID is a unique identifier for the organization in EEH.\n\nYou will need a Tenant ID as an input in Step 2 to get the SiteID.\n\n#### How to get a Tenant ID?\n\nTo get a Tenant ID, you need to perform a query as it is described in [GetTenantID Query](#tenant-id) and you will receive the Response as described with Tenant ID.\n\n### Step 2\n\n#### What is a SiteID?\nIt is a unique identifier in EEH to represent the site under which a gateway will be commissioned.\n\n#### How to get a SiteID?\nTo get a SiteID, you need to perform a query as described in [GetSiteID Query](#siteid) and you will receive the Response as described with SiteID.\n\nIn the Response there will be many nodes. For example: We have an `Organization`, a `Region`, and a `Site`. You will need the IDs for all three of those toponodes to prepare the query for Step 3.\n\nIn the response find the Site and collect the SiteID field as well as the parentId field. The parentId field may be an Organization or Region depending on the Energy Hierarchy.\n\nAt the end of this step, you have three IDs:\n\n* Tenant ID\n* Region ID\n* SiteID\n\n### Step 3\nIn this step take the three IDs from Step 2 and use them as the input variables.\n\nTo get the contents of Energy Hierarchy:\n\n### Query\n```graphql\nquery getHierarchyWithNodelinks(\n    $appContext: [EMCP_TopoNodeContextInput],\n    $mode: EMCP_HierarchyMode!,\n    $whereClause: EMCP_HierarchyFilterInput,\n    $includeAllParents: Boolean!,\n    $includeProperties: [String!],\n    $includeNodelinks: [EMCP_LinkKindType!]) {\n        hierarchy(\n            mode: $mode\n            appContext: $appContext\n            includeAllParents: $includeAllParents\n            where: $whereClause\n            ) {\n                parentId\n                thing {\n                    id\n                    label\n                    handle\n                    concept {\n                        urn\n                        type: conceptKind\n                        __typename\n                        }\n                        nodeLinkDsts(where: {kind: {in: $includeNodelinks}}) {\n                            ...GeneralNodeLinkFields\n                            __typename\n                            }\n                            nodeLinkSrcs(where: {kind: {in: $includeNodelinks}}) {\n                                ...GeneralNodeLinkFields\n                                __typename\n                                }\n                                pvalues(where: {property: {urn: {in: $includeProperties}}}) {\n                                pival\n                                pfval\n                                psval\n                                property {\n                                urn\n                                __typename\n                            }\n                        __typename\n                     }\n                __typename\n            }\n        __typename\n    }\n}\n\nfragment GeneralNodeLinkFields on EMCP_NodeLink {\n  id\n  kind\n  srcId\n  srcNode\n  dstId\n  dstNode\n  percentage\n  __typename\n}\n```\n\n### Query Input Variable\n```json\n{\n  \"appContext\": [\n    {\n      \"type\": \"TENANT\",\n      \"id\": 549010,\n      \"urn\": \"urn:edm-se:em:core:pr:tenant\"\n    },\n    {\n      \"type\": \"ID\",\n      \"id\": 1914464,\n      \"urn\": \"urn:edm-se:em:core:pr:site\"\n    }\n  ],\n  \"mode\": \"ENERGY\",\n  \"includeAllParents\": false,\n  \"includeProperties\": [\n    \"urn:edm-se:em:core:pr:is_asset\",\n    \"urn:edm-se:em:core:pr:product_usage\",\n    \"urn:edm-se:em:core:pr:last_product_usage\",\n    \"urn:edm-se:em:core:pr:has_computed_values\"\n  ],\n  \"includeNodelinks\": [\n    \"RESIDUAL_FEED\"\n  ]\n}\n```\n\n### Query Response\n```json\n{\n  \"data\": {\n    \"hierarchy\": [\n      {\n        \"parentId\": 549010,\n        \"thing\": {\n          \"id\": 1914464,\n          \"label\": \"MigrationSite1\",\n          \"handle\": \"Site:1bc67bea-0d34-47bd-8427-74bfd158a330\",\n          \"concept\": {\n            \"urn\": \"urn:edm-se:em:core:oc:site\",\n            \"type\": \"OTHER\",\n            \"__typename\": \"EMCP_Concept\"\n          },\n          \"nodeLinkDsts\": [],\n          \"nodeLinkSrcs\": [],\n          \"pvalues\": [\n            {\n              \"pival\": null,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:is_asset\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            }\n          ],\n          \"__typename\": \"EMCP_Thing\"\n        },\n        \"__typename\": \"EMCP_Hierarchy\"\n      },\n      {\n        \"parentId\": 1914476,\n        \"thing\": {\n          \"id\": 1914470,\n          \"label\": \"sepam 052 - SP1           \",\n          \"handle\": \"CC:714a3f61-a097-4e23-826a-59063d606205:b5d105d2-d129-4135-affe-94b296cbd91a\",\n          \"concept\": {\n            \"urn\": \"urn:edm-se:em:core:pc:protection_relay\",\n            \"type\": \"PRODUCT\",\n            \"__typename\": \"EMCP_Concept\"\n          },\n          \"nodeLinkDsts\": [],\n          \"nodeLinkSrcs\": [],\n          \"pvalues\": [\n            {\n              \"pival\": 9596,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:last_product_usage\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            },\n            {\n              \"pival\": 0,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:is_asset\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            },\n            {\n              \"pival\": 0,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:has_computed_values\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            }\n          ],\n          \"__typename\": \"EMCP_Thing\"\n        },\n        \"__typename\": \"EMCP_Hierarchy\"\n      },\n      {\n        \"parentId\": 1914464,\n        \"thing\": {\n          \"id\": 1914476,\n          \"label\": \"Usage: EVID\",\n          \"handle\": \"CC:714a3f61-a097-4e23-826a-59063d606205:b5d105d2-d129-4135-affe-94b296cbd91a.EVID\",\n          \"concept\": {\n            \"urn\": \"urn:edm-se:em:core:pc:load\",\n            \"type\": \"LOAD\",\n            \"__typename\": \"EMCP_Concept\"\n          },\n          \"nodeLinkDsts\": [],\n          \"nodeLinkSrcs\": [],\n          \"pvalues\": [\n            {\n              \"pival\": 9596,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:product_usage\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            },\n            {\n              \"pival\": 0,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:is_asset\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            },\n            {\n              \"pival\": 0,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:has_computed_values\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            }\n          ],\n          \"__typename\": \"EMCP_Thing\"\n        },\n        \"__typename\": \"EMCP_Hierarchy\"\n      },\n      {\n        \"parentId\": 1914486,\n        \"thing\": {\n          \"id\": 1914485,\n          \"label\": \"ARC iDT40 - P01\",\n          \"handle\": \"CC:714a3f61-a097-4e23-826a-59063d606205:3de16dfb-a312-444d-a367-55fd881f81c3\",\n          \"concept\": {\n            \"urn\": \"urn:edm-se:em:core:pc:accessory\",\n            \"type\": \"PRODUCT\",\n            \"__typename\": \"EMCP_Concept\"\n          },\n          \"nodeLinkDsts\": [],\n          \"nodeLinkSrcs\": [],\n          \"pvalues\": [\n            {\n              \"pival\": 0,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:is_asset\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            },\n            {\n              \"pival\": 0,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:has_computed_values\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            },\n            {\n              \"pival\": 9550,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:last_product_usage\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            }\n          ],\n          \"__typename\": \"EMCP_Thing\"\n        },\n        \"__typename\": \"EMCP_Hierarchy\"\n      },\n      {\n        \"parentId\": 1914464,\n        \"thing\": {\n          \"id\": 1914486,\n          \"label\": \"Usage: ITID\",\n          \"handle\": \"CC:714a3f61-a097-4e23-826a-59063d606205:3de16dfb-a312-444d-a367-55fd881f81c3.ITID\",\n          \"concept\": {\n            \"urn\": \"urn:edm-se:em:core:pc:load\",\n            \"type\": \"LOAD\",\n            \"__typename\": \"EMCP_Concept\"\n          },\n          \"nodeLinkDsts\": [],\n          \"nodeLinkSrcs\": [],\n          \"pvalues\": [\n            {\n              \"pival\": 9550,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:product_usage\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            },\n            {\n              \"pival\": 0,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:is_asset\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            },\n            {\n              \"pival\": 0,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:has_computed_values\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            }\n          ],\n          \"__typename\": \"EMCP_Thing\"\n        },\n        \"__typename\": \"EMCP_Hierarchy\"\n      }\n    ]\n  }\n}\n```\n\n## Usage Trends Data\nThis query returns a paginated view of `BusinessQuantityBinnedUsageTimeSeries` data, based on the parameters.\n\n### Overview\nThis usage trend data will cover the steps and queries to create the energy report.\n\nThe high-level overview of the steps are:\n\n1. Query for the Tenant\n\n2. Query for the Site\n\n3. Query for the Usage Trend Data\n\n### Arguments\n* `appContext`: an Array on `EMCP_TopoNodeContextInput` to filter the result by topology. NOTE: To create an `appContext`, you will need Tenant ID and SiteID. Refer Step 1 for Tenant ID and refer Step 2 for SiteID. NOTE: `appContext` must be in the following order:\n  1. Type\n  2. Tenant ID\n  3. SiteID\n* `startTime`: a `DateTime` to indicate the inclusive start of the interval. For example: startTime can be \"2022-10-08T18:30:00.000Z\".\n* `endTime`: a `DateTime` to indicate the exclusive end of the interval. For example: endTime can be \"2023-10-09T18:30:00.000Z\".\n* `timeZone`: a `String` to indicate the IANA time zone the data should be aggregated in. For example: timeZone can be \"Asia/Calcutta\".\n* `skip`/`take`: `Int`s specifying pagination of the data.\n* `businessQuantityNames` : an Array of String indicating the business quantities to get values for.\n* `aggregationInterval`: a `EMCP_AggregationInterval` indicating the temporal bin size that the data is aggregated into.\n\n### List of Business Quantity Names:\n```\n1.  ACTIVE_ENERGY\n2.  ACTIVE_ENERGY_DELIVERED\n3.  ACTIVE_ENERGY_RECEIVED\n4.  ACTIVE_ENERGY_DELIVERED_MINUS_RECEIVED\n5.  ACTIVE_POWER\n6.  ACTIVE_POWER_A\n7.  ACTIVE_POWER_A_DEMAND\n8.  ACTIVE_POWER_B\n9.  ACTIVE_POWER_B_DEMAND\n10. ACTIVE_POWER_C\n11. ACTIVE_POWER_C_DEMAND\n12. ACTIVE_POWER_DEMAND\n13. ACTIVE_POWER_DEMAND_PEAK\n14. AIR_QUALITY\n15. APPARENT_ENERGY\n16. APPARENT_ENERGY_DELIVERED\n17. APPARENT_ENERGY_RECEIVED\n18. APPARENT_ENERGY_DELIVERED_MINUS_RECEIVED\n19. APPARENT_POWER\n20. APPARENT_POWER_A\n21. APPARENT_POWER_B\n22. APPARENT_POWER_C\n23. APPARENT_POWER_DEMAND\n24. BREAKER_CONTACT_ABRASION\n25. BREAKER_HEALTH\n26. BREAKER_POSITION\n27. CO2_CONCENTRATION\n28. CURRENT\n29. CURRENT_A\n30. CURRENT_AVG\n31. CURRENT_A_DEMAND\n32. CURRENT_A_DEMAND_PEAK\n33. CURRENT_B\n34. CURRENT_B_DEMAND\n35. CURRENT_B_DEMAND_PEAK\n36. CURRENT_C\n37. CURRENT_C_DEMAND\n38. CURRENT_C_DEMAND_PEAK\n39. CURRENT_EARTH\n40. CURRENT_EARTH_COEF_PROTECTION\n41. CURRENT_GROUND\n42. CURRENT_N\n43. CURRENT_THD_A\n44. CURRENT_THD_B\n45. CURRENT_THD_C\n46. CURRENT_THD_N\n47. CURRENT_UNBALANCE\n48. CURRENT_UNBALANCE_A\n49. CURRENT_UNBALANCE_B\n50. CURRENT_UNBALANCE_C\n51. CURRENT_UNBALANCE_N\n52. DIGITAL_INPUT_1_NAME\n53. DIGITAL_INPUT_1_STATUS\n54. DIGITAL_INPUT_2_NAME\n55. DIGITAL_INPUT_2_STATUS\n56. DPF_TOTAL\n57. DPF_TOTAL_TARGET\n58. DT_LAST_RESET_PEAK_DMD_POWER\n59. DT_PEAK_DEMAND_ACTIVE_POWER\n60. EARTH_COUPLING_CAPACITY\n61. EARTH_COUPLING_CAPACITY_CH1\n62. EARTH_COUPLING_CAPACITY_CH10\n63. EARTH_COUPLING_CAPACITY_CH11\n64. EARTH_COUPLING_CAPACITY_CH12\n65. EARTH_COUPLING_CAPACITY_CH2\n66. EARTH_COUPLING_CAPACITY_CH3\n67. EARTH_COUPLING_CAPACITY_CH4\n68. EARTH_COUPLING_CAPACITY_CH5\n69. EARTH_COUPLING_CAPACITY_CH6\n70. EARTH_COUPLING_CAPACITY_CH7\n71. EARTH_COUPLING_CAPACITY_CH8\n72. EARTH_COUPLING_CAPACITY_CH9\n73. FAN_RELAY_STATUS\n74. FAULT_THRESHOLD\n75. FREQUENCY\n76. GAS_FLOW\n77. GAS_VOLUME\n78. HARMONIC_MODE_ENABLED\n79. INLET_TEMPERATURE\n80. INSULATION_GROUND\n81. INSULATION_RESISTANCE_CH1\n82. INSULATION_RESISTANCE_CH10\n83. INSULATION_RESISTANCE_CH11\n84. INSULATION_RESISTANCE_CH12\n85. INSULATION_RESISTANCE_CH2\n86. INSULATION_RESISTANCE_CH3\n87. INSULATION_RESISTANCE_CH4\n88. INSULATION_RESISTANCE_CH5\n89. INSULATION_RESISTANCE_CH6\n90. INSULATION_RESISTANCE_CH7\n91. INSULATION_RESISTANCE_CH8\n92. INSULATION_RESISTANCE_CH9\n93. LOAD_CURRENT_A\n94. LOAD_CURRENT_B\n95. LOAD_CURRENT_C\n96. LOAD_CURRENT_N\n97. LOAD_FUNDAMENTAL_CURRENT_A\n98. LOAD_FUNDAMENTAL_CURRENT_B\n99. LOAD_FUNDAMENTAL_CURRENT_C\n100.    LOAD_FUNDAMENTAL_CURRENT_N\n101.    LOAD_HARMONICS_CURRENT_A\n102.    LOAD_HARMONICS_CURRENT_B\n103.    LOAD_HARMONICS_CURRENT_C\n104.    LOAD_HARMONICS_CURRENT_N\n105.    LOAD_THD_FUND_CURRENT_A\n106.    LOAD_THD_FUND_CURRENT_B\n107.    LOAD_THD_FUND_CURRENT_C\n108.    MAX_CURRENT_EARTH\n109.    MAX_TEMPERATURE\n110.    MOTOR_OPERATING_MODE\n111.    MOTOR_RUNNING\n112.    MOTOR_TRIP_INDICATOR\n113.    NEGATIVE_SEQUENCE_CURRENT_LOAD\n114.    NEGATIVE_SEQUENCE_CURRENT_LOAD_ENABLED\n115.    NEGATIVE_SEQUENCE_CURRENT_OUTPUT\n116.    NEGATIVE_SEQUENCE_CURRENT_SOURCE\n117.    OPERATING_STATUS_UNIT_1\n118.    OPERATING_STATUS_UNIT_10\n119.    OPERATING_STATUS_UNIT_11\n120.    OPERATING_STATUS_UNIT_12\n121.    OPERATING_STATUS_UNIT_2\n122.    OPERATING_STATUS_UNIT_3\n123.    OPERATING_STATUS_UNIT_4\n124.    OPERATING_STATUS_UNIT_5\n125.    OPERATING_STATUS_UNIT_6\n126.    OPERATING_STATUS_UNIT_7\n127.    OPERATING_STATUS_UNIT_8\n128.    OPERATING_STATUS_UNIT_9\n129.    OPERATING_TIME\n130.    OUTPUT_CURRENT_A\n131.    OUTPUT_CURRENT_B\n132.    OUTPUT_CURRENT_C\n133.    OUTPUT_CURRENT_N\n134.    OUTPUT_FUNDAMENTAL_CURRENT_A\n135.    OUTPUT_FUNDAMENTAL_CURRENT_B\n136.    OUTPUT_FUNDAMENTAL_CURRENT_C\n137.    OUTPUT_FUNDAMENTAL_CURRENT_N\n138.    OUTPUT_HARMONICS_CURRENT_A\n139.    OUTPUT_HARMONICS_CURRENT_B\n140.    OUTPUT_HARMONICS_CURRENT_C\n141.    OUTPUT_HARMONICS_CURRENT_N\n142.    PHYSICAL_HEALTH\n143.    POWER_FACTOR\n144.    POWER_FACTOR_LAGGING\n145.    POWER_FACTOR_LEADING\n146.    REACTIVE_ENERGY\n147.    REACTIVE_ENERGY_DELIVERED\n148.    REACTIVE_ENERGY_RECEIVED\n149.    REACTIVE_ENERGY_DELIVERED_MINUS_RECEIVED\n150.    REACTIVE_POWER\n151.    REACTIVE_POWER_A\n152.    REACTIVE_POWER_B\n153.    REACTIVE_POWER_C\n154.    REACTIVE_POWER_CAPACITOR_STEP1\n155.    REACTIVE_POWER_CAPACITOR_STEP10\n156.    REACTIVE_POWER_CAPACITOR_STEP11\n157.    REACTIVE_POWER_CAPACITOR_STEP12\n158.    REACTIVE_POWER_CAPACITOR_STEP2\n159.    REACTIVE_POWER_CAPACITOR_STEP3\n160.    REACTIVE_POWER_CAPACITOR_STEP4\n161.    REACTIVE_POWER_CAPACITOR_STEP5\n162.    REACTIVE_POWER_CAPACITOR_STEP6\n163.    REACTIVE_POWER_CAPACITOR_STEP7\n164.    REACTIVE_POWER_CAPACITOR_STEP8\n165.    REACTIVE_POWER_CAPACITOR_STEP9\n166.    REACTIVE_POWER_DEMAND_PEAK\n167.    REACTIVE_POWER_MITIGATION_MODE\n168.    REACTIVE_POWER_TOTAL\n169.    RELATIVE_HUMIDITY\n170.    RELATIVE_TEMPERATURE\n171.    RESIDUAL_CURRENT_I0_SUM\n172.    RESIDUAL_VOLTAGE_V0\n173.    SOURCE_CURRENT_A\n174.    SOURCE_CURRENT_B\n175.    SOURCE_CURRENT_C\n176.    SOURCE_CURRENT_N\n177.    SOURCE_DPF_TOTAL\n178.    SOURCE_FUND_CURRENT_A\n179.    SOURCE_FUND_CURRENT_B\n180.    SOURCE_FUND_CURRENT_C\n181.    SOURCE_FUND_CURRENT_N\n182.    SOURCE_HARMONICS_CURRENT_A\n183.    SOURCE_HARMONICS_CURRENT_B\n184.    SOURCE_HARMONICS_CURRENT_C\n185.    SOURCE_HARMONICS_CURRENT_N\n186.    SOURCE_THD_FUND_CURRENT_A\n187.    SOURCE_THD_FUND_CURRENT_B\n188.    SOURCE_THD_FUND_CURRENT_C\n189.    STEP_10_BROKEN_STATUS\n190.    STEP_10_INITIAL_CAPACITOR_POWER\n191.    STEP_10_NUMBER_OF_CONNECTIONS\n192.    STEP_10_STATUS\n193.    STEP_11_BROKEN_STATUS\n194.    STEP_11_INITIAL_CAPACITOR_POWER\n195.    STEP_11_NUMBER_OF_CONNECTIONS\n196.    STEP_11_STATUS\n197.    STEP_12_BROKEN_STATUS\n198.    STEP_12_INITIAL_CAPACITOR_POWER\n199.    STEP_12_NUMBER_OF_CONNECTIONS\n200.    STEP_12_STATUS\n201.    STEP_1_BROKEN_STATUS\n202.    STEP_1_INITIAL_CAPACITOR_POWER\n203.    STEP_1_NUMBER_OF_CONNECTIONS\n204.    STEP_1_STATUS\n205.    STEP_2_BROKEN_STATUS\n206.    STEP_2_INITIAL_CAPACITOR_POWER\n207.    STEP_2_NUMBER_OF_CONNECTIONS\n208.    STEP_2_STATUS\n209.    STEP_3_BROKEN_STATUS\n210.    STEP_3_INITIAL_CAPACITOR_POWER\n211.    STEP_3_NUMBER_OF_CONNECTIONS\n212.    STEP_3_STATUS\n213.    STEP_4_BROKEN_STATUS\n214.    STEP_4_INITIAL_CAPACITOR_POWER\n215.    STEP_4_NUMBER_OF_CONNECTIONS\n216.    STEP_4_STATUS\n217.    STEP_5_BROKEN_STATUS\n218.    STEP_5_INITIAL_CAPACITOR_POWER\n219.    STEP_5_NUMBER_OF_CONNECTIONS\n220.    STEP_5_STATUS\n221.    STEP_6_BROKEN_STATUS\n222.    STEP_6_INITIAL_CAPACITOR_POWER\n223.    STEP_6_NUMBER_OF_CONNECTIONS\n224.    STEP_6_STATUS\n225.    STEP_7_BROKEN_STATUS\n226.    STEP_7_INITIAL_CAPACITOR_POWER\n227.    STEP_7_NUMBER_OF_CONNECTIONS\n228.    STEP_7_STATUS\n229.    STEP_8_BROKEN_STATUS\n230.    STEP_8_INITIAL_CAPACITOR_POWER\n231.    STEP_8_NUMBER_OF_CONNECTIONS\n232.    STEP_8_STATUS\n233.    STEP_9_BROKEN_STATUS\n234.    STEP_9_INITIAL_CAPACITOR_POWER\n235.    STEP_9_NUMBER_OF_CONNECTIONS\n236.    STEP_9_STATUS\n237.    TANGENT_PHI\n238.    TEMPERATURE\n239.    TEMPERATURE_A\n240.    TEMPERATURE_B\n241.    TEMPERATURE_C\n242.    TEMPERATURE_N\n243.    TEMPERATURE_TRANSFORMER_WINDING_A\n244.    TEMPERATURE_TRANSFORMER_WINDING_B\n245.    TEMPERATURE_TRANSFORMER_WINDING_C\n246.    THD_FUND_CURRENT\n247.    THD_FUND_CURRENT_A\n248.    THD_FUND_CURRENT_B\n249.    THD_FUND_CURRENT_C\n250.    THD_FUND_CURRENT_N\n251.    THD_FUND_VOLTAGE\n252.    THD_FUND_VOLTAGE_AB\n253.    THD_FUND_VOLTAGE_AN\n254.    THD_FUND_VOLTAGE_BC\n255.    THD_FUND_VOLTAGE_BN\n256.    THD_FUND_VOLTAGE_CA\n257.    THD_FUND_VOLTAGE_CN\n258.    THD_TARGET_SETTING\n259.    THD_TARGET_TYPE\n260.    TRANSFORMER_CURRENT_COEF\n261.    TRANSFORMER_CURRENT_OVERLOAD_THRESHOLD_COEFFICIENT\n262.    TRIP_CNT_CLOSE_TO_SD_POSITION_NON_RESETTABLE\n263.    TRIP_ELECTRICAL_FAULT_CNT_CLOSE_SDE_NON_RESETTABLE\n264.    TRIP_INDICATOR\n265.    TRIP_INDICATOR_SD_POSITION\n266.    TRIP_CAUSE\n267.    UNIT_IDENTIFIER\n268.    VOLTAGE\n269.    VOLTAGE_AB\n270.    VOLTAGE_AN\n271.    VOLTAGE_BC\n272.    VOLTAGE_BN\n273.    VOLTAGE_CA\n274.    VOLTAGE_CN\n275.    VOLTAGE_LL\n276.    VOLTAGE_LL_AVG\n277.    VOLTAGE_LN\n278.    VOLTAGE_LN_AVG\n279.    VOLTAGE_NG\n280.    VOLTAGE_THD_A\n281.    VOLTAGE_THD_AB\n282.    VOLTAGE_THD_B\n283.    VOLTAGE_THD_BC\n284.    VOLTAGE_THD_C\n285.    VOLTAGE_THD_CA\n286.    VOLTAGE_UNBALANCE\n287.    VOLTAGE_UNBALANCE¬_AB\n288.    VOLTAGE_UNBALANCE_AN\n289.    VOLTAGE_UNBALANCE_BC\n290.    VOLTAGE_UNBALANCE_BN\n291.    VOLTAGE_UNBALANCE_CA\n292.    VOLTAGE_UNBALANCE_CN\n293.    WASTEWATER_FLOW\n294.    WASTEWATER_VOLUME\n295.    WATER_FLOW\n296.    WATER_VOLUME\n297.    ZERO_SEQUENCE_CURRENT_LOAD\n298.    ZERO_SEQUENCE_CURRENT_LOAD_ENABLED\n299.    ZERO_SEQUENCE_CURRENT_OUTPUT\n300.    ZERO_SEQUENCE_CURRENT_SOURCE\n```\n\n### Behaviour\nThe `timeSeriesvalues` results time range are returned with an inclusive `startTime` and exclusive `endTime`.\nThe value returned is always interval based and the value for that time interval is never cumulative.\nThe results are based on the configuration of the Energy Hierarchy.\n### Step 1\nWhat is a Tenant ID\nA Tenant ID is a unique identifier for the organization in EEH.\n\nYou will need a Tenant ID as an input in Step 2 to get the SiteID.\n\nHow to a get a Tenant ID\nTo get a Tenant ID, you need to perform a Query as it is described in GetTenantID Query and you will receive the Response as described in GetTenantID Query Response.\n\n### Step 2\n\nIn the Response there will be many nodes. For example: We have an Organization, a Region, and a Site. You will need the IDs for all three of those toponodes to prepare the Query for Step 3.\n\nIn the response find the Site and collect the SiteID field as well as the parentId field. The parentId field may be an Organization or Region depending on the Energy Hierarchy.\n\nAt the end of this step, you have three IDs:\n\n* Tenant ID\n* Region ID\n* SiteID\n\n### Step 3\nIn this step take the three IDs from Step 2 and use them as the input variables.\n\nTo create an energy report:\n\n### Query\n\n```graphql\nquery binnedUsageTrendData(\n$appContext: [EMCP_TopoNodeContextInput!]!, \n$businessQuantityName: String!, \n$startTime: DateTime!, \n$endTime: DateTime!, \n$timeZone: String!, \n$aggregationInterval: EMCP_AggregationInterval!, \n$take: Int = 250, $skip: Int = 0) {\n  binnedUsageTrendData(\n    skip: $skip\n    take: $take\n    appContext: $appContext\n    startTime: $startTime\n    endTime: $endTime\n    timeZone: $timeZone\n    businessQuantityName: $businessQuantityName\n    aggregationInterval: $aggregationInterval\n  ) {\n    items {\n      ...BinnedUsageTrendResultFields\n      surfaceAreaValue\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment BinnedUsageTrendResultFields on EMCP_BusinessQuantityBinnedUsageTimeSeries {\n  usageId\n  businessQuantity {\n    name\n    __typename\n  }\n  measure {\n    ...GeneralMeasureFields\n    __typename\n  }\n  thingId\n  thingLabel\n  thingContext {\n    type\n    id\n    urn\n    __typename\n  }\n  timeZone\n  timeSeriesValues {\n    startTime\n    endTime\n    keyTime\n    value\n    __typename\n  }\n  __typename\n}\n\nfragment GeneralMeasureFields on EMCP_Measure {\n  id\n  label\n  urn\n  unit {\n    ...GeneralUnitFields\n    __typename\n  }\n  __typename\n}\n\nfragment GeneralUnitFields on EMCP_Unit {\n  id\n  isSi\n  symbol\n  urn\n  quantityName\n  __typename\n}\n\nQuery Input Variables\n{\n  \"take\": 250,\n  \"skip\": 0,\n  \"startTime\": \"2023-10-10T18:30:00.000Z\",\n  \"endTime\": \"2023-10-11T18:30:00.000Z\",\n  \"appContext\": [\n    {\n      \"type\": \"TENANT\",\n      \"id\": 549010,\n      \"urn\": \"urn:edm-se:em:core:pr:tenant\"\n    }\n  ],\n  \"businessQuantityName\": \"ACTIVE_POWER_DEMAND\",\n  \"timeZone\": \"Asia/Calcutta\",\n  \"aggregationInterval\": \"HOUR\"\n}\n```\n\nQuery Response\n```json\n{\n  \"data\": {\n    \"binnedUsageTrendData\": {\n      \"items\": [\n        {\n          \"usageId\": 9550,\n          \"businessQuantity\": {\n            \"name\": \"ACTIVE_POWER_DEMAND\",\n            \"__typename\": \"EMCP_BusinessQuantity\"\n          },\n          \"measure\": {\n            \"id\": 125,\n            \"label\": \"Active power demand\",\n            \"urn\": \"urn:edm-se:em:core:me:wd\",\n            \"unit\": {\n              \"id\": 9,\n              \"isSi\": true,\n              \"symbol\": \"W\",\n              \"urn\": \"urn:edm-se:em:core:ut:watt\",\n              \"quantityName\": \"REAL_POWER\",\n              \"__typename\": \"EMCP_Unit\"\n            },\n            \"__typename\": \"EMCP_Measure\"\n          },\n          \"thingId\": 1932742,\n          \"thingLabel\": \"MigrationSite1\",\n          \"thingContext\": [\n            {\n              \"type\": \"TENANT\",\n              \"id\": 549010,\n              \"urn\": \"urn:edm-se:em:core:pr:tenant\",\n              \"__typename\": \"EMCP_TopoNodeContext\"\n            },\n            {\n              \"type\": \"ID\",\n              \"id\": 1932742,\n              \"urn\": \"urn:edm-se:em:core:pr:site\",\n              \"__typename\": \"EMCP_TopoNodeContext\"\n            }\n          ],\n          \"timeZone\": \"Asia/Calcutta\",\n          \"timeSeriesValues\": [\n            {\n              \"startTime\": \"2023-10-11T00:00:00.000+05:30\",\n              \"endTime\": \"2023-10-11T01:00:00.000+05:30\",\n              \"keyTime\": \"2023-10-11T00:00:00.000+05:30\",\n              \"value\": null,\n              \"__typename\": \"EMCP_BusinessQuantityBinnedTimeSeriesValue\"\n            },\n            {\n              \"startTime\": \"2023-10-11T01:00:00.000+05:30\",\n              \"endTime\": \"2023-10-11T02:00:00.000+05:30\",\n              \"keyTime\": \"2023-10-11T01:00:00.000+05:30\",\n              \"value\": null,\n              \"__typename\": \"EMCP_BusinessQuantityBinnedTimeSeriesValue\"\n            },\n            {\n              \"startTime\": \"2023-10-11T02:00:00.000+05:30\",\n              \"endTime\": \"2023-10-11T03:00:00.000+05:30\",\n              \"keyTime\": \"2023-10-11T02:00:00.000+05:30\",\n              \"value\": null,\n              \"__typename\": \"EMCP_BusinessQuantityBinnedTimeSeriesValue\"\n            },\n            {\n              \"startTime\": \"2023-10-11T03:00:00.000+05:30\",\n              \"endTime\": \"2023-10-11T04:00:00.000+05:30\",\n              \"keyTime\": \"2023-10-11T03:00:00.000+05:30\",\n              \"value\": null,\n              \"__typename\": \"EMCP_BusinessQuantityBinnedTimeSeriesValue\"\n            }\n          ],\n          \"__typename\": \"EMCP_BusinessQuantityBinnedUsageTimeSeries\",\n          \"surfaceAreaValue\": 200\n        },\n        {\n          \"usageId\": 9596,\n          \"businessQuantity\": {\n            \"name\": \"ACTIVE_POWER_DEMAND\",\n            \"__typename\": \"EMCP_BusinessQuantity\"\n          },\n          \"measure\": {\n            \"id\": 125,\n            \"label\": \"Active power demand\",\n            \"urn\": \"urn:edm-se:em:core:me:wd\",\n            \"unit\": {\n              \"id\": 9,\n              \"isSi\": true,\n              \"symbol\": \"W\",\n              \"urn\": \"urn:edm-se:em:core:ut:watt\",\n              \"quantityName\": \"REAL_POWER\",\n              \"__typename\": \"EMCP_Unit\"\n            },\n            \"__typename\": \"EMCP_Measure\"\n          },\n          \"thingId\": 1932742,\n          \"thingLabel\": \"MigrationSite1\",\n          \"thingContext\": [\n            {\n              \"type\": \"TENANT\",\n              \"id\": 549010,\n              \"urn\": \"urn:edm-se:em:core:pr:tenant\",\n              \"__typename\": \"EMCP_TopoNodeContext\"\n            },\n            {\n              \"type\": \"ID\",\n              \"id\": 1932742,\n              \"urn\": \"urn:edm-se:em:core:pr:site\",\n              \"__typename\": \"EMCP_TopoNodeContext\"\n            }\n          ],\n          \"timeZone\": \"Asia/Calcutta\",\n          \"timeSeriesValues\": [\n            {\n              \"startTime\": \"2023-10-11T00:00:00.000+05:30\",\n              \"endTime\": \"2023-10-11T01:00:00.000+05:30\",\n              \"keyTime\": \"2023-10-11T00:00:00.000+05:30\",\n              \"value\": null,\n              \"__typename\": \"EMCP_BusinessQuantityBinnedTimeSeriesValue\"\n            },\n            {\n              \"startTime\": \"2023-10-11T01:00:00.000+05:30\",\n              \"endTime\": \"2023-10-11T02:00:00.000+05:30\",\n              \"keyTime\": \"2023-10-11T01:00:00.000+05:30\",\n              \"value\": null,\n              \"__typename\": \"EMCP_BusinessQuantityBinnedTimeSeriesValue\"\n            },\n            {\n              \"startTime\": \"2023-10-11T02:00:00.000+05:30\",\n              \"endTime\": \"2023-10-11T03:00:00.000+05:30\",\n              \"keyTime\": \"2023-10-11T02:00:00.000+05:30\",\n              \"value\": null,\n              \"__typename\": \"EMCP_BusinessQuantityBinnedTimeSeriesValue\"\n            }\n          ],\n          \"__typename\": \"EMCP_BusinessQuantityBinnedUsageTimeSeries\",\n          \"surfaceAreaValue\": 200\n        }\n      ],\n      \"__typename\": \"EMCP_BusinessQuantityBinnedUsageTimeSeriesCollectionSegment\"\n    }\n  }\n}\n```\n\n## Energy Intensity\nThis query is designed to get energy intensity from the site.\n\n### Overview\nThis data will cover the steps and queries to the contents of Energy Intensity.\n\nThe high-level overview of the steps are:\n\n1. Query for the Tenant\n2. Query for the Site\n3. Query for the Energy Intensity\n\n### Arguments\n* `appContext`: an Array on `EMCP_TopoNodeContextInput` to filter the result by topology. NOTE: To create an `appContext`, you will need Tenant ID and SiteID. Refer Step 1 for Tenant ID and refer Step 2 for SiteID. NOTE: `appContext` must be in the following order:\n  1. Type\n  2. Tenant ID\n  3. SiteID\n\nBehaviour\n* The level from toponode: 0 is for site, the level starting from 0 for the root returned item and is increased for children.\n* Kinds of `thing` returned:\n  * `Thing` with a LOAD linked to them with a `NodelinkKind` Performs or Measure.\n  * Topo nodes (`Site`, `Building`, `Floor`, `Area`, `Space`, `Production Line`, `Zone`, `Panel Board`)\n* `LOAD` type `thing` label indicate usages, such as lighting, heating, or other type for energy consumers and energy sources in organization model.\n* How Parents/Child relationship is computed:\n  * For topo nodes: Parent will be the lowest level of all the topo nodes, defined in the `thing` properties.\n  * For other `things`: Parent will be the parent of the linked LOAD things.\n\n### Step 1\n\n#### What is a Tenant ID?\n\nA Tenant ID is a unique identifier for the organization in EEH.\n\nYou will need a Tenant ID as an input in Step 2 to get the SiteID.\n\n#### How to get a Tenant ID?\n\nTo get a Tenant ID, you need to perform a query as it is described in [GetTenantID Query](#tenant-id) and you will receive the Response as described with Tenant ID.\n\n### Step 2\n\n#### What is a SiteID?\nIt is a unique identifier in EEH to represent the site under which a gateway will be commissioned.\n\n#### How to get a SiteID?\nTo get a SiteID, you need to perform a query as described in [GetSiteID Query](#siteid) and you will receive the Response as described with SiteID.\n\nIn the Response there will be many nodes. For example: We have an `Organization`, a `Region`, and a `Site`. You will need the IDs for all three of those toponodes to prepare the query for Step 3.\n\nIn the response find the Site and collect the SiteID field as well as the parentId field. The parentId field may be an Organization or Region depending on the Energy Hierarchy.\n\nAt the end of this step, you have three IDs:\n\n* Tenant ID\n* Region ID\n* SiteID\n\n### Step 3\nIn this step take the three IDs from Step 2 and use them as the input variables.\n\nTo get the contents of Energy Intensity:\n\n#### Query\n```graphql\nrankedEnergyIntensity(\n  $appContext: [EMCP_TopoNodeContextInput!]!\n  $input: EMCP_RankedEnergyIntensityInput!\n  ) {\n      totalCount\n    items {\n      ranking\n      value\n      surfaceArea\n      energyIntensity\n      usagesConfigured\n      measure {\n        ...GeneralMeasureFields\n      }\n      thingId\n      thingLabel\n    }\n  }\n\n\nfragment GeneralMeasureFields on EMCP_Measure {\n  id\n  label\n  urn\n }\n```\n\n#### Query Input Variable\n```json\n{\n    \"appContext\": [\n    {\n      \"type\": \"TENANT\",\n      \"id\": 87293,\n      \"urn\": \"urn:edm-se:em:core:pr:tenant\"    \n    },\n    {\n       \"type\": \"ID\",\n       \"id\": 262211,\n       \"urn\": \"urn:edm-se:em:core:pr:site\"\n    }\n  ],\n  \"input\": {\n    \"startTime\": \"2023-03-16T04:00:00.000Z\",\n    \"endTime\": \"2023-03-17T04:00:00.000Z\",\n    \"topoConceptUrn\": null\n  },\n}\n```\n\n## Raw Time Series\n\nThis query returns paginated view of AggregatedTimeSeries data, based on the parameters.\n\n### Overview\n\nThis Raw time series data will cover the steps and query to get raw time series data for a device and Business Quantity.\n\nThe high-level overview of the steps are:\n\n1. Query for the Tenant \n\n2. Query for the Site \n\n3. Query for the time series data for a device and Business Quantity\n\n### Arguments\n\n* `appContext`: an Array on `EMCP_TopoNodeContextInput` to filter the result by topology.\n  NOTE: To create an `appContext`, you will need Tenant ID and SiteID. Refer Step 1 for Tenant ID and refer Step 2 for SiteID.\n  NOTE: `appContext` must be in the following order:\n  1. Type\n  2. Tenant ID\n  3. SiteID\n* `startTime`: a `DateTime` to indicate the inclusive start of the interval. For example: startTime can be \"2022-10-08T18:30:00.000Z\".\n* `endTime`: a `DateTime` to indicate the exclusive end of the interval. For example: endTime can be \"2023-10-09T18:30:00.000Z\".\n* `timeZone`: a `String` to indicate the IANA time zone the data should be aggregated in. For example: timeZone can be \"Asia/Calcutta\".\n* `skip`/`take`: `Int`s specifying pagination of the data.\n* `businessQuantityNames` : an Array of String indicating the business quantities to get values for.\n\n### Behaviour\n\n* The time series values results are returned as interval ending timestamps.\n* The value returned is always interval based to the value for that time travel.\n\n### Step 1\n\n#### What is a Tenant ID?\n\nA Tenant ID is a unique identifier for the organization in EEH.\n\nYou will need a Tenant ID as an input in Step 2 to get the SiteID.\n\n#### How to get a Tenant ID?\n\nTo get a Tenant ID, you need to perform a query as it is described in [GetTenantID Query](#tenant-id) and you will receive the Response as described with Tenant ID.\n\n### Step 2\n\n#### What is a SiteID?\nIt is a unique identifier in EEH to represent the site under which a gateway will be commissioned.\n\n#### How to get a SiteID?\nTo get a SiteID, you need to perform a query as described in [GetSiteID Query](#siteid) and you will receive the Response as described with SiteID.\n\nIn the Response there will be many nodes. For example: We have an `Organization`, a `Region`, and a `Site`. You will need the IDs for all three of those toponodes to prepare the query for Step 3.\n\nIn the response find the Site and collect the SiteID field as well as the parentId field. The parentId field may be an Organization or Region depending on the Energy Hierarchy.\n\nAt the end of this step, you have three IDs:\n\n* Tenant ID\n* Region ID\n* SiteID\n\n### Step 3\n\nIn this step take the three IDs from Step 2 and use them as the input variables.\n\nTo get the raw time series data for a device and business quantity:\n\n### Query\n\n```graphql\nquery rawTrendData(\n$appContext: [EMCP_TopoNodeContextInput!]!, \n$businessQuantityNames: [String!]!, \n$startTime: DateTime!, \n$endTime: DateTime!, \n$timeZone: String!, \n$take: Int = 250, \n$skip: Int = 0) \n{\n  rawTrendData(\n    skip: $skip\n    take: $take\n    appContext: $appContext\n    businessQuantityNames: $businessQuantityNames\n    startTime: $startTime\n    endTime: $endTime\n    timeZone: $timeZone\n  ) {\n    totalCount\n    items {\n      businessQuantity {\n        name\n        __typename\n      }\n      measure {\n        ...GeneralMeasureFields\n        __typename\n      }\n      thingId\n      thingLabel\n      thingContext {\n        ...GeneralToponodeContextFields\n        __typename\n      }\n      timeZone\n      timeSeriesValues {\n        timestamp\n        value\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment GeneralToponodeContextFields on EMCP_TopoNodeContext {\n  id\n  type\n  label\n  name\n  urn\n  value\n  __typename\n}\n\nfragment GeneralMeasureFields on EMCP_Measure {\n  id\n  label\n  urn\n  unit {\n    ...GeneralUnitFields\n    __typename\n  }\n  __typename\n}\n\nfragment GeneralUnitFields on EMCP_Unit {\n  id\n  isSi\n  symbol\n  urn\n  quantityName\n  __typename\n}\n```\n\n### Query Input Variables\n```json\n{\n  \"take\": 250,\n  \"skip\": 0,\n  \"appContext\": [\n    {\n      \"type\": \"TENANT\",\n      \"id\": 912986,\n      \"urn\": \"urn:edm-se:em:core:pr:tenant\"\n    },\n    {\n      \"type\": \"ID\",\n      \"id\": 1465060,\n      \"urn\": \"urn:edm-se:em:core:pr:site\"\n    },\n    {\n      \"type\": \"ID\",\n      \"id\": 1465178,\n      \"urn\": \"urn:edm-se:em:core:pr:panelboard\"\n    },\n    {\n      \"type\": \"ID\",\n      \"id\": 1465179,\n      \"urn\": \"urn:edm-se:em:core:pc:thermal_sensor\"\n    }\n  ],\n  \"businessQuantityNames\": [\n    \"RELATIVE_TEMPERATURE\"\n  ],\n  \"startTime\": \"2022-10-08T18:30:00.000Z\",\n  \"endTime\": \"2023-10-09T18:30:00.000Z\",\n  \"timeZone\": \"Asia/Calcutta\"\n}\n```\n\n### Query Response\n```json\n{\n  \"data\": {\n    \"rawTrendData\": {\n      \"totalCount\": 1,\n      \"items\": [\n        {\n          \"businessQuantity\": {\n            \"name\": \"RELATIVE_TEMPERATURE\",\n            \"__typename\": \"EMCP_BusinessQuantity\"\n          },\n          \"measure\": {\n            \"id\": 5206,\n            \"label\": \"Temperature\",\n            \"urn\": \"urn:edm-se:em:core:me:temp\",\n            \"unit\": {\n              \"id\": 5,\n              \"isSi\": false,\n              \"symbol\": \"°C\",\n              \"urn\": \"urn:edm-se:em:core:ut:degree_celsius\",\n              \"quantityName\": \"RELATIVE_TEMPERATURE\",\n              \"__typename\": \"EMCP_Unit\"\n            },\n            \"__typename\": \"EMCP_Measure\"\n          },\n          \"thingId\": 1465179,\n          \"thingLabel\": \"TH110 - TH6\",\n          \"thingContext\": [\n            {\n              \"id\": 912986,\n              \"type\": \"TENANT\",\n              \"label\": \"Shri Ram Hospital\",\n              \"name\": \"Shri Ram Hospital\",\n              \"urn\": \"urn:edm-se:em:core:pr:tenant\",\n              \"value\": null,\n              \"__typename\": \"EMCP_TopoNodeContext\"\n            },\n            {\n              \"id\": 1465179,\n              \"type\": \"ID\",\n              \"label\": \"TH110 - TH6\",\n              \"name\": \"TH110 - TH6\",\n              \"urn\": \"urn:edm-se:em:core:pc:thermal_sensor\",\n              \"value\": \"CC:89e92857-76d3-424a-8765-f50dd91ff738:50fb929f-f1dc-4235-aa69-b7c35fc77206\",\n              \"__typename\": \"EMCP_TopoNodeContext\"\n            }\n          ],\n          \"timeZone\": \"Asia/Calcutta\",\n          \"timeSeriesValues\": [\n            {\n              \"timestamp\": \"2023-08-09T07:15:00.000Z\",\n              \"value\": 73,\n              \"__typename\": \"EMCP_BusinessQuantityTimeSeriesValue\"\n            },\n            {\n              \"timestamp\": \"2023-08-09T07:30:00.000Z\",\n              \"value\": 73,\n              \"__typename\": \"EMCP_BusinessQuantityTimeSeriesValue\"\n            },\n            {\n              \"timestamp\": \"2023-08-09T07:45:00.000Z\",\n              \"value\": 73,\n              \"__typename\": \"EMCP_BusinessQuantityTimeSeriesValue\"\n            },\n            {\n              \"timestamp\": \"2023-08-09T08:00:00.000Z\",\n              \"value\": 73,\n              \"__typename\": \"EMCP_BusinessQuantityTimeSeriesValue\"\n            },\n            {\n              \"timestamp\": \"2023-08-09T08:18:00.000Z\",\n              \"value\": 73,\n              \"__typename\": \"EMCP_BusinessQuantityTimeSeriesValue\"\n            },\n            {\n              \"timestamp\": \"2023-08-09T08:30:00.000Z\",\n              \"value\": 73,\n              \"__typename\": \"EMCP_BusinessQuantityTimeSeriesValue\"\n            },\n            {\n              \"timestamp\": \"2023-08-09T08:45:00.000Z\",\n              \"value\": 73,\n              \"__typename\": \"EMCP_BusinessQuantityTimeSeriesValue\"\n            }\n          ],\n          \"__typename\": \"EMCP_BusinessQuantityTimeSeries\"\n        }\n      ],\n      \"__typename\": \"EMCP_BusinessQuantityTimeSeriesCollectionSegment\"\n    }\n  }\n}\n```\n\n## Assets Hierarchy\n\nThis query represents organization's all sites related assets hierarchical details returning by `Thing` data showing the parent-child relationship.\n\n### Overview\n\nThis data will cover the steps and queries to the content of Asset Hierarchy.\n\nThe high-level overview of the steps are:\n\n1. Query for the Tenant \n\n2. Query for the Site \n\n3. Query for the Asset Hierarchy\n\n### Arguments\n\n* `appContext`: an Array on `EMCP_TopoNodeContextInput` to filter the result by topology.\n  NOTE: To create an `appContext`, you will need Tenant ID and SiteID. Refer Step 1 for Tenant ID and refer Step 2 for SiteID.\n  NOTE: `appContext` must be in the following order:\n  1. Type\n  2. Tenant ID\n  3. SiteID\n*\t`mode`: enum (`ENERGY`, `PHYSICAL`, `COMMUNICATION`, `BILLING`, `EQUIPMENT`) to specify which type of Hierarchy is required.\n*\t`whereClause`: type `EMCP_HierarchyFilterInput`: allows advanced filtering capabilities – optional.\n*\t`includeAllParents`: Boolean (default set to `false`), add the parent for the `thing` (from `appContext`) if `appContext` is used - optional.\n\n### Behaviour\n\nThe Asset Hierarchy query looks up and returns to the list of assets based on their commissioned status.\n\n* Commissioned Assets: When the assets are already commissioned on EMCP, the query will return only the accessible assets via the Commissioned Assets field.\n* Uncommissioned Assets: When the asset is not commissioned yet, an internal lookup logic is applied, which is dependent on the type of asset.\n* Types of Assets: When the `serialNumber` or `serialNumber + commercialReference` are valid references, the query returns:\n  1. The `asset` is part of `uncommisionedAssets` with the basic information.\n  2. The topology from Cloud Commissioning (if one exists) in the `Hierarchy` is part of `uncommissionedAssets`.\n\n### Step 1\n\n#### What is a Tenant ID?\n\nA Tenant ID is a unique identifier for the organization in EEH.\n\nYou will need a Tenant ID as an input in Step 2 to get the SiteID.\n\n#### How to get a Tenant ID?\n\nTo get a Tenant ID, you need to perform a query as it is described in [GetTenantID Query](#tenant-id) and you will receive the Response as described with Tenant ID.\n\n### Step 2\n\n#### What is a SiteID?\nIt is a unique identifier in EEH to represent the site under which a gateway will be commissioned.\n\n#### How to get a SiteID?\nTo get a SiteID, you need to perform a query as described in [GetSiteID Query](#siteid) and you will receive the Response as described with SiteID.\n\nIn the Response there will be many nodes. For example: We have an `Organization`, a `Region`, and a `Site`. You will need the IDs for all three of those toponodes to prepare the query for Step 3.\n\nIn the response find the Site and collect the SiteID field as well as the parentId field. The parentId field may be an Organization or Region depending on the Energy Hierarchy.\n\nAt the end of this step, you have three IDs:\n\n* Tenant ID\n* Region ID\n* SiteID\n\n### Step 3\n\nIn this step take the three IDs from Step 2 and use them as the input variables.\n\nTo get the contents of Asset Hierarchy:\n\n### Query\n\n\n```graphql\nquery getHierarchyWithNodelinks(\n    $appContext: [EMCP_TopoNodeContextInput],\n    $mode: EMCP_HierarchyMode!,\n    $whereClause: EMCP_HierarchyFilterInput,\n    $includeAllParents: Boolean!,\n    $includeProperties: [String!],\n    $includeNodelinks: [EMCP_LinkKindType!]\n    ) {\n        hierarchy(\n            mode: $mode\n            appContext: $appContext\n            includeAllParents: $includeAllParents\n            where: $whereClause\n            ) {\n                parentId\n                thing {\n                    id\n                    label\n                    handle\n                    concept\n                    {\n                        urn\n                        type: conceptKind\n                        __typename\n                        }\n                        nodeLinkDsts(where: {kind: {in: $includeNodelinks}})\n                        {\n                            ...GeneralNodeLinkFields\n                            __typename\n                        }\n                        nodeLinkSrcs(where: {kind: {in: $includeNodelinks}})\n                        {\n                            ...GeneralNodeLinkFields\n                            __typename\n                        }\n                        pvalues(where: {property: {urn: {in: $includeProperties}}})\n                        {\n                            pival\n                            pfval\n                            psval\n                            property\n                            {\n                                urn\n                                __typename\n                                }\n                                __typename\n                                }\n                                __typename\n                                }\n                                __typename\n                               } \n} \nfragment GeneralNodeLinkFields on EMCP_NodeLink \n{   id   kind   srcId   srcNode   dstId   dstNode   percentage   __typename }\n```\n\n### Query Input Variables\n\n```json\n{\n  \"appContext\": [\n    {\n      \"type\": \"TENANT\",\n      \"id\": 549010,\n      \"urn\": \"urn:edm-se:em:core:pr:tenant\"\n    },\n    {\n      \"type\": \"ID\",\n      \"id\": 1914464,\n      \"urn\": \"urn:edm-se:em:core:pr:site\"\n    }\n  ],\n  \"mode\": \"PHYSICAL\",\n  \"includeAllParents\": false,\n  \"includeProperties\": [ \"urn:edm-se:em:core:pr:is_asset\", \"urn:edm-se:em:core:pr:gateway\", \"urn:edm-se:em:core:pr:has_computed_values\" ],\n  \"includeNodelinks\": [ \"FEED\", \"INCOMER\", \"RESIDUAL_FEED\" ]\n}\n```\n\n### Query Response\n\n```json\n{\n  \"data\": {\n    \"hierarchy\": [\n      {\n        \"parentId\": 549010,\n        \"thing\": {\n          \"id\": 1914464,\n          \"label\": \"MigrationSite1\",\n          \"handle\": \"Site:1bc67bea-0d34-47bd-8427-74bfd158a330\",\n          \"concept\": {\n            \"urn\": \"urn:edm-se:em:core:oc:site\",\n            \"type\": \"OTHER\",\n            \"__typename\": \"EMCP_Concept\"\n          },\n          \"nodeLinkDsts\": [],\n          \"nodeLinkSrcs\": [],\n          \"pvalues\": [\n            {\n              \"pival\": null,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:is_asset\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            }\n          ],\n          \"__typename\": \"EMCP_Thing\"\n        },\n        \"__typename\": \"EMCP_Hierarchy\"\n      },\n      {\n        \"parentId\": 1914464,\n        \"thing\": {\n          \"id\": 1914468,\n          \"label\": \"SMNC-APAS-ESP183-0155\",\n          \"handle\": \"CC:714a3f61-a097-4e23-826a-59063d606205:DefaultAddedPanel\",\n          \"concept\": {\n            \"urn\": \"urn:edm-se:em:core:pc:panelboard\",\n            \"type\": \"PRODUCT\",\n            \"__typename\": \"EMCP_Concept\"\n          },\n          \"nodeLinkDsts\": [],\n          \"nodeLinkSrcs\": [],\n          \"pvalues\": [\n            {\n              \"pival\": 1914467,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:gateway\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            },\n            {\n              \"pival\": 1,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:is_asset\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            },\n            {\n              \"pival\": 0,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:has_computed_values\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            }\n          ],\n          \"__typename\": \"EMCP_Thing\"\n        },\n        \"__typename\": \"EMCP_Hierarchy\"\n      },\n      {\n        \"parentId\": 1914468,\n        \"thing\": {\n          \"id\": 1914469,\n          \"label\": \"M63 1P+N B - P07\",\n          \"handle\": \"CC:714a3f61-a097-4e23-826a-59063d606205:f2bcce73-30e1-4dfa-89c0-c977a26d0d4b\",\n          \"concept\": {\n            \"urn\": \"urn:edm-se:em:core:pc:kilowatthourmeter\",\n            \"type\": \"PRODUCT\",\n            \"__typename\": \"EMCP_Concept\"\n          },\n          \"nodeLinkDsts\": [],\n          \"nodeLinkSrcs\": [],\n          \"pvalues\": [\n            {\n              \"pival\": 1914467,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:gateway\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            },\n            {\n              \"pival\": 0,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:is_asset\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            },\n            {\n              \"pival\": 0,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:has_computed_values\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            }\n          ],\n          \"__typename\": \"EMCP_Thing\"\n        },\n        \"__typename\": \"EMCP_Hierarchy\"\n      },\n      {\n        \"parentId\": 1914468,\n        \"thing\": {\n          \"id\": 1914470,\n          \"label\": \"sepam 052 - SP1           \",\n          \"handle\": \"CC:714a3f61-a097-4e23-826a-59063d606205:b5d105d2-d129-4135-affe-94b296cbd91a\",\n          \"concept\": {\n            \"urn\": \"urn:edm-se:em:core:pc:protection_relay\",\n            \"type\": \"PRODUCT\",\n            \"__typename\": \"EMCP_Concept\"\n          },\n          \"nodeLinkDsts\": [],\n          \"nodeLinkSrcs\": [],\n          \"pvalues\": [\n            {\n              \"pival\": 1914467,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:gateway\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            },\n            {\n              \"pival\": 0,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:is_asset\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            },\n            {\n              \"pival\": 0,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:has_computed_values\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            }\n          ],\n          \"__typename\": \"EMCP_Thing\"\n        },\n        \"__typename\": \"EMCP_Hierarchy\"\n      }\n    ]\n  }\n}\n```\n\n## Communication Hierarchy\n\nThis query represents organization's all sites related gateway and devices hierarchical details returning by `Thing` data showing the parent-child relationship.\n\n### Overview\n\nThis data will cover the steps and queries to the content of Communication Hierarchy.\n\nThe high-level overview of the steps are:\n\n1. Query for the Tenant \n\n2. Query for the Site \n\n3. Query for the Communication Hierarchy\n\n### Arguments\n\n* `appContext` : an Array on `EMCP_TopoNodeContextInput` to filter the result by topology.\n  NOTE: To create an `appContext`, you will need Tenant ID and SiteID. Refer Step 1 for Tenant ID and refer Step 2 for SiteID.\n  NOTE: `appContext` must be in the following order:\n  1. Type\n  2. Tenant ID\n  3. SiteID\n* `mode`: enum(`ENERGY`, `PHYSICAL`, `COMMUNICATION`, `BILLING`, `EQUIPMENT`) to specify which type of Hierarchy is required.\n*\t`whereClause`: type `EMCP_HierarchyFilterInput`: allows advanced filtering capabilities – optional.\n*\t`includeAllParents`: Boolean (default set to `false`) add the parent for thing (from `appContext`) if `appContext` is used - optional.\n\n### Behaviour\n\nKind of `thing` returned:\n\n* `Thing` with Concept kind - Product and has the `gateway` ID property.\n* Toponodes will contain `Site`, `Gateway` and `Asset` `thing` IDs and properties.\nHow Parent/Child relation is computed:\n*\tFor `toponodes` and `gateway`: The Parent will be the lowest level of the `toponodes` defined in the `thing` properties.\n*\tFor other PRODUCT: The parent will be the gateway targeted by the `gateway` ID property.\n\n### Step 1\n\n#### What is a Tenant ID?\n\nA Tenant ID is a unique identifier for the organization in EEH.\n\nYou will need a Tenant ID as an input in Step 2 to get the SiteID.\n\n#### How to get a Tenant ID?\n\nTo get a Tenant ID, you need to perform a query as it is described in [GetTenantID Query](#tenant-id) and you will receive the Response as described with Tenant ID.\n\n### Step 2\n\n#### What is a SiteID?\nIt is a unique identifier in EEH to represent the site under which a gateway will be commissioned.\n\n#### How to get a SiteID?\nTo get a SiteID, you need to perform a query as described in [GetSiteID Query](#siteid) and you will receive the Response as described with SiteID.\n\nIn the Response there will be many nodes. For example: We have an `Organization`, a `Region`, and a `Site`. You will need the IDs for all three of those toponodes to prepare the query for Step 3.\n\nIn the response find the Site and collect the SiteID field as well as the parentId field. The parentId field may be an Organization or Region depending on the Energy Hierarchy.\n\nAt the end of this step, you have three IDs:\n\n* Tenant ID\n* Region ID\n* SiteID\n\n### Step 3\n\nIn this step take the three IDs from Step 2 and use them as the input variables.\n\nTo get the contents of the Communication Hierarchy:\n\n### Query\n\n```graphql\nquery getHierarchy(\n    $appContext: [EMCP_TopoNodeContextInput],\n    $mode: EMCP_HierarchyMode!,\n    $whereClause: EMCP_HierarchyFilterInput,\n    $includeAllParents: Boolean!,\n    $includeProperties: [String!]\n    ) {\n        hierarchy(\n            mode: $mode\n            appContext: $appContext\n            includeAllParents: $includeAllParents\n            where: $whereClause\n            ) {\n                parentId\n                thing {\n                    id\n                    label\n                    handle\n      concept {\n        urn\n        type: conceptKind\n        __typename\n      }\n      pvalues(where: {property: {urn: {in: $includeProperties}}}) {\n        pival\n        pfval\n        psval\n        property {\n          urn\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n```\n\n### Query Input Variables\n\n```json\n{\n  \"appContext\": [\n    {\n      \"type\": \"TENANT\",\n      \"id\": 549010,\n      \"urn\": \"urn:edm-se:em:core:pr:tenant\"\n    },\n    {\n      \"type\": \"ID\",\n      \"id\": 1914464,\n      \"urn\": \"urn:edm-se:em:core:pr:site\"\n    }\n  ],\n  \"mode\": \"COMMUNICATION\",\n  \"includeAllParents\": false,\n  \"includeProperties\": [\n    \"urn:edm-se:em:core:pr:is_asset\"\n  ]\n}\n```\n\n### Query Response\n\n```json\n{\n  \"data\": {\n    \"hierarchy\": [\n      {\n        \"parentId\": 549010,\n        \"thing\": {\n          \"id\": 1914464,\n          \"label\": \"MigrationSite1\",\n          \"handle\": \"Site:1bc67bea-0d34-47bd-8427-74bfd158a330\",\n          \"concept\": {\n            \"urn\": \"urn:edm-se:em:core:oc:site\",\n            \"type\": \"OTHER\",\n            \"__typename\": \"EMCP_Concept\"\n          },\n          \"pvalues\": [\n            {\n              \"pival\": null,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:is_asset\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            }\n          ],\n          \"__typename\": \"EMCP_Thing\"\n        },\n        \"__typename\": \"EMCP_Hierarchy\"\n      },\n      {\n        \"parentId\": 1914464,\n        \"thing\": {\n          \"id\": 1914467,\n          \"label\": \"SMNC-APAS-ESP183-0155\",\n          \"handle\": \"CC:714a3f61-a097-4e23-826a-59063d606205:0977e85c-d3c0-4c06-9aee-927792f49f9d\",\n          \"concept\": {\n            \"urn\": \"urn:edm-se:em:core:pc:gateway\",\n            \"type\": \"PRODUCT\",\n            \"__typename\": \"EMCP_Concept\"\n          },\n          \"pvalues\": [\n            {\n              \"pival\": 0,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:is_asset\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            }\n          ],\n          \"__typename\": \"EMCP_Thing\"\n        },\n        \"__typename\": \"EMCP_Hierarchy\"\n      },\n      {\n        \"parentId\": 1914467,\n        \"thing\": {\n          \"id\": 1914493,\n          \"label\": \"TH110 - TH1\",\n          \"handle\": \"CC:714a3f61-a097-4e23-826a-59063d606205:9f9b44a9-cd03-4bb6-b97f-037df773902b\",\n          \"concept\": {\n            \"urn\": \"urn:edm-se:em:core:pc:thermal_sensor\",\n            \"type\": \"PRODUCT\",\n            \"__typename\": \"EMCP_Concept\"\n          },\n          \"pvalues\": [\n            {\n              \"pival\": 0,\n              \"pfval\": null,\n              \"psval\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:is_asset\",\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_PValue\"\n            }\n          ],\n          \"__typename\": \"EMCP_Thing\"\n        },\n        \"__typename\": \"EMCP_Hierarchy\"\n      }\n    ]\n  }\n}\n```\n\n## Alarms\n\nThis query is designed to return a paginated view of alarms for last 30 days duration.\n\n### Overview\n\nThis site alarm data will cover the steps and query to get the site alarms for the last 30 days.\n\nThe high-level overview of the steps are:\n\n1. Query for the Tenant \n\n2. Query for the Site \n\n3. Query for the site alarms for the last 30 days\n\n### Arguments\n\n* `appContext` : an Array on `EMCP_TopoNodeContextInput` to filter the result by topology.\n  NOTE: To create an `appContext`, you will need Tenant ID and SiteID. Refer Step 1 for Tenant ID and refer Step 2 for SiteID.\n  NOTE: `appContext` must be in the following order:\n  1. Type\n  2. Tenant ID\n  3. SiteID\n*\t`whereClause` : type `EMCP_AlarmOccurenceFilterInput`: allows advanced filtering capabilities – optional.\n*\t`startTime` : a DateTime to indicate the inclusive start of the interval. For example: startTime can be \"gte\": \"2023-09-05T18:30:00.000Z\", \"lte\": \"2023-10-05T18:30:00.000Z\".\n*\t`enableNotificationPreferences` : a Boolean indicating whether to apply the user's notification filters to the returned data. Default value `false`.\n\n### Behaviour\n\n* If a user has no required permissions to view alarms, the response is an empty array.\n* If a user has no required privileges to access the requested organization topology, the response is an empty array.\n* If the input parameter `enableNotificationPreferences` is set to true, the result is filtered by the user's notification preferences. Otherwise, a user's notification preferences are ignored, and the request processing continues to the next stage.\n* If the input parameter `appContext` is set to null or an empty array and `enableNotificationPreferences` is set to true, the response will be a `BAD_INPUT` error.\n\n### Step 1\n\n#### What is a Tenant ID?\n\nA Tenant ID is a unique identifier for the organization in EEH.\n\nYou will need a Tenant ID as an input in Step 2 to get the SiteID.\n\n#### How to get a Tenant ID?\n\nTo get a Tenant ID, you need to perform a query as it is described in [GetTenantID Query](#tenant-id) and you will receive the Response as described with Tenant ID.\n\n### Step 2\n\n#### What is a SiteID?\nIt is a unique identifier in EEH to represent the site under which a gateway will be commissioned.\n\n#### How to get a SiteID?\nTo get a SiteID, you need to perform a query as described in [GetSiteID Query](#siteid) and you will receive the Response as described with SiteID.\n\nIn the Response there will be many nodes. For example: We have an `Organization`, a `Region`, and a `Site`. You will need the IDs for all three of those toponodes to prepare the query for Step 3.\n\nIn the response find the Site and collect the SiteID field as well as the parentId field. The parentId field may be an Organization or Region depending on the Energy Hierarchy.\n\nAt the end of this step, you have three IDs:\n\n* Tenant ID\n* Region ID\n* SiteID\n\n### Step 3\n\nIn this step take the three IDs from Step 2 and use them as the input variables.\n\nTo get the site alarms for the last 30 days:\n\n### Query\n\n```graphql\nquery GetAlarms(\n    $appContext: [EMCP_TopoNodeContextInput!]!, $whereClause: EMCP_AlarmOccurrenceFilterInput, $enableNotificationPreferences: Boolean, $pageSize: Int, $offset: Int) {\n  alarmOccurrences(\n    appContext: $appContext\n    enableNotificationPreferences: $enableNotificationPreferences\n    where: $whereClause\n    order: {startTime: DESC, id: DESC}\n    skip: $offset\n    take: $pageSize\n  ) {\n    totalCount\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      __typename\n    }\n    items {\n      ...GeneralAlarmOccurrenceFields\n      __typename\n    }\n    __typename\n  }\n}\n \nfragment GeneralAlarmOccurrenceFields on EMCP_AlarmOccurrence {\n  id\n  startTime\n  endTime\n  alarmState\n  alarmPriority\n  measures\n  possibleCause\n  possibleProblem\n  possibleRecommendation\n  possibleRisk\n  alarmOccurrencePValues {\n    ...AlarmOccurrencePValueFields\n    __typename\n  }\n  alarmInstance {\n    id\n    alarmControl\n    alarmFamily\n    alarmModel\n    alarmState\n    alarmConceptId\n    thingId\n    tsMath\n    alarmConcept {\n      ...AlarmOccurrenceConceptFields\n      __typename\n    }\n    thing {\n      handle\n      label\n      __typename\n    }\n    __typename\n  }\n  acknowledgementAlarmStateTransition {\n    alarmState\n    comment\n    idmsFederatedId\n    transitionTime\n    __typename\n  }\n  __typename\n}\n \nfragment AlarmOccurrenceConceptFields on EMCP_AlarmConcept {\n  id\n  urn\n  name\n  label\n  description\n  alarmEventConceptCategory {\n    id\n    description\n    name\n    packageId\n    label\n    __typename\n  }\n  packageId\n  ui\n  __typename\n}\n \nfragment AlarmOccurrencePValueFields on EMCP_AlarmOccurrencePValue {\n  pival\n  pfval\n  psval\n  pTsVal\n  property {\n    ...GeneralPropertyWithUnitFields\n    __typename\n  }\n  __typename\n}\n \nfragment GeneralPropertyWithUnitFields on EMCP_Property {\n  urn\n  label\n  description\n  mandatory\n  visible\n  defIVal\n  defFVal\n  defSVal\n  orderingType\n  encodingType\n  accessType\n  facetType\n  enumUrn\n  unit {\n    ...GeneralUnitFields\n    __typename\n  }\n  __typename\n}\n \nfragment GeneralUnitFields on EMCP_Unit {\n  id\n  isSi\n  symbol\n  urn\n  quantityName\n  __typename\n}\n```\n\n### Query Input Variables\n```json\n{\n  \"appContext\": [\n    {\n      \"type\": \"TENANT\",\n      \"id\": 549010,\n      \"urn\": \"urn:edm-se:em:core:pr:tenant\"\n    },\n    {\n      \"type\": \"ID\",\n      \"id\": 1914464,\n      \"urn\": \"urn:edm-se:em:core:pr:site\"\n    }\n  ],\n  \"pageSize\": 5,\n  \"offset\": 0,\n  \"enableNotificationPreferences\": false,\n  \"whereClause\": {\n    \"startTime\": {\n      \"gte\": \"2023-09-05T18:30:00.000Z\",\n      \"lte\": \"2023-10-05T18:30:00.000Z\"\n    },\n    \"alarmPriority\": { \"in\": [ \"HIGH\", \"MEDIUM\", \"LOW\" ] }\n  }\n}\n```\n\n### Query Response\n```json\n{\n  \"data\": {\n    \"alarmOccurrences\": {\n      \"totalCount\": 8,\n      \"pageInfo\": {\n        \"hasNextPage\": true,\n        \"hasPreviousPage\": false,\n        \"__typename\": \"CollectionSegmentInfo\"\n      },\n      \"items\": [\n        {\n          \"id\": 797119,\n          \"startTime\": \"2023-10-04T12:11:03.263Z\",\n          \"endTime\": null,\n          \"alarmState\": \"UNACK\",\n          \"alarmPriority\": \"HIGH\",\n          \"measures\": null,\n          \"possibleCause\": null,\n          \"possibleProblem\": null,\n          \"possibleRecommendation\": null,\n          \"possibleRisk\": null,\n          \"alarmOccurrencePValues\": [\n            {\n              \"pival\": null,\n              \"pfval\": null,\n              \"psval\": \"Gateway Communication loss alarm\",\n              \"pTsVal\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:detail_text\",\n                \"label\": \"Details\",\n                \"description\": \"detail text\",\n                \"mandatory\": false,\n                \"visible\": \"ON_ALL\",\n                \"defIVal\": null,\n                \"defFVal\": null,\n                \"defSVal\": null,\n                \"orderingType\": \"VISIBLE_LEVEL3\",\n                \"encodingType\": \"STRING\",\n                \"accessType\": \"RW\",\n                \"facetType\": \"ELECTRICAL\",\n                \"enumUrn\": null,\n                \"unit\": {\n                  \"id\": 7,\n                  \"isSi\": true,\n                  \"symbol\": \"\",\n                  \"urn\": \"urn:edm-se:em:core:ut:dimensionless\",\n                  \"quantityName\": \"NONE\",\n                  \"__typename\": \"EMCP_Unit\"\n                },\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_AlarmOccurrencePValue\"\n            },\n            {\n              \"pival\": null,\n              \"pfval\": null,\n              \"psval\": \"Gateway Communication loss alarm\",\n              \"pTsVal\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:summary_text\",\n                \"label\": \"Summary\",\n                \"description\": \"summary text\",\n                \"mandatory\": false,\n                \"visible\": \"ON_ALL\",\n                \"defIVal\": null,\n                \"defFVal\": null,\n                \"defSVal\": null,\n                \"orderingType\": \"VISIBLE_LEVEL3\",\n                \"encodingType\": \"STRING\",\n                \"accessType\": \"RW\",\n                \"facetType\": \"ELECTRICAL\",\n                \"enumUrn\": null,\n                \"unit\": {\n                  \"id\": 7,\n                  \"isSi\": true,\n                  \"symbol\": \"\",\n                  \"urn\": \"urn:edm-se:em:core:ut:dimensionless\",\n                  \"quantityName\": \"NONE\",\n                  \"__typename\": \"EMCP_Unit\"\n                },\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_AlarmOccurrencePValue\"\n            }\n          ],\n          \"alarmInstance\": {\n            \"id\": 163806,\n            \"alarmControl\": \"NA\",\n            \"alarmFamily\": null,\n            \"alarmModel\": \"ALM_WITH_ACK\",\n            \"alarmState\": \"UNACK\",\n            \"alarmConceptId\": 441,\n            \"thingId\": 1914467,\n            \"tsMath\": \"INPUT_BASED\",\n            \"alarmConcept\": {\n              \"id\": 441,\n              \"urn\": \"urn:edm-se:em:core:al:calh1_commloss\",\n              \"name\": \"Communication loss alarm\",\n              \"label\": \"Communication loss alarm\",\n              \"description\": \"Communication loss alarm.\",\n              \"alarmEventConceptCategory\": {\n                \"id\": 2,\n                \"description\": \"Diagnostics information\",\n                \"name\": \"Diagnostics\",\n                \"packageId\": 1,\n                \"label\": \"Diagnostics\",\n                \"__typename\": \"EMCP_AlarmEventConceptCategory\"\n              },\n              \"packageId\": 1,\n              \"ui\": \"{\\\"icon\\\": \\\"notification_on\\\", \\\"color\\\": \\\"#71CBE0\\\"}\",\n              \"__typename\": \"EMCP_AlarmConcept\"\n            },\n            \"thing\": {\n              \"handle\": \"CC:714a3f61-a097-4e23-826a-59063d606205:0977e85c-d3c0-4c06-9aee-927792f49f9d\",\n              \"label\": \"SMNC-APAS-ESP183-0155\",\n              \"__typename\": \"EMCP_Thing\"\n            },\n            \"__typename\": \"EMCP_AlarmInstance\"\n          },\n          \"acknowledgementAlarmStateTransition\": null,\n          \"__typename\": \"EMCP_AlarmOccurrence\"\n        },\n        {\n          \"id\": 797111,\n          \"startTime\": \"2023-09-15T16:00:12.161Z\",\n          \"endTime\": null,\n          \"alarmState\": \"UNACK\",\n          \"alarmPriority\": \"LOW\",\n          \"measures\": null,\n          \"possibleCause\": null,\n          \"possibleProblem\": null,\n          \"possibleRecommendation\": null,\n          \"possibleRisk\": null,\n          \"alarmOccurrencePValues\": [\n            {\n              \"pival\": null,\n              \"pfval\": null,\n              \"psval\": \"Data loss alarm\",\n              \"pTsVal\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:detail_text\",\n                \"label\": \"Details\",\n                \"description\": \"detail text\",\n                \"mandatory\": false,\n                \"visible\": \"ON_ALL\",\n                \"defIVal\": null,\n                \"defFVal\": null,\n                \"defSVal\": null,\n                \"orderingType\": \"VISIBLE_LEVEL3\",\n                \"encodingType\": \"STRING\",\n                \"accessType\": \"RW\",\n                \"facetType\": \"ELECTRICAL\",\n                \"enumUrn\": null,\n                \"unit\": {\n                  \"id\": 7,\n                  \"isSi\": true,\n                  \"symbol\": \"\",\n                  \"urn\": \"urn:edm-se:em:core:ut:dimensionless\",\n                  \"quantityName\": \"NONE\",\n                  \"__typename\": \"EMCP_Unit\"\n                },\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_AlarmOccurrencePValue\"\n            },\n            {\n              \"pival\": null,\n              \"pfval\": null,\n              \"psval\": \"Alarm related to potential data loss, such as device data transfer issues.\",\n              \"pTsVal\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:summary_text\",\n                \"label\": \"Summary\",\n                \"description\": \"summary text\",\n                \"mandatory\": false,\n                \"visible\": \"ON_ALL\",\n                \"defIVal\": null,\n                \"defFVal\": null,\n                \"defSVal\": null,\n                \"orderingType\": \"VISIBLE_LEVEL3\",\n                \"encodingType\": \"STRING\",\n                \"accessType\": \"RW\",\n                \"facetType\": \"ELECTRICAL\",\n                \"enumUrn\": null,\n                \"unit\": {\n                  \"id\": 7,\n                  \"isSi\": true,\n                  \"symbol\": \"\",\n                  \"urn\": \"urn:edm-se:em:core:ut:dimensionless\",\n                  \"quantityName\": \"NONE\",\n                  \"__typename\": \"EMCP_Unit\"\n                },\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_AlarmOccurrencePValue\"\n            }\n          ],\n          \"alarmInstance\": {\n            \"id\": 163802,\n            \"alarmControl\": \"ACK\",\n            \"alarmFamily\": null,\n            \"alarmModel\": \"ALM_WITH_ACK\",\n            \"alarmState\": \"UNACK\",\n            \"alarmConceptId\": 450,\n            \"thingId\": 1914464,\n            \"tsMath\": \"INPUT_BASED\",\n            \"alarmConcept\": {\n              \"id\": 450,\n              \"urn\": \"urn:edm-se:em:core:al:calh1_datalossalm\",\n              \"name\": \"Data loss alarm\",\n              \"label\": \"Data loss alarm\",\n              \"description\": \"Alarm related to potential data loss, such as device data transfer issues.\",\n              \"alarmEventConceptCategory\": {\n                \"id\": 2,\n                \"description\": \"Diagnostics information\",\n                \"name\": \"Diagnostics\",\n                \"packageId\": 1,\n                \"label\": \"Diagnostics\",\n                \"__typename\": \"EMCP_AlarmEventConceptCategory\"\n              },\n              \"packageId\": 1,\n              \"ui\": \"{\\\"icon\\\": \\\"notification_on\\\", \\\"color\\\": \\\"#71CBE0\\\"}\",\n              \"__typename\": \"EMCP_AlarmConcept\"\n            },\n            \"thing\": {\n              \"handle\": \"Site:1bc67bea-0d34-47bd-8427-74bfd158a330\",\n              \"label\": \"MigrationSite1\",\n              \"__typename\": \"EMCP_Thing\"\n            },\n            \"__typename\": \"EMCP_AlarmInstance\"\n          },\n          \"acknowledgementAlarmStateTransition\": null,\n          \"__typename\": \"EMCP_AlarmOccurrence\"\n        },\n        {\n          \"id\": 797110,\n          \"startTime\": \"2023-09-09T06:09:13.437Z\",\n          \"endTime\": \"2023-10-01T00:00:00.000Z\",\n          \"alarmState\": \"RTNUN\",\n          \"alarmPriority\": \"LOW\",\n          \"measures\": null,\n          \"possibleCause\": null,\n          \"possibleProblem\": null,\n          \"possibleRecommendation\": null,\n          \"possibleRisk\": null,\n          \"alarmOccurrencePValues\": [\n            {\n              \"pival\": null,\n              \"pfval\": null,\n              \"psval\": \"Gas overconsumption alarm.\",\n              \"pTsVal\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:detail_text\",\n                \"label\": \"Details\",\n                \"description\": \"detail text\",\n                \"mandatory\": false,\n                \"visible\": \"ON_ALL\",\n                \"defIVal\": null,\n                \"defFVal\": null,\n                \"defSVal\": null,\n                \"orderingType\": \"VISIBLE_LEVEL3\",\n                \"encodingType\": \"STRING\",\n                \"accessType\": \"RW\",\n                \"facetType\": \"ELECTRICAL\",\n                \"enumUrn\": null,\n                \"unit\": {\n                  \"id\": 7,\n                  \"isSi\": true,\n                  \"symbol\": \"\",\n                  \"urn\": \"urn:edm-se:em:core:ut:dimensionless\",\n                  \"quantityName\": \"NONE\",\n                  \"__typename\": \"EMCP_Unit\"\n                },\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_AlarmOccurrencePValue\"\n            },\n            {\n              \"pival\": null,\n              \"pfval\": null,\n              \"psval\": \"Alarm raised when the cumulated gas consumption is over the expected target.\",\n              \"pTsVal\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:summary_text\",\n                \"label\": \"Summary\",\n                \"description\": \"summary text\",\n                \"mandatory\": false,\n                \"visible\": \"ON_ALL\",\n                \"defIVal\": null,\n                \"defFVal\": null,\n                \"defSVal\": null,\n                \"orderingType\": \"VISIBLE_LEVEL3\",\n                \"encodingType\": \"STRING\",\n                \"accessType\": \"RW\",\n                \"facetType\": \"ELECTRICAL\",\n                \"enumUrn\": null,\n                \"unit\": {\n                  \"id\": 7,\n                  \"isSi\": true,\n                  \"symbol\": \"\",\n                  \"urn\": \"urn:edm-se:em:core:ut:dimensionless\",\n                  \"quantityName\": \"NONE\",\n                  \"__typename\": \"EMCP_Unit\"\n                },\n                \"__typename\": \"EMCP_Property\"\n              },\n              \"__typename\": \"EMCP_AlarmOccurrencePValue\"\n            }\n          ],\n          \"alarmInstance\": {\n            \"id\": 163805,\n            \"alarmControl\": \"ACK\",\n            \"alarmFamily\": null,\n            \"alarmModel\": \"ALM_WITH_ACK\",\n            \"alarmState\": \"RTNUN\",\n            \"alarmConceptId\": 493,\n            \"thingId\": 1914464,\n            \"tsMath\": \"INPUT_BASED\",\n            \"alarmConcept\": {\n              \"id\": 493,\n              \"urn\": \"urn:edm-se:em:core:al:calh1_gasoverconsalm\",\n              \"name\": \"Gas overconsumption alarm\",\n              \"label\": \"Gas overconsumption alarm\",\n              \"description\": \"Alarm raised when the cumulated gas consumption is over the expected target.\",\n              \"alarmEventConceptCategory\": {\n                \"id\": 3,\n                \"description\": \"Energy Management information\",\n                \"name\": \"Energy Management\",\n                \"packageId\": 1,\n                \"label\": \"Energy Management\",\n                \"__typename\": \"EMCP_AlarmEventConceptCategory\"\n              },\n              \"packageId\": 1,\n              \"ui\": \"{\\\"icon\\\": \\\"notification_on\\\", \\\"color\\\": \\\"#71CBE0\\\"}\",\n              \"__typename\": \"EMCP_AlarmConcept\"\n            },\n            \"thing\": {\n              \"handle\": \"Site:1bc67bea-0d34-47bd-8427-74bfd158a330\",\n              \"label\": \"MigrationSite1\",\n              \"__typename\": \"EMCP_Thing\"\n            },\n            \"__typename\": \"EMCP_AlarmInstance\"\n          },\n          \"acknowledgementAlarmStateTransition\": null,\n          \"__typename\": \"EMCP_AlarmOccurrence\"\n        }\n      ],\n      \"__typename\": \"EMCP_AlarmOccurrenceCollectionSegment\"\n    }\n  }\n}\n```\n\n# Queries\n\n## Dictionary\n\nAll queries related to the EDM dictionary entities. Those queries that directly expose the data to any authenticated user. There currently is no scope, so all the dictionary data is shared to every user. The data is Read-Only.\n\nThe queries follow the same format :\n* queryName : the name of the entity (eg: concepts)\n* `where` clause allowing filtering\n* projection possible across dictionary entities only\n\nThe following is a complete list of all exposed entities, with the 'where' clause type and 'return' type :\n\n| Query    |      where clause      |  Result |\n|----------|-------------|------|\n| alarmConcepts |`EMCP_AlarmConceptFilterInput` |`EMCP_AlarmConcept` |\n| alarmMappings |`EMCP_AlarmMappingFilterInput` |`EMCP_AlarmMapping` |\n| alarmPropertyLinks |`EMCP_AlarmPropertyLinkFilterInput` |`EMCP_AlarmPropertyLink` |\n| alarmEventConceptCategories |`EMCP_AlarmEventConceptCategoryFilterInput` |`EMCP_AlarmEventConceptCategory` |\n| alarmEventConceptCategoryModuleMappings |`EMCP_AlarmEventConceptCategoryModuleMappingFilterInput` |`EMCP_AlarmEventConceptCategoryModuleMapping` |\n| alarmEventConceptTypes |`EMCP_AlarmEventConceptTypeFilterInput` |`EMCP_AlarmEventConceptType` |\n| concepts |`EMCP_ConceptFilterInput` |`EMCP_Concept` |\n| properties |`EMCP_PropertyFilterInput` |`EMCP_Property` |\n| enumDescriptions |`EMCP_EnumDescriptionFilterInput` |`EMCP_EnumDescription` |\n| toponodes |`EMCP_TopoNodeFilterInput` |`EMCP_TopoNode` |\n| topologies |`EMCP_TopologyFilterInput` |`EMCP_Topology` |\n| packages |`EMCP_PackageFilterInput` |`EMCP_Package` |\n| tags |`EMCP_TagFilterInput` |`EMCP_Tag` |\n| standards |`EMCP_StandardFilterInput` |`EMCP_Standard` |\n| standardDescriptions |`EMCP_StandardDescriptionFilterInput` |`EMCP_StandardDescription` |\n| propertyLinks |`EMCP_PropertyLinkFilterInput` |`EMCP_PropertyLink` |\n| nodeInfos |`EMCP_NodeInfoFilterInput` |`EMCP_NodeInfo` |\n| nodeInfoLayouts |`EMCP_NodeInfoLayoutFilterInput` |`EMCP_NodeInfoLayout` |\n| conceptMappings |`EMCP_ConceptMappingFilterInput` |`EMCP_ConceptMapping` |\n| conceptTypeMappings |`EMCP_ConceptTypeMappingFilterInput` |`EMCP_ConceptTypeMapping` |\n| eventConcepts |`EMCP_EventConceptFilterInput` |`EMCP_EventConcept` |\n| eventMappings |`EMCP_EventMappingFilterInput` |`EMCP_EventMapping` |\n| eventPropertyLinks |`EMCP_EventPropertyLinkFilterInput` |`EMCP_EventPropertyLink` |\n| measures |`EMCP_MeasureFilterInput` |`EMCP_Measure` |\n| measureMappings |`EMCP_MeasureMappingFilterInput` |`EMCP_MeasureMapping` |\n| mValueMappings |`EMCP_MValueMappingFilterInput` |`EMCP_MValueMapping` |\n| businessQuantities |`EMCP_BusinessQuantityFilterInput` |`EMCP_BusinessQuantity` |\n| businessQuantityPriorities |`EMCP_BusinessQuantityPriorityFilterInput` |`EMCP_BusinessQuantityPriority` |\n| phaseDescriptions |`EMCP_PhaseDescriptionFilterInput` |`EMCP_PhaseDescription` |\n| units |`EMCP_UnitFilterInput` |`EMCP_Unit` |\n| tableGadgets |`EMCP_TableGadgetFilterInput` |`EMCP_TableGadget` |\n| tableGadgetItems |`EMCP_TableGadgetItemFilterInput` |`EMCP_TableGadgetItem` |\n| tableGadgetMappings |`EMCP_TableGadgetMappingFilterInput` |`EMCP_TableGadgetMapping` |\n\n\n### Examples\n\n#### GetConceptFromUrn\n\n```graphql title=\"Graphql Query\"\nquery MyQuery {\n  concepts(where:{urn:{eq:\"urn:edm-se:em:core:pc:load\"}}) {\n    id\n    conceptKind\n    urn\n    label\n  }\n}\n```\n\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"concepts\": [\n      {\n        \"id\": 3836,\n        \"conceptKind\": \"LOAD\",\n        \"urn\": \"urn:edm-se:em:core:pc:load\",\n        \"label\": \"Load\"\n      }\n    ]\n  }\n}\n```\n\n#### GetPropertyFromConceptUrn\n\n```graphql title=\"Graphql Query\"\nquery MyQuery {\n  propertyLinks(where: {concept: {urn: {eq: \"urn:edm-se:em:core:pc:load\"}}}) {\n    conceptId\n    property {\n      id\n      label\n      urn\n    }\n  }\n}\n```\n\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"propertyLinks\": [\n      {\n        \"conceptId\": 3836,\n        \"property\": {\n          \"id\": 7,\n          \"label\": \"brand\",\n          \"urn\": \"urn:edm-se:em:core:pr:brand\"\n        }\n      },\n      ...\n      {\n        \"conceptId\": 3836,\n        \"property\": {\n          \"id\": 945,\n          \"label\": \"Zoom Level\",\n          \"urn\": \"urn:edm-se:em:core:pr:zoom_level\"\n        }\n      }\n    ]\n  }\n}\n```\n\n## appContext\n\nThis query retrieves the full appContext (ToponodeContext) for a thing\n\n### Arguments\n\n* `thingId` : the ID of the thing for the appContext\n* `includeCurrentThing` : an optional boolean indicating whether the thing itself should be returned, or just the nodes above it. If not specified, the value is `false`.\n\n### Behavior\nReturn the appContext for a thing. Examples of appContext :\n\n * For a tenant: the appContext is empty\n * For a region: the appContext contains the tenant\n * For a site: the appContext contains the tenant, and a region if there is one\n * For a toponode thing: the parents of a thing, including the tenant and all the toponodes\n * For a device: the parents of a thing, including the tenant and all the toponodes\n\n\n### Deprecation notice\n\nThe following fields are deprecated and should not be used anymore. The default value is `null`: \n\n* `Name`\n* `Label`\n* `Value`\n\nThey will be removed in a future release\n\n\n### Examples\n\n#### appContext for a site below a region\n\n```graphql title=\"Graphql Query\"\nquery getAppContext {\n  __typename\n  appContext(thingId: 87301) {\n    id\n    type\n    urn\n  }\n}\n```\n\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"__typename\": \"Query\",\n    \"appContext\": [\n      {\n        \"id\": 87293,\n        \"type\": \"TENANT\",\n        \"urn\": \"urn:edm-se:em:core:pr:tenant\"\n      },\n      {\n        \"id\": 87295,\n        \"type\": \"ID\",\n        \"urn\": \"urn:edm-se:em:core:pr:region\"\n      }\n    ]\n  }\n}\n```\n\n## slot\n\nThe slot query is designed to return a paginated view of the slots\n\n### Arguments\n\n* `skip` & `take` : integers to paginate the results; `take` is the number of results to return, `skip` is the number of results to skip - ***optional***\n* `where` : type EMCP_SlotFilterInput : this allows advanced filtering capabilities - ***optional***\n* `order` : type [EMCP_SlotSortInput!] : this allows sorting capabilities - ***optional***\n\n### Behavior\nReturns the slots (and allows projection to other entities) accessible by any current user\n\n### Examples\n\n#### Gets all the slots from one thing\n\n```graphql title=\"Graphql Query\"\nquery slots($where: EMCP_SlotFilterInput) {\n  slots(where: $where) {\n    items {\n      uuid\n      handle\n      thingId\n    }\n  }\n}\n```\n\n```json title=\"Graphql variables\"\n{\n  \"where\": {\n    \"thingId\": {\n      \"eq\": 263156\n    }\n  }\n}\n```\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"slots\": {\n      \"items\": [\n        {\n          \"uuid\": \"9c26689c3a3a4712b2fc15b16d641fa3\",\n          \"handle\": \"ION:0c22f8a1-3427-4629-8edf-efef906927fe\",\n          \"thingId\": 263156\n        },\n        {\n          \"uuid\": \"a15177bd452b40b2908b97a413569490\",\n          \"handle\": \"ION:6b8e817b-c010-41c7-8426-5ffd4d0ca003\",\n          \"thingId\": 263156\n        },\n        {\n          \"uuid\": \"aeebf20851a04122b0fad4d9542364ad\",\n          \"handle\": \"ION:e49dcddd-ef10-4178-a643-0c08d27eeed4\",\n          \"thingId\": 263156\n        }\n      ]\n    }\n  }\n}\n```\n\n## thing\n\nThe thing query is designed to return a paginated view of things\n\n### Arguments\n\n* `appContext` : an Array of `EMCP_TopoNodeContextInput` to filter the results by using the topology - ***optional***\n* `skip` & `take` : integers to paginate the results; `take` is the number of results to return, `skip` is the number of results to skip - ***optional***\n* `includeAllParents` : Boolean (defaults to false) adds the parent of the thing (from the appContext) if the appContext is used - ***optional***\n* `includeLeafDevice` : Boolean (defaults to false) adds the leaf device to the results - ***optional***\n* `where` : type EMCP_ThingFilterInput : allows the advanced filtering capabilities - ***optional***\n* `order` : type [EMCP_ThingSortInput!] : allows the sorting capability - ***optional***\n\n### Behavior\nReturn things (and allows projection to other entities) accessible by any current user\n\n### Examples\n\n#### Retrieves all things of a single type\n\n```graphql title=\"Graphql Query\"\nquery getThingByConcept($appContext: [EMCP_TopoNodeContextInput], $conceptUrn:String) {\n  things(appContext: $appContext, where: {concept: {urn: {eq: $conceptUrn}}}) {\n    items {\n      id\n      name\n      label\n      pvalues(where: {or: [{pfval: {neq: null}}, {psval: {neq: null}}, {pival: {neq: null}}]}) {\n        property {\n          label\n        }\n        pfval\n        pival\n        psval\n      }\n    }\n  }\n}\n```\n\n```json title=\"Graphql variables\"\n{\n  \"appContext\":[\n    {\"id\":<TENANTID>,\"type\":\"TENANT\",\"urn\":\"urn:edm-se:em:core:pr:tenant\"}\n  ],\n  \"conceptUrn\": \"<conceptURN>\"\n}\n```\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"things\": {\n      \"items\": [\n        {\n          \"id\": 87295,\n          \"name\": \"Canada\",\n          \"label\": \"Canada\",\n          \"pvalues\": [\n            {\n              \"property\": {\n                \"label\": \"Criticality\"\n              },\n              \"pfval\": null,\n              \"pival\": 1099,\n              \"psval\": null\n            },\n            {\n              \"property\": {\n                \"label\": \"description\"\n              },\n              \"pfval\": null,\n              \"pival\": null,\n              \"psval\": \"\"\n            }\n          ]\n        },\n        {\n          \"id\": 88040,\n          \"name\": \"Switzerland\",\n          \"label\": \"Switzerland\",\n          \"pvalues\": [\n            {\n              \"property\": {\n                \"label\": \"Criticality\"\n              },\n              \"pfval\": null,\n              \"pival\": 1098,\n              \"psval\": null\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n#### Retrieves things associated to a particular gateway\n\n```graphql title=\"Graphql Query\"\nquery getThingByParent($parentId: Int) {\n  things(where: {pvalues: {some: {pival: {eq: $parentId}}}}) {\n    items {\n      id\n      name\n      label\n      pvalues(where: {or: [{pfval: {neq: null}}, {psval: {neq: null}}, {pival: {neq: null}}]}) {\n        property {\n          label\n        }\n        pfval\n        pival\n        psval\n      }\n    }\n  }\n}\n```\n\n```json title=\"Graphql variables\"\n{\n  \"parentId\": 87351\n}\n```\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"things\": {\n      \"items\": [\n        {\n          \"id\": 87352,\n          \"name\": \"c5e7c94d-598a-464e-9df2-b838b0d9a439\",\n          \"label\": \"Keating.Elevator\",\n          \"pvalues\": [\n            {\n              \"property\": {\n                \"label\": \"Zoom Level\"\n              },\n              \"pfval\": null,\n              \"pival\": 10,\n              \"psval\": null\n            },\n            {\n              \"property\": {\n                \"label\": \"Latitude\"\n              },\n              \"pfval\": 45.498681,\n              \"pival\": null,\n              \"psval\": null\n            },\n            {\n              \"property\": {\n                \"label\": \"Gateway\"\n              },\n              \"pfval\": null,\n              \"pival\": 87351,\n              \"psval\": null\n            },\n            {\n              \"property\": {\n                \"label\": \"is enabled\"\n              },\n              \"pfval\": null,\n              \"pival\": 1,\n              \"psval\": null\n            },\n            {\n              \"property\": {\n                \"label\": \"Site\"\n              },\n              \"pfval\": null,\n              \"pival\": 87297,\n              \"psval\": null\n            },\n            {\n              \"property\": {\n                \"label\": \"Criticality\"\n              },\n              \"pfval\": null,\n              \"pival\": 1098,\n              \"psval\": null\n            },\n            {\n              \"property\": {\n                \"label\": \"family\"\n              },\n              \"pfval\": null,\n              \"pival\": null,\n              \"psval\": \"Elevator\"\n            },\n            {\n              \"property\": {\n                \"label\": \"serial number\"\n              },\n              \"pfval\": null,\n              \"pival\": null,\n              \"psval\": \"PC-0708B329-11\"\n            },\n            {\n              \"property\": {\n                \"label\": \"model\"\n              },\n              \"pfval\": null,\n              \"pival\": null,\n              \"psval\": \"ComPact NSX\"\n            },\n            {\n              \"property\": {\n                \"label\": \"Longitude\"\n              },\n              \"pfval\": -73.6459,\n              \"pival\": null,\n              \"psval\": null\n            },\n            {\n              \"property\": {\n                \"label\": \"Region\"\n              },\n              \"pfval\": null,\n              \"pival\": 87295,\n              \"psval\": null\n            }\n          ]\n        },\n    ...\n    }\n  }\n```\n\n## tenants\nShortcut on the thing query to get only the list of accessible tenants\n\n### Arguments\nNone\n\n### Examples\n```graphql title=\"Graphql Query\"\nquery getTenants{\n  tenants {\n    id\n    label\n  }\n}\n```\n\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"tenants\": [\n      {\n        \"id\": 87275,\n        \"label\": \"ACME Inc\"\n      },\n      {\n        \"id\": 87293,\n        \"label\": \"Mindt Chocolates\"\n      },\n      {\n        \"id\": 167623,\n        \"label\": \"Test Tenant QA\"\n      }\n    ]\n  }\n}\n```\n\n## hierarchy\n\nThe hierarchy query is designed to return the Thing data showing the parent-child relationship between them.\n\n\n### Arguments\n* `mode`: enum (`ENERGY`, `PHYSICAL`, `COMMUNICATION`, `BILLING`, `EQUIPMENT`) to specify which type of hierarchy is wanted\n* `appContext`: an Array of `ÈMCP_TopoNodeContextInput` to filter the results by topology\n* `includeAllParents`: Boolean (default set to false) add the parent of the thing (from appContext) if appContext is used - ***optional***\n* `where`: type EMCP_HierarchyFilterInput: allows advanced filtering capabilities - ***optional***\n\n### Behavior\nReturn things (and allows projection to other entities) accessible by the current user, with 2 or more fields:\n* `level`: \n  * the level from toponode: 0 is for Region, 1 is for Site, empty if it is a product\n  * especially for EQUIPMENT mode, the level starting from 0 for the root returned item and is increased for children.\n* `parent`: the parent thing ID\n\nIf the nodelink is set to `CONTAINS` or `EXTENDS` it will be considered a Parent/Child relationship for the `PHYSICAL`|`EQUIPMENT` hierarchy\nie : it will modify the parent extract from toponode and get the one from the nodelink\n\n### Hierarchy mode\n\n#### Physical\n* Kinds of thing returned:\n  * Thing with ConceptKind: PRODUCT\n    * Exceptions:\n      * Gateway\n      * LeafNode\n  * Thing with ConceptKind: EQUIPEMENT\n  * Toponodes (Region, Site, Building, Floor, Area, Space, Production Line, Zone, PanelBoard)\n* How Parent/Child relationship is computed: \n  * The Parent will be the lowest level of all the toponodes defined in the thing properties\n\n#### Energy\n* Kinds of thing returned:\n  * Thing with a LOAD linked to them with a NodelinkKind `Performs` or `Measure`\n  * Toponodes (Region, Site, Building, Floor, Area, Space, Production Line, Zone, PanelBoard)\n* How Parent/Child relationship is computed :\n  * For toponodes: The Parent will be the lowest level of all the toponodes, defined in the thing properties\n  * For other things: Parent will be the parent of the linked LOAD thing\n  \n#### Communication\n* Kind of thing returned:\n  * Thing with ConceptKind: PRODUCT and has the gateway ID property\n  * Gateway\n  * Toponodes (Region, Site, Building, Floor, Area, Space, Production Line, Zone, PanelBoard)\n* How Parent/Child relationship is computed:\n  * For toponodes: The Parent will be the lowest level of all the toponodes defined in the thing properties\n  * For gateway: The Parent will be the lowest level of all the toponodes defined in the thing properties\n  * For other PRODUCT: The Parent will be the gateway targeted by the gateway ID property\n\n#### Billing\n* Kind of thing returned:\n  * Toponodes (Region, Site, Building, Floor, Area, Space, Production Line, Zone, PanelBoard)\n  * Products with a \"bill_run\" concept\n* How Parent/Child relationship is computed: \n  * The Parent will be the lowest level of all the toponodes defined in the thing properties\n\n#### Equipment\n* Kinds of thing returned:\n  * Toponodes (Region, Site, Building, Floor, Area, Space, Production Line, Zone, PanelBoard)\n  * Thing with ConceptKind: PRODUCT\n    * Exceptions:\n      * Gateway\n      * LeafNode\n  * Thing with ConceptKind: EQUIPEMENT\n  * Thing with Concept equals to equipment indicator (urn:edm-se:em:core:oc:indicator) \n* How Parent/Child relationship is computed: \n  * For toponodes, use the thing properties to compute the hierarchy,\n  * For products and equipment, use the nodelinks of kind: CONTAINS, EXTENDS,\n  * For indicators, use the nodelinks of kind: PERFORMS.\n\n### Examples\n\n#### Get physical hierarchy\n\n\n```graphql title=\"Graphql Query\"\nquery getPhysicalHierarchy($appContext: [EMCP_TopoNodeContextInput]) {\n  hierarchy(appContext: $appContext, mode: PHYSICAL) {\n    level\n    parentId\n    thing {\n      id\n      name\n      label\n    }\n  }\n}\n```\n\n```json title=\"Graphql variables\"\n {\n  \"appContext\":[\n    {\"id\":87293,\"type\":\"TENANT\",\"urn\":\"urn:edm-se:em:core:pr:tenant\"}\n  ]\n}\n```\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"hierarchy\": [\n      {\n        \"level\": 0,\n        \"parentId\": null,\n        \"thing\": {\n          \"id\": 87293,\n          \"name\": \"243f127d-9b73-4cc0-a656-ceee67c79d0d\",\n          \"label\": \"Mindt Chocolates\"\n        }\n      },\n      {\n        \"level\": 1,\n        \"parentId\": 87293,\n        \"thing\": {\n          \"id\": 87295,\n          \"name\": \"Canada\",\n          \"label\": \"Canada\"\n        }\n      },\n      {\n        \"level\": 2,\n        \"parentId\": 87295,\n        \"thing\": {\n          \"id\": 87297,\n          \"name\": \"73f2b653-5e40-401e-8399-34e10149ad59\",\n          \"label\": \"Montréal Factory\"\n        }\n      },\n      {\n        \"level\": 2,\n        \"parentId\": 87295,\n        \"thing\": {\n          \"id\": 87299,\n          \"name\": \"Québec City Factory\",\n          \"label\": \"Québec City Factory\"\n        }\n      },\n      ...\n    ]\n  }\n}  \n```\n\n#### Get physical hierarchy with equipment\n\nConsider the following topology:\n* Building: Test Building 4\n  * Device: Test Gateway 2\n    * Panel: Test Panel 3\n     * Device: ElectricDevice 1\n     * Device: Test Temp Sensor1\n     * Device: Test Temp Sensor2\n  * Equipment Column 1\n    * nodelink CONTAINS Equipment CircuitBreaker\n  * Equipment CircuitBreaker 1\n    * nodelink CONTAINS ElectricDevice 1\n    * nodelink EXTENDS Equipment Extension\n    * nodelink PERFORMS Indicator Temperature 1\n  * Equipment ExtensionThermalMonitoring 1\n    * nodelink PERFORMS Test Temp Sensor1\n  * Indicator Temperature 1\n    * nodelink PERFORMS Test Temp Sensor2\n\nWhen the “EQUIPMENT” filter is used\nThen, the following hiearchy will be returned:\n* Building: Test Building 4\n  * Indicator Temperature 1\n  * Equipment Column 1\n    * Equipment CircuitBreaker 1\n      * ElectricDevice 1\n      * Equipment ExtensionThermalMonitoring 1\n  * Test Panel 3\n    * TempSensor 1\n    * TempSensor 2\n\n```graphql title=\"Graphql Query\"\nquery getPhysicalHierarchy($appContext: [EMCP_TopoNodeContextInput]) {\n  hierarchy(appContext: $appContext, mode: PHYSICAL) {\n    level\n    parentId\n    thing {\n      id\n      name\n      label\n    }\n  }\n}\n```\n\n```json title=\"Graphql variables\"\n {\n  \"appContext\":[\n    {\"id\":21,\"type\":\"TENANT\",\"urn\":\"urn:edm-se:em:core:pr:tenant\"},\n    {\"id\":182,\"type\":\"ID\",\"urn\":\"urn:edm-se:em:core:pr:region\"},\n    {\"id\":184,\"type\":\"ID\",\"urn\":\"urn:edm-se:em:core:pr:site\"}\n  ]\n}\n```\n```json title=\"Graphql result\"\n[\n  {\n    \"Level\": 0,\n    \"Thing\": {\n      \"ConceptId\": 0,\n      \"CreateDate\": \"0001-01-01T00:00:00+00:00\",\n      \"Id\": 21,\n      \"Label\": \"Mindt Chocolates\",\n      \"UpdateDate\": \"0001-01-01T00:00:00+00:00\"\n    }\n  },\n  {\n    \"Level\": 1,\n    \"ParentId\": 21,\n    \"Thing\": {\n      \"ConceptId\": 0,\n      \"CreateDate\": \"0001-01-01T00:00:00+00:00\",\n      \"Id\": 182,\n      \"Label\": \"Test Region\",\n      \"UpdateDate\": \"0001-01-01T00:00:00+00:00\"\n    }\n  },\n  {\n    \"Level\": 2,\n    \"ParentId\": 182,\n    \"Thing\": {\n      \"ConceptId\": 0,\n      \"CreateDate\": \"0001-01-01T00:00:00+00:00\",\n      \"Id\": 184,\n      \"Label\": \"Test Site\",\n      \"UpdateDate\": \"0001-01-01T00:00:00+00:00\"\n    }\n  },\n  {\n    \"Level\": 3,\n    \"ParentId\": 184,\n    \"Thing\": {\n      \"ConceptId\": 0,\n      \"CreateDate\": \"0001-01-01T00:00:00+00:00\",\n      \"Id\": 186,\n      \"Label\": \"Test Building 1\",\n      \"UpdateDate\": \"0001-01-01T00:00:00+00:00\"\n    }\n  },\n  {\n    \"Level\": 3,\n    \"ParentId\": 184,\n    \"Thing\": {\n      \"ConceptId\": 0,\n      \"CreateDate\": \"0001-01-01T00:00:00+00:00\",\n      \"Id\": 188,\n      \"Label\": \"Test Building 2\",\n      \"UpdateDate\": \"0001-01-01T00:00:00+00:00\"\n    }\n  }\n] \n```\n\n## assetInfo\n\nThe asset info query is used when a client is looking for an asset or gateway before adding it to EMCP.\n\n### Arguments\n\n* `appContext`: an array of `EMCP_TopoNodeContextInput` to filter the result by topology - ***required***\n* `type`: enum (`ASSET`, `B_PAS`, `SITE_SERVER`) to specify the kind of assets the client is expecting, it's the only way to determine the correct kind of gateway - ***required***\n* `commercialReference`: string to specify the commercial reference - ***optional***\n* `serialNumber`: string to specify the serial number - ***required***\n\n### Behavior\n\nThe assetInfo query looks up and returns the list of assets based on the their commissioned status.\n\n#### Commissioned assets\n\nWhen the asset(s) are already commissioned on EMCP, the query will return only the **accessible asset(s)** via the `commissionedAssets` field.\n\n#### Uncommissioned assets\n\nWhen the asset is not commissioned yet, an internal lookup logic is applied, which is dependant on the type of the asset.\n\n#### Types of `ASSETs`\n\nWhen the `serialNumber` or the `serialNumber` + `commercialReference` are  valid references, the query returns:\n\n* the `asset` is part of `uncommissionedAssets` with the basic information.\n\n* the topology from Cloud Commissioning (if one exists) in the `hierarchy` is part of `uncommissionedAssets`.\n\n:::note\nThe query returns an empty array when the device is not found or is inaccessible.\n:::\n\n#### Type `B_PAS`\n\nWhen a device with the given serial number is available **in ETP**, the query returns:\n\n* the `asset` is part of `uncommissionedAssets` with basic information retrieved from ETP, and from the commercial reference\n\n* the topology from Cloud Commissioning (if one exists) in the `hierarchy` part of `uncommissionedAssets`\n\n:::note\nThe query returns `NOT_FOUND` when a device is not found.\nThe query returns `NOT_ACCESSIBLE` when a device has already been associated.\n:::\n\n#### Type `SITE_SERVER`\n\nWhen a site server with the given serial number is available on Power Solution APIs, the query returns:\n\n* the `asset` is part of `uncommissionedAssets` with the basic information retrieved from the topology\n* the topology in the `hierarchy` is part of `uncommissionedAssets`\n\n:::note\nThe query returns `NOT_FOUND` when a device is not found.\n:::\n\n:::caution\nThe fields `asset` and `basicAsset` are now deprecated, please use the new fields called `commissionedAssets` and `uncommissionedAssets`.\n:::\n\n### Examples\n\n#### Asset info query\n\n```graphql title=\"Graphql Query\"\nquery GetAssetInfo(\n  $appContext: [EMCP_TopoNodeContextInput]!\n  $serialNumber: String!\n  $commercialReference: String\n  $type: EMCP_AssetType!\n) {\n  assetInfo(\n    appContext: $appContext\n    type: $type\n    serialNumber: $serialNumber\n    commercialReference: $commercialReference\n  ) {\n    commissionedAssets {\n      id\n      handle\n      tenantId\n      conceptId\n      label\n      name\n      concept {\n        id\n        name\n        label\n      }\n    }\n    uncommissionedAssets {\n      asset {\n        label\n        id\n        handle\n        conceptUrn\n        properties {\n          encoding\n          floatValue\n          integerValue\n          stringValue\n          urn\n        }\n      }\n      hierarchy {\n        type\n        id\n        label\n        panelId\n        gatewayId\n      }\n    }\n  }\n}\n```\n\n```json title=\"Graphql variables\"\n{\n  \"appContext\": [{\"id\": <TENANTID>, \"type\": \"TENANT\", \"urn\": \"urn:edm-se:em:core:pr:tenant\"}],\n  \"serialNumber\": \"SN1023456\",\n  \"type\": \"ASSET\"\n}\n```\n\n#### Asset found in DB\n\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"assetInfo\": {\n      \"commissionedAssets\": [{\n        \"id\": 156996,\n        \"handle\": \"f2f7b215-1e13-4cee-b9eb-b854093849bf\",\n        \"tenantId\": 87275,\n        \"conceptId\": 3530,\n        \"label\": \"My PowerHeatTag\",\n        \"name\": \"8c4418e6-5c61-40f2-a9dc-023f88aa9add\",\n        \"concept\": {\n          \"id\": 3530,\n          \"name\": \"sensor\",\n          \"label\": \"sensor\"\n        }\n      }],\n      \"uncommissionedAssets\": []\n    }\n  }\n}\n```\n\n#### Asset not found in DB\n\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"assetInfo\": {\n      \"commissionedAssets\": [],\n      \"uncommissionedAssets\":  [{\n        \"asset\": {\n          \"label\": null,\n          \"id\": 0,\n          \"handle\": null,\n          \"conceptUrn\": \"urn:edm-se:em:core:pc:sensor\",\n          \"properties\": [\n            {\n              \"encoding\": \"STRING\",\n              \"floatValue\": null,\n              \"integerValue\": null,\n              \"stringValue\": \"Htag20203441C0010AAA\",\n              \"urn\": \"urn:edm-se:em:core:pr:serial_number\"\n            },\n            ...\n          ]\n        },\n        \"hierarchy\": null\n      }]\n    }\n  }\n}\n```\n\n#### Gateway with hierarchy\n\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"assetInfo\": {\n      \"commissionedAssets\": [],\n      \"uncommissionedAssets\":  [{\n        \"asset\": {\n          \"label\": \"urn:dev:ops:112143510002\",\n          \"id\": 2,\n          \"handle\": \"CC:FKCC44d65307-ad6a-4d05-af86-dd78f7e8949c:FKCC44d65307-ad6a-4d05-af86-dd78f7e89400\",\n          \"conceptUrn\": \"urn:edm-se:em:core:pc:gateway\",\n          \"properties\": [\n            {\n              \"encoding\": \"STRING\",\n              \"floatValue\": null,\n              \"integerValue\": null,\n              \"stringValue\": \"112143510002\",\n              \"urn\": \"urn:edm-se:em:core:pr:serial_number\"\n            },\n            {\n              \"encoding\": \"STRING\",\n              \"floatValue\": null,\n              \"integerValue\": null,\n              \"stringValue\": \"PAS600T\",\n              \"urn\": \"urn:edm-se:em:core:pr:commercial_reference\"\n            },\n            {\n              \"encoding\": \"STRING\",\n              \"floatValue\": null,\n              \"integerValue\": null,\n              \"stringValue\": \"B-PAS\",\n              \"urn\": \"urn:edm-se:em:core:pr:range\"\n            }\n          ]\n        },\n        \"hierarchy\": [\n          {\n            \"type\": \"PANEL\",\n            \"id\": 1,\n            \"label\": \"Panel Demo\",\n            \"panelId\": null,\n            \"gatewayId\": null\n          },\n          {\n            \"type\": \"GATEWAY\",\n            \"id\": 2,\n            \"label\": \"B-PAS Panel Demo\",\n            \"panelId\": 1,\n            \"gatewayId\": null\n          },\n          {\n            \"type\": \"DEVICE\",\n            \"id\": 3,\n            \"label\": \"PowerTag PT00017\",\n            \"panelId\": 1,\n            \"gatewayId\": 2\n          },\n          {\n            \"type\": \"DEVICE\",\n            \"id\": 4,\n            \"label\": \"PowerTag PT00029\",\n            \"panelId\": 1,\n            \"gatewayId\": 2\n          },\n          {\n            \"type\": \"DEVICE\",\n            \"id\": 5,\n            \"label\": \"SM6 3\",\n            \"panelId\": 1,\n            \"gatewayId\": 2\n          },\n          {\n            \"type\": \"DEVICE\",\n            \"id\": 6,\n            \"label\": \"ASCO 7000 4\",\n            \"panelId\": 1,\n            \"gatewayId\": 2\n          },\n          {\n            \"type\": \"DEVICE\",\n            \"id\": 7,\n            \"label\": \"Powertag PT00026\",\n            \"panelId\": 1,\n            \"gatewayId\": 2\n          }\n        ]\n      }]\n    }\n  }\n}\n```\n\n## alarmInstances\n\nReturns alarm instances by the input parameters, user's assignments, subscriptions, and notification preferences. \n\n### Arguments\n\n* `appContext!`: the execution context.\n* `skip` / `take`: `Int`s specifying pagination of the data.\n* `hierarchyMode`: optional hierarchy mode to filter the returned data. Default value `PHYSICAL`. \n* `enableNotificationPreferences`: an optional `Boolean` indicating whether to apply the user's notification preferences filter to the returned data. Default value `false`.\n\n### Behavior\n\n- If a user has no required permissions to view alarms, the response is an empty array.\n\n- If a user has no required privileges to access the requested organization topology, the response is an empty array.\n\n- If there are no alarm instances available to the user via alarm categories, the response is an empty array. This is the basic alarm category available for all registered users. More alarm categories are provided via module subscriptions. \n\n- If the input parameter `enableNotificationPreferences` is set to `true`, the result is filtered by the user's notification preferences. Otherwise, a user's notification preferences are ignored, and the request processing continues to the next stage. \n\n- If the input parameter `appContext` is set to `null` or an empty array and `enableNotificationPreferences` is set to `true`, the response will be a `BAD_INPUT` error.\n\n### AlarmPriority Enum consideration and backward compatibility\nThe AlarmPriority field has been moved from alarmInstance to alarmOccurence, and will be removed later (see Deprecation Section). The same is true for the value GREEN, YELLOW, RED.\nThe behaviour is :\n* AlarmInstance.AlarmPriority\n  * NONE, LOW, and GREEN are considered the same\n  * YELLOW and MEDIUM are considered the same\n  * RED and HIGH are considered the same\n* AlarmOccurence.AlarmPriority\n  * NONE\n  * LOW and GREEN are considered the same\n  * YELLOW and MEDIUM are considered the same\n  * RED and HIGH are considered the same\n\nThe enum values will differ depending on whether you are on the alarmInstance or alarmOccurence object :\n* alarmInstance : enum value will always be GREEN, YELLOW or RED\n* alarmOccurence : enum value will always be NONE, LOW, MEDIUM or HIGH\n\n### Example\n\nThe following GraphQL query returns alarm instances for the organization's communication hierarchy. \n\n- *scoped* by the user's assignments, subscriptions, and notification preferences. \n- *projects* alarm instance fields, concept and their occurrences. \n- *filters* to a one-day time-range.\n- *sorts* in the descending order.\n\n#### Query\n \n```graphql title=\"GraphQL Query\"\nquery alarmInstances(\n  $appContext: [EMCP_TopoNodeContextInput!]!\n  $hierarchyMode: EMCP_HierarchyMode\n  $enableNotificationPreferences: Boolean\n  $startTime: DateTime!\n  $endTime: DateTime!\n) {\n  alarmInstances(\n    appContext: $appContext\n    hierarchyMode: $hierarchyMode\n    enableNotificationPreferences: $enableNotificationPreferences\n    where: {\n      and: [\n        { alarmOccurrences: { some: { startTime: { gte: $startTime } } } }\n        { alarmOccurrences: { some: { endTime: { lte: $endTime } } } }\n      ]\n    }\n    order: { lastUpdated: DESC }\n  ) {\n    totalCount\n    items {\n      id\n      lastUpdated\n      tsMath\n      thingId\n      alarmModel\n      alarmState\n      alarmPriority\n      alarmFamily\n      alarmControl\n      alarmConcept {\n        alarmEventConceptCategory {\n          name\n        }\n      }\n      alarmOccurrences(\n        where: {\n          and: [\n            { startTime: { gte: $startTime } }\n            { endTime: { lte: $endTime } }\n          ]\n        }\n      ) {\n        id\n        startTime\n        endTime\n      }\n    }\n  }\n}\n```\n\n#### Variables\n\n```json title=\"Graphql variables\"\n{\n  \"appContext\": [\n    {\n      \"id\": 87293,\n      \"label\": \"Mindt Chocolates\",\n      \"urn\": \"urn:edm-se:em:core:pr:tenant\",\n      \"type\": \"TENANT\"\n    }\n  ],\n  \"hierarchyMode\": \"COMMUNICATION\",\n  \"enableNotificationPreferences\": true,\n  \"startTime\": \"2022-01-01T00:00:00.000Z\",\n  \"endTime\": \"2022-01-02T00:00:00.000Z\"\n}\n```\n\n#### Result\n\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"alarmInstances\": {\n      \"totalCount\": 75,\n      \"items\": [\n        {\n          \"id\": 14426,\n          \"lastUpdated\": \"2022-02-21T22:01:54.966Z\",\n          \"tsMath\": \"INPUT_BASED\",\n          \"thingId\": 87354,\n          \"alarmModel\": \"ALM_WITH_ACK\",\n          \"alarmState\": \"UNACK\",\n          \"alarmPriority\": \"YELLOW\",\n          \"alarmFamily\": null,\n          \"alarmControl\": \"NA\",\n          \"alarmConcept\": {\n            \"alarmEventConceptCategory\": {\n              \"name\": \"Diagnostics\"\n            }\n          },\n          \"alarmOccurrences\": [\n            {\n              \"id\": 91923,\n              \"startTime\": \"2022-01-01T07:23:23.617Z\",\n              \"endTime\": \"2022-01-01T07:34:30.213Z\"\n            },\n            {\n              \"id\": 91954,\n              \"startTime\": \"2022-01-01T17:34:33.724Z\",\n              \"endTime\": \"2022-01-01T17:39:52.403Z\"\n            }\n          ]\n        },\n        ...\n      ]\n  }\n}\n```\n\n## alarmOccurrences\n\nReturns alarm occurrences by the input parameters, user's assignments, subscriptions and notification preferences. \n\n### Arguments\n\n* `appContext!`: the execution context.\n* `skip` / `take` : `Int`s specifying pagination of the data.\n* `hierarchyMode`: optional hierarchy mode to filter the returned data.  Default value `PHYSICAL`.\n* `enableNotificationPreferences` : an optional `Boolean` indicating whether to apply the user's notification preferences filter to the returned data. Default value `false`.\n\n### Behavior\n\n- If user has no required permissions to view alarms, the response is an empty array.\n\n- If the user has no required privileges to access the requested organization topology, the response is an empty array.\n\n- If input parameter `enableNotificationPreferences` set to `true`, the result is filtered by the user's notification preferences. Otherwise, user's notification preferences are ignored. \n\n- If input parameter `appContext` is `null` or an empty array and `enableNotificationPreferences` set to `true`, the response is `BAD_INPUT` error.\n\n### AlarmPriority Enum consideration and backward compatibility\nAlarmPriority field has moved from alarmInstance to alarmOccurence, and will be removed later (see Deprecation Section),\nsame for value GREEN, YELLOW, RED.\nThe behaviour is :\n* AlarmInstance.AlarmPriority\n    * NONE, LOW, GREEN are considered the same\n    * YELLOW and MEDIUM are considered the same\n    * RED and HIGH are considered the same\n* AlarmOccurence.AlarmPriority\n    * NONE\n    * LOW, GREEN are considered the same\n    * YELLOW and MEDIUM are considered the same\n    * RED and HIGH are considered the same\n\nThe enum values will differ depending on whether you are on the alarmInstance or alarmOccurence object :\n* alarmInstance : enum value will always be GREEN, YELLOW, RED\n* alarmOccurence : enum value will always be NONE, LOW, MEDIUM, HIGH\n\n### Example\n\nThe following GraphQL query returns alarm occurrences for the organization's communication hierarchy. \n- *scoped* by user's assignments, subscriptions and notification preferences. \n- *projects* alarm occurrence properties and their instances. \n- *filters* to a one-day time-range.\n- *sorts* in the descending order.\n\n#### Query\n\n```graphql title=\"GraphQL Query\"\nquery alarmOccurrences(\n  $appContext: [EMCP_TopoNodeContextInput!]!\n  $hierarchyMode: EMCP_HierarchyMode\n  $enableNotificationPreferences: Boolean\n  $startTime: DateTime!\n  $endTime: DateTime!\n) {\n  alarmOccurrences(\n    appContext: $appContext\n    hierarchyMode: $hierarchyMode\n    enableNotificationPreferences: $enableNotificationPreferences\n    where: {\n      and: [\n        { startTime: { gte: $startTime } }, \n        { endTime: { lte: $endTime } }\n      ]\n    }\n    order: { lastUpdated: DESC }\n  ) {\n    totalCount\n    items {\n      id\n      alarmState\n      lastUpdated\n      startTime\n      endTime\n      measures\n      alarmPriority\n      alarmOccurrencePValues {\n        pfval\n        psval\n        pival\n        pTsVal\n        property {\n          name\n          urn\n          encodingType\n        }\n      }\n      alarmInstance {\n        id\n        lastUpdated\n        tsMath\n        thingId\n        alarmModel\n        alarmState\n        alarmPriority\n        alarmFamily\n        alarmControl\n      }\n    }\n  }\n}\n\n```\n\n#### Variables\n\n```json title=\"Graphql variables\"\n{\n  \"appContext\": [\n    {\n      \"id\": 87293,\n      \"label\": \"Mindt Chocolates\",\n      \"urn\": \"urn:edm-se:em:core:pr:tenant\",\n      \"type\": \"TENANT\"\n    }\n  ],\n  \"hierarchyMode\": \"COMMUNICATION\",\n  \"enableNotificationPreferences\": true,\n  \"startTime\": \"2022-01-01T00:00:00.000Z\",\n  \"endTime\": \"2022-01-02T00:00:00.000Z\"\n}\n```\n\n#### Result\n\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"alarmOccurrences\": {\n      \"totalCount\": 59,\n      \"items\": [\n        {\n          \"id\": 91896,\n          \"alarmState\": \"RTNUN\",\n          \"lastUpdated\": \"2022-01-01T00:31:46.016Z\",\n          \"startTime\": \"2022-01-01T00:31:05.264Z\",\n          \"endTime\": \"2022-01-01T00:31:46.016Z\",\n          \"measures\": null,\n          \"alarmOccurrencePValues\": [\n            {\n              \"pfval\": null,\n              \"psval\": \"61.5% Nominal Voltage\",\n              \"pival\": null,\n              \"pTsVal\": null,\n              \"property\": {\n                \"name\": \"detail text\",\n                \"urn\": \"urn:edm-se:em:core:pr:detail_text\",\n                \"encodingType\": \"STRING\"\n              }\n            },\n            {\n              \"pfval\": null,\n              \"psval\": null,\n              \"pival\": null,\n              \"pTsVal\": \"2020-07-08T19:00:45.000Z\",\n              \"property\": {\n                \"name\": \"PQ end time\",\n                \"urn\": \"urn:edm-se:em:core:pr:pq_end_time\",\n                \"encodingType\": \"TIMESTAMP\"\n              }\n            },\n            {\n              \"pfval\": null,\n              \"psval\": null,\n              \"pival\": 1,\n              \"pTsVal\": null,\n              \"property\": {\n                \"name\": \"disturbance direction\",\n                \"urn\": \"urn:edm-se:em:core:pr:disturbance_direction\",\n                \"encodingType\": \"INTEGER\"\n              }\n            },\n            {\n              \"pfval\": 1,\n              \"psval\": null,\n              \"pival\": null,\n              \"pTsVal\": null,\n              \"property\": {\n                \"name\": \"Disturbance Confidence\",\n                \"urn\": \"urn:edm-se:em:core:pr:disturbance_confidence\",\n                \"encodingType\": \"FLOAT\"\n              }\n            }\n          ],\n          \"alarmInstance\": {\n            \"id\": 14544,\n            \"lastUpdated\": \"2022-02-21T12:47:00.784Z\",\n            \"tsMath\": \"INPUT_BASED\",\n            \"thingId\": 87386,\n            \"alarmModel\": \"ALM_WITH_ACK\",\n            \"alarmState\": \"RTNUN\",\n            \"alarmPriority\": \"GREEN\",\n            \"alarmFamily\": null,\n            \"alarmControl\": \"NA\"\n          }\n        },\n        ...\n      ]\n    }\n  }\n}\n```\n\n## alarmOccurrencesSummary\n\nReturns alarm occurrence counts, binned by time range and interval, and by active/inactive and acknowledged/unacknowledged flags.\n\n### Arguments\n* `appContext!` : an Array of `EMCP_TopoNodeContextInput` to filter to result by topology.\n* `skip` / `take` : `Int`s specifying pagination of the data.\n* `hierarchyMode` : The kind of hierarchy to aggregate up `EMCP_HierarchyMode`. \n* `startTime!` : a `DateTime` to indicate the inclusive start of the interval.\n* `endTime!` : a `DateTime` to indicate the exclusive end of the interval.\n* `timeZone!` : a `String` to indicate the IANA time zone the data should be aggregated in.\n* `interval!` : an `EMCP_AggregationInterval` indicating the temporal grouping.\n* `alarmPriorityFilter` : an Array of `EMCP_AlarmPriorityType` to return data for. If null, no filter is applied.\n* `alarmStateFilter` : an Array of `EMCP_AlarmStateType` to return data for. If null, no filter is applied.\n* `enableNotificationPreferences` : a `Boolean` indicating whether to apply the user's notification filters to the returned data.\n\n### Example\n\n#### Query\n```graphql title=\"GraphQL Query\"\nquery(\n  $appContext: [EMCP_TopoNodeContextInput!]!\n  $startTime: DateTime!\n  $endTime: DateTime!\n  $timeZone: String!\n  $enableNotificationPreferences: Boolean = false\n  $interval: EMCP_AggregationInterval!\n) {\n  alarmOccurrencesSummary(\n    appContext: $appContext\n    enableNotificationPreferences: $enableNotificationPreferences\n    startTime: $startTime\n    endTime: $endTime\n    timeZone: $timeZone\n    interval: $interval\n  ) {\n    totalCount\n    alarmPrioritySummary {\n      details {\n        acknowledgedCount\n        activeCount\n        inactiveCount\n        unacknowledgedCount\n      }\n    }\n  }\n}\n```\n\n#### Variables\n\n```json title=\"Variables\"\n{\n  \"appContext\": [\n    { \"type\": \"TENANT\", \"id\": 87293, \"urn\": \"urn:edm-se:em:core:pr:tenant\" },\n    { \"type\": \"ID\", \"id\": 87295, \"urn\": \"urn:edm-se:em:core:pr:region\" },\n    { \"type\": \"ID\", \"id\": 87297, \"urn\": \"urn:edm-se:em:core:pr:site\" }\n  ],\n  \"enableNotificationPreferences\": false,\n  \"interval\": \"MONTH\",\n  \"startTime\": \"2021-08-06T00:00:00-04:00\",\n  \"endTime\": \"2021-12-08T12:00:00-05:00\",\n  \"timeZone\": \"America/Vancouver\"\n}\n```\n\n#### Result\n\n```json title=\"Results\"\n{\n  \"data\": {\n    \"alarmOccurrencesSummary\": {\n      \"totalCount\": 5060,\n      \"alarmPrioritySummary\": [\n        {\n          \"details\": {\n            \"acknowledgedCount\": 1175,\n            \"activeCount\": 5,\n            \"inactiveCount\": 2125,\n            \"unacknowledgedCount\": 955\n          }\n        },\n        {\n          \"details\": {\n            \"acknowledgedCount\": 620,\n            \"activeCount\": 0,\n            \"inactiveCount\": 1332,\n            \"unacknowledgedCount\": 712\n          }\n        },\n        {\n          \"details\": {\n            \"acknowledgedCount\": 764,\n            \"activeCount\": 0,\n            \"inactiveCount\": 1598,\n            \"unacknowledgedCount\": 834\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n## binnedAlarmOccurrences\n\nReturns alarm occurrence priority counts binned by time range and interval.\n\n### Arguments\n* `appContext!` : an Array of `EMCP_TopoNodeContextInput` to filter to result by topology.\n* `skip` / `take` : `Int`s specifying pagination of the data.\n* `hierarchyMode` : The kind of hierarchy to aggregate up `EMCP_HierarchyMode`. \n* `startTime!` : a `DateTime` to indicate the inclusive start of the interval.\n* `endTime!` : a `DateTime` to indicate the exclusive end of the interval.\n* `timeZone!` : a `String` to indicate the IANA time zone the data should be aggregated in.\n* `interval!` : an `EMCP_AggregationInterval` indicating the temporal grouping.\n* `alarmPriorityFilter` : an Array of `EMCP_AlarmPriorityType` to return data for. If null, no filter is applied.\n* `alarmStateFilter` : an Array of `EMCP_AlarmStateType` to return data for. If null, no filter is applied.\n* `enableNotificationPreferences` : a `Boolean` indicating whether to apply the user's notification filters to the returned data.\n\n### Example\n\n#### Query\n\n```graphql title=\"GraphQL Query\"\nquery (\n  $appContext: [EMCP_TopoNodeContextInput!]!\n  $interval: EMCP_AggregationInterval!\n  $startTime: DateTime!\n  $endTime: DateTime!\n  $timeZone: String\n  $enableNotificationPreferences: Boolean = false\n) {\n  binnedAlarmOccurrences(\n    appContext: $appContext\n    enableNotificationPreferences: $enableNotificationPreferences\n    interval: $interval\n    startTime: $startTime\n    endTime: $endTime\n    timeZone: $timeZone\n  ) {\n    totalCount\n    items {\n      startTime\n      endTime\n      timeZone\n      priorityCounts {\n        priority\n        count\n      }\n    }\n  }\n}\n```\n\n#### Variables\n\n```json title=\"Variables\"\n{\n  \"appContext\": [\n    { \"type\": \"TENANT\", \"id\": 87293, \"urn\": \"urn:edm-se:em:core:pr:tenant\" },\n    { \"type\": \"ID\", \"id\": 87295, \"urn\": \"urn:edm-se:em:core:pr:region\" },\n    { \"type\": \"ID\", \"id\": 87297, \"urn\": \"urn:edm-se:em:core:pr:site\" }\n  ],\n  \"enableNotificationPreferences\": false,\n  \"interval\": \"MONTH\",\n  \"startTime\": \"2021-08-06T00:00:00-04:00\",\n  \"endTime\": \"2021-12-08T12:00:00-05:00\",\n  \"timeZone\": null\n}\n```\n\n#### Result\n\n```json title=\"Results\"\n{\n  \"data\": {\n    \"binnedAlarmOccurrences\": {\n      \"totalCount\": 5,\n      \"items\": [\n        {\n          \"startTime\": \"2021-08-01T00:00:00.000-04:00\",\n          \"endTime\": \"2021-09-01T00:00:00.000-04:00\",\n          \"timeZone\": \"America/Toronto\",\n          \"priorityCounts\": [\n            { \"priority\": \"GREEN\", \"count\": 357 },\n            { \"priority\": \"YELLOW\", \"count\": 231 },\n            { \"priority\": \"RED\", \"count\": 243 }\n          ]\n        },\n        {\n          \"startTime\": \"2021-09-01T00:00:00.000-04:00\",\n          \"endTime\": \"2021-10-01T00:00:00.000-04:00\",\n          \"timeZone\": \"America/Toronto\",\n          \"priorityCounts\": [\n            { \"priority\": \"GREEN\", \"count\": 563 },\n            { \"priority\": \"YELLOW\", \"count\": 339},\n            { \"priority\": \"RED\", \"count\": 399 }\n          ]\n        },\n        {\n          \"startTime\": \"2021-10-01T00:00:00.000-04:00\",\n          \"endTime\": \"2021-11-01T00:00:00.000-04:00\",\n          \"timeZone\": \"America/Toronto\",\n          \"priorityCounts\": [\n            { \"priority\": \"GREEN\", \"count\": 554 },\n            { \"priority\": \"YELLOW\", \"count\": 359 },\n            { \"priority\": \"RED\", \"count\": 407 }\n          ]\n        },\n        {\n          \"startTime\": \"2021-11-01T00:00:00.000-04:00\",\n          \"endTime\": \"2021-12-01T00:00:00.000-05:00\",\n          \"timeZone\": \"America/Toronto\",\n          \"priorityCounts\": [\n            { \"priority\": \"GREEN\", \"count\": 625 },\n            { \"priority\": \"YELLOW\", \"count\": 315 },\n            { \"priority\": \"RED\", \"count\": 370 }\n          ]\n        },\n        {\n          \"startTime\": \"2021-12-01T00:00:00.000-05:00\",\n          \"endTime\": \"2022-01-01T00:00:00.000-05:00\",\n          \"timeZone\": \"America/Toronto\",\n          \"priorityCounts\": [\n            { \"priority\": \"GREEN\", \"count\": 536 },\n            { \"priority\": \"YELLOW\", \"count\": 319 },\n            { \"priority\": \"RED\", \"count\": 393 }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n## rankedAlarmOccurrences\n\nReturns a list of alarm counts, ranked from highest count to lowest count. In the case of a tie, the ranking is shared by those items.\n\n### Arguments\n* `appContext!` : an Array of `EMCP_TopoNodeContextInput` to filter to result by topology.\n* `skip` / `take` : `Int`s specifying pagination of the data.\n* `hierarchyMode` : The kind of hierarchy to aggregate up `EMCP_HierarchyMode`. \n* `startTime!` : a `DateTime` to indicate the inclusive start of the interval.\n* `endTime!` : a `DateTime` to indicate the exclusive end of the interval.\n* `alarmPriorityFilter` : an Array of `EMCP_AlarmPriorityType` to return data for. If null, no filter is applied.\n* `alarmStateFilter` : an Array of `EMCP_AlarmStateType` to return data for. If null, no filter is applied.\n* `enableNotificationPreferences` : a `Boolean` indicating whether to apply the user's notification filters to the returned data.\n\n### Example\n\n#### Query\n\n```graphql title=\"GraphQL Query\"\nquery (\n  $appContext: [EMCP_TopoNodeContextInput!]!\n  $startTime: DateTime!\n  $endTime: DateTime!\n  $enableNotificationPreferences: Boolean = false\n  $pageSize: Int = 10\n  $offset: Int = 0\n) {\n  rankedAlarmOccurrences(\n    appContext: $appContext\n    enableNotificationPreferences: $enableNotificationPreferences\n    startTime: $startTime\n    endTime: $endTime\n    take: $pageSize\n    skip: $offset\n  ) {\n    totalCount\n    items {\n      ranking\n      count\n      thingId\n      thingLabel\n    }\n  }\n}\n```\n\n#### Variables\n\n```json title=\"Variables\"\n{\n  \"appContext\": [\n    { \"type\": \"TENANT\", \"id\": 87293, \"urn\": \"urn:edm-se:em:core:pr:tenant\" },\n    { \"type\": \"ID\", \"id\": 87295, \"urn\": \"urn:edm-se:em:core:pr:region\" },\n    { \"type\": \"ID\", \"id\": 87297, \"urn\": \"urn:edm-se:em:core:pr:site\" }\n  ],\n  \"enableNotificationPreferences\": false,\n  \"interval\": \"MONTH\",\n  \"startTime\": \"2021-08-06T00:00:00-04:00\",\n  \"endTime\": \"2021-12-08T12:00:00-05:00\",\n  \"timeZone\": null\n}\n```\n\n#### Result\n\n```json title=\"Result\"\n{\n  \"data\": {\n    \"rankedAlarmOccurrences\": {\n      \"totalCount\": 2,\n      \"items\": [\n        {\n          \"ranking\": 1,\n          \"count\": 4610,\n          \"thingId\": 87303,\n          \"thingLabel\": \"Building A\"\n        },\n        {\n          \"ranking\": 2,\n          \"count\": 450,\n          \"thingId\": 87305,\n          \"thingLabel\": \"Building B\"\n        }\n      ]\n    }\n  }\n}\n```\n\n## events\n\nThe event query is designed to return a paginated view of events\n\n### Arguments\n\n* `skip` & `take` : Int to navigate into the pagination - ***optional*** (default page size : 10, max page size : 50)\n* `where` : type EMCP_EventFilterInput : allow advanced filtering capabilities - ***optional***\n* `order` : type array of EMCP_EventSortInput! : allow sorting capabilities - ***optional***\n\n### Behaviour\nReturn events (and capacity to project to others entity) accessible by the current user\n\n### Examples\n\n#### Get all event\n\n```graphql title=\"Graphql Query\"\nquery getAllEvent {\n  events {\n    items {\n      id\n      eventFamily\n      eventType\n      handle\n      measures\n      eventConcept {\n        urn\n      }\n      thing {\n        label\n      }\n    }\n  }\n}\n```\n\n```json title=\"Graphql variables\"\n{}\n```\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"events\": {\n      \"items\": [\n        {\n          \"id\": 120277,\n          \"eventFamily\": \"ELECTRICAL\",\n          \"eventType\": \"UNARY\",\n          \"handle\": \"ION:904384fe-f75f-4b1d-bcbb-096c6db55264:event:383475\",\n          \"measures\": null,\n          \"eventConcept\": {\n            \"urn\": \"urn:edm-se:em:core:ev:generic_event\"\n          },\n          \"thing\": {\n            \"label\": \"Keating.Elevator\"\n          }\n        },\n        ...\n        {\n          \"id\": 120285,\n          \"eventFamily\": \"ELECTRICAL\",\n          \"eventType\": \"UNARY\",\n          \"handle\": \"ION:904384fe-f75f-4b1d-bcbb-096c6db55264:event:762285\",\n          \"measures\": null,\n          \"eventConcept\": {\n            \"urn\": \"urn:edm-se:em:core:ev:generic_event\"\n          },\n          \"thing\": {\n            \"label\": \"Keating.Main_7650\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n#### Get thing associated to a gateway\n\n```graphql title=\"Graphql Query\"\nquery GetEventByThingId($where: EMCP_EventFilterInput) {\n  events(where: $where) {\n    items {\n      id\n      eventFamily\n      eventType\n      handle\n      measures\n      eventConcept {\n        urn\n      }\n      thing {\n        label\n      }\n    }\n  }\n}\n```\n\n```json title=\"Graphql variables\"\n{\n  \"where\": {\n    \"thingId\": {\n      \"eq\": 87352\n    }\n  }\n}\n```\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"events\": {\n      \"items\": [\n        {\n          \"id\": 120277,\n          \"eventFamily\": \"ELECTRICAL\",\n          \"eventType\": \"UNARY\",\n          \"handle\": \"ION:904384fe-f75f-4b1d-bcbb-096c6db55264:event:383475\",\n          \"measures\": null,\n          \"eventConcept\": {\n            \"urn\": \"urn:edm-se:em:core:ev:generic_event\"\n          },\n          \"thing\": {\n            \"label\": \"Keating.Elevator\"\n          }\n        },\n        ...\n        {\n          \"id\": 120583,\n          \"eventFamily\": \"ELECTRICAL\",\n          \"eventType\": \"UNARY\",\n          \"handle\": \"ION:904384fe-f75f-4b1d-bcbb-096c6db55264:event:642988\",\n          \"measures\": null,\n          \"eventConcept\": {\n            \"urn\": \"urn:edm-se:em:core:ev:generic_event\"\n          },\n          \"thing\": {\n            \"label\": \"Keating.Elevator\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n## Time Series Queries\n\n- [AggregatedTimeSeries](#aggregatedtimeseries-query)\n- [RawTrendData](#rawtrenddata-query)\n- [BinnedTrendData](#binnedtrenddata-query)\n- [BinnedUsageTrendData](#binnedusagetrenddata-query)\n- [BinnedUsageCostData](#binnedusagecostdata-query)\n- [RankedMeasures](#rankedmeasures-query)\n- [RankedUsageIntensity](#rankedusageintensity-query)\n- [UsageData](#usagedata-query)\n- [BinnedUsage](#binnedusage-query)\n- [BinnedUsageCO2Data](#binnedusageco2data-query)\n\n### AggregatedTimeSeries query\n\nReturns a paginated view of `AggregatedTimeSeries` data, based on the parameters. The data is aggregated into time \"bins\" based on the parameters.\n\n#### Arguments\n\n- `appContext!` : an Array of `EMCP_TopoNodeContextInput` to filter to result by topology.\n- `skip` / `take` : `Int`s specifying pagination of the data.\n- `slotUuids!` : an Array of `Uuid` to filter the result.\n- `startTime!` : a `DateTime` to indicate the inclusive start of the interval.\n- `endTime!` : a `DateTime` to indicate the exclusive end of the interval.\n- `timeZone!` : a `String` to indicate the IANA time zone the data should be aggregated into.\n- `aggregationInterval!` : a `EMCP_AggregationInterval` indicating the temporal bin size that the data is aggregated into.\n- `aggregationDayLightSavingTimeBehavior!` : an `Aggregationdaylightsavingtimebehaviortype` that indicates how the DST transition data is handled, specifically for aggregation values of an HOUR or less.\n  - a value of `AGGREGATE` indicates that when the time \"is set back\", all data in that time bucket is aggregated together. E.g., if the amount is two hours, say from 1am-2am, there is only one bucket returned.\n  - a value of `SEPARATE` indicates that when the time \"is set back\", the duplicate local timestamps will be bucketed separately. E.g., if the amount is two hours, say from 1am-2am, there is only one bucket returned.\n- `aggregationQualityBehavior` : an `Aggregationqualitybehaviortype` that indicates how to change data quality.\n- Currently this only has one value: `INCLUDE`\n- `normalizationFactor` : a `NormalizationFactor?` indicates that retrieved time-series has to be normalized according to weather data.\n  - a value of `None`, null, or the omission of the parameter will not apply any normalization\n  - a value of `CDD`, will normalize the results by the Cooling Degree Days time-series linked to the sites of the slotUids fetched.\n  - a value of `HDD`, will normalize the results by the Heating Degree Days time-series linked to the sites of the slotUids fetched.\n  - a value of `CDDHDD`, will normalize the results by both Heating and Cooling Degree Days time-series linked to the sites of the slotUids fetched.\n- `specialFilter` : a `SpecialFilter?` for fitlering out some specific data.\n  - a value of `None`, null, or the omission of the parameter will not apply any filtering.\n  - a value of `OPENED_HOURS`, will only fetch data when the building or site linked to the slotUuid has a schedule indicating the site is open.\n  - a value of `CLOSED_HOURS`, will only fetch data when the building or site linked to the slotUuid has a schedule indicating the site is closed.\n\n#### Results\n\n- The results are returned as interval-starting timestamps. That is, the `localTs` timestamp is the start of the interval.\n- The results are very raw, and it is up to the caller to know which aggregation value (min, max, avg, count, delta, etc.) to use.\n\n#### Example - Get Daily-aggregated values for the given slot UUIDs and specified time range in the specified time zone\n\n**Query**\n\n```graphql title=\"Query\"\nquery exampleQuery (\n  $appContext: [EMCP_TopoNodeContextInput!]!\n  $slotUuids: [Uuid!]!\n  $startTime: DateTime!\n  $endTime: DateTime!\n  $timeZone: String!\n  $aggregationInterval: EMCP_AggregationInterval!\n  $aggregationDayLightSavingTimeBehavior: EMCP_AggregationDayLightSavingTimeBehaviorType!\n  ) {\n  aggregatedTimeSeries(\n    appContext: $appContext\n    slotUuids: $slotUuids\n    startTime: $startTime\n    endTime: $endTime\n    timeZone: $timeZone\n    aggregationInterval: $aggregationInterval\n    aggregationDayLightSavingTimeBehavior: $aggregationDayLightSavingTimeBehavior    \n    ) {\n    items {\n      slotUuid\n      localTs\n      minValueOnInterval\n      maxValueOnInterval\n      avgValueOnInterval\n      countValueOnInterval      \n    }\n  }\n}\n```\n\n**Variables**\n\n```json title=\"Variables\"\n{\n  \"appContext\":  [\n    { \"type\": \"TENANT\", \"id\": 87293, \"urn\": \"urn:edm-se:em:core:pr:tenant\" }\n  ],\n  \"slotUuids\": [\"efa710c4-b0f5-442e-9589-607bfcbacfb1\",\"8f890740-4c00-482f-a4af-cc89f80386b8\"],\n  \"startTime\": \"2021-11-25Z\",\n  \"endTime\": \"2021-11-30Z\",\n  \"timeZone\": \"America/Vancouver\",\n  \"aggregationInterval\": \"DAY\",\n  \"aggregationDayLightSavingTimeBehavior\": \"SEPARATE\"\n}\n```\n\n**Results**\n\n```json title=\"Results (truncated)\"\n{\n  \"data\": {\n    \"aggregatedTimeSeries\": {\n      \"items\": [\n        {\n          \"slotUuid\": \"8f8907404c00482fa4afcc89f80386b8\",\n          \"localTs\": \"2021-11-24T08:00:00.000Z\",\n          \"minValueOnInterval\": 657711002181,\n          \"maxValueOnInterval\": 659541300883,\n          \"avgValueOnInterval\": 658665838549.6562,\n          \"countValueOnInterval\": 32\n        },\n        [...truncated...]\n        {\n          \"slotUuid\": \"efa710c4b0f5442e9589607bfcbacfb1\",\n          \"localTs\": \"2021-11-27T08:00:00.000Z\",\n          \"minValueOnInterval\": 97.924193968389,\n          \"maxValueOnInterval\": 145.90156926085,\n          \"avgValueOnInterval\": 122.90787830510253,\n          \"countValueOnInterval\": 96\n        }\n      ]\n    }\n  }\n}\n```\n\n### RawTrendData query\n\nReturns a paginated view of `EMCP_BusinessQuantityTimeSeries` data, based on the parameters. The data returned as the raw interval data, except it will be aggregated into 1-minute bins if the data is sub-1-minute interval.\n\n#### Arguments\n\n- `appContext!` : an Array of `EMCP_TopoNodeContextInput` to filter to result by topology.\n- `skip` / `take` : `Int`s specifying pagination of the data.\n- `startTime!` : a `DateTime` to indicate the inclusive start of the interval.\n- `endTime!` : a `DateTime` to indicate the exclusive end of the interval.\n- `timeZone!` : a `String` to indicate the IANA time zone the data should be aggregated into.\n- `businessQuantityNames!` : an Array of `String` indicating the business quantities to get values for.\n\n#### Results\n\n- The timeSeriesValues results are returned as interval-ending timestamps. That is, the `localTs` timestamp is the end of the interval.\n- The value returned is always interval-based -- the value for that time interval -- it is never cumulative.\n\n#### Example - Get raw values for the given appContext and specified time range\n\n**Query**\n\n```graphql title=\"Query\"\nquery exampleQuery (\n  $appContext: [EMCP_TopoNodeContextInput!]!\n  $startTime: DateTime!\n  $endTime: DateTime!\n  $timeZone: String!\n  $businessQuantityNames: [String!]!\n  ) {\n  rawTrendData(\n    appContext: $appContext\n    businessQuantityNames: $businessQuantityNames\n    startTime: $startTime\n    endTime: $endTime\n    timeZone: $timeZone\n    ) {\n    items {\n      businessQuantity { name }\n      measure { label unit { symbol } }\n      thingContext { type urn id }\n      timeSeriesValues { timestamp value }\n    }\n  }\n}\n```\n\n**Variables**\n\n```json title=\"Variables\"\n{\n  \"appContext\":  [\n    { \"type\": \"TENANT\", \"id\": 87293, \"urn\": \"urn:edm-se:em:core:pr:tenant\" },\n    { \"type\": \"TENANT\", \"id\": 87295, \"urn\": \"urn:edm-se:em:core:pr:region\" },\n    { \"type\": \"TENANT\", \"id\": 87297, \"urn\": \"urn:edm-se:em:core:pr:site\" },\n    { \"type\": \"TENANT\", \"id\": 87354, \"urn\": \"urn:edm-se:em:core:pc:circuit_breaker\" }\n  ],\n  \"startTime\": \"2021-11-25Z\",\n  \"endTime\": \"2021-11-30Z\",\n  \"timeZone\": \"America/Vancouver\",\n  \"businessQuantityNames\": [\"CURRENT_A\", \"APPARENT_ENERGY\"]\n}\n```\n\n**Results**\n\n```json title=\"Results\"\n{\n  \"data\": {\n    \"rawTrendData\": {\n      \"items\": [\n        {\n          \"businessQuantity\": {\n            \"name\": \"APPARENT_ENERGY\"\n          },\n          \"measure\": {\n            \"label\": \"Apparent energy delivered+received\",\n            \"unit\": {\n              \"symbol\": \"VAh\"\n            }\n          },\n          \"thingContext\": [\n            { \"type\": \"TENANT\", \"urn\": \"urn:edm-se:em:core:pr:tenant\", \"id\": 87293 },\n            { \"type\": \"ID\", \"urn\": \"urn:edm-se:em:core:pr:region\", \"id\": 87295 },\n            { \"type\": \"ID\", \"urn\": \"urn:edm-se:em:core:pr:site\", \"id\": 87297 },\n            { \"type\": \"ID\", \"urn\": \"urn:edm-se:em:core:pc:circuit_breaker\", \"id\": 87354 }\n          ],\n          \"timeSeriesValues\": [\n            { \"timestamp\": \"2021-11-25T00:15:00.000Z\", \"value\": 45770885 },\n            { \"timestamp\": \"2021-11-25T00:30:00.000Z\", \"value\": 58992410 },\n            [ ... truncated ... ]\n            { \"timestamp\": \"2021-11-30T00:00:00.000Z\", \"value\": 133.120089858674 }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n### BinnedTrendData query\n\nReturns a paginated view of `EMCP_BusinessQuantityBinnedTimeSeries` data, based on the parameters.\n\n#### Arguments\n\n- `appContext!` : an Array of `EMCP_TopoNodeContextInput` to filter to result by topology.\n- `skip` / `take` : `Int`s specifying pagination of the data.\n- `startTime!` : a `DateTime` to indicate the inclusive start of the interval.\n- `endTime!` : a `DateTime` to indicate the exclusive end of the interval.\n- `timeZone!` : a `String` to indicate the IANA time zone the data should be aggregated into.\n- `businessQuantityName!` : a `String` indicating the business quantity to get values for.\n- `aggregationInterval!` : an `EMCP_AggregationInterval` indicating the temporal bin size that the data is aggregated into.\n- `normalizationFactor` : a `NormalizationFactor?` indicates that retrieved time-series has to be normalized according to weather data.\n  - a value of `None`, null, or the omission of the parameter will not apply any normalization\n  - a value of `CDD`, will normalize the results by the Cooling Degree Days time-series linked to the sites of the slotUids fetched.\n  - a value of `HDD`, will normalize the results by the Heating Degree Days time-series linked to the sites of the slotUids fetched.\n  - a value of `CDDHDD`, will normalize the results by both Heating and Cooling Degree Days time-series linked to the sites of the slotUids fetched.\n- `specialFilter` : a `SpecialFilter?` for fitlering out some specific data.\n  - a value of `None`, null, or the omission of the parameter will not apply any filtering.\n  - a value of `OPENED_HOURS`, will only fetch data when the building or site linked to the slotUuid has a schedule indicating the site is open.\n  - a value of `CLOSED_HOURS`, will only fetch data when the building or site linked to the slotUuid has a schedule indicating the site is closed.\n\n#### Results\n\n- The timeSeriesValues results' time range are returned with an inclusive startTime and exclusive endTime.\n- The value returned is always interval-based -- the value for that time interval -- it is never cumulative.\n\n#### Example - Get Monthly-aggregated values for the appContext and specified time range, in the specified time zone, for the given business quantity.\n\n**Query**\n\n```graphql title=\"Query\"\nquery exampleQuery (\n  $appContext: [EMCP_TopoNodeContextInput!]!\n  $startTime: DateTime!\n  $endTime: DateTime!\n  $timeZone: String!\n  $businessQuantityName: String!\n  $aggregationInterval: EMCP_AggregationInterval!\n  ) {\n  binnedTrendData(\n    appContext: $appContext\n    businessQuantityName: $businessQuantityName\n    startTime: $startTime\n    endTime: $endTime\n    timeZone: $timeZone\n    aggregationInterval: $aggregationInterval\n    ) {\n    items {\n      businessQuantity { name }\n      measure { label unit { symbol } }\n      thingContext { type urn id }\n      timeSeriesValues { startTime endTime value }\n    }\n  }\n}\n```\n\n**Variables**\n\n```json title=\"Variables\"\n{\n  \"appContext\":  [\n    { \"type\": \"TENANT\", \"id\": 87293, \"urn\": \"urn:edm-se:em:core:pr:tenant\" },\n    { \"type\": \"TENANT\", \"id\": 87295, \"urn\": \"urn:edm-se:em:core:pr:region\" },\n    { \"type\": \"TENANT\", \"id\": 87297, \"urn\": \"urn:edm-se:em:core:pr:site\" },\n    { \"type\": \"TENANT\", \"id\": 87354, \"urn\": \"urn:edm-se:em:core:pc:circuit_breaker\" }\n  ],\n  \"startTime\": \"2021-11-25Z\",\n  \"endTime\": \"2021-11-30Z\",\n  \"timeZone\": \"America/Vancouver\",\n  \"businessQuantityName\": \"APPARENT_ENERGY\",\n  \"aggregationInterval\": \"MONTH\"\n}\n```\n\n**Results**\n\n```json title=\"Results\"\n{\n  \"data\": {\n    \"binnedTrendData\": {\n      \"items\": [\n        {\n          \"businessQuantity\": {\n            \"name\": \"APPARENT_ENERGY\"\n          },\n          \"measure\": {\n            \"label\": \"Apparent energy delivered+received\",\n            \"unit\": {\n              \"symbol\": \"VAh\"\n            }\n          },\n          \"thingContext\": [\n            { \"type\": \"TENANT\", \"urn\": \"urn:edm-se:em:core:pr:tenant\", \"id\": 87293 },\n            { \"type\": \"ID\", \"urn\": \"urn:edm-se:em:core:pr:region\", \"id\": 87295 },\n            { \"type\": \"ID\", \"urn\": \"urn:edm-se:em:core:pr:site\", \"id\": 87297 },\n            { \"type\": \"ID\", \"urn\": \"urn:edm-se:em:core:pc:circuit_breaker\", \"id\": 87354 }\n          ],\n          \"timeSeriesValues\": [\n            {\n              \"startTime\": \"2021-11-01T00:00:00.000-07:00\",\n              \"endTime\": \"2021-12-01T00:00:00.000-08:00\",\n              \"value\": 161833741052\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n### BinnedUsageTrendData query\n\nReturns a paginated view of `EMCP_BusinessQuantityBinnedUsageTimeSeries` data, based on the parameters. There is no way to filter the usages -- it will always return all usages, including Total Usage.\n\n#### Arguments\n\n- `appContext!` : an Array of `EMCP_TopoNodeContextInput` to filter to result by topology.\n- `skip` / `take` : `Int`s specifying pagination of the data.\n- `startTime!` : a `DateTime` to indicate the inclusive start of the interval.\n- `endTime!` : a `DateTime` to indicate the exclusive end of the interval.\n- `timeZone!` : a `String` to indicate the IANA time zone the data should be aggregated into.\n- `businessQuantityName!` : a `String` indicating the business quantity to get values for.\n- `aggregationInterval!` : a `EMCP_AggregationInterval` indicating the temporal bin size that the data is aggregated into.\n- `normalizationFactor` : a `NormalizationFactor?` indicates that retrieved time-series has to be normalized according to weather data.\n  - a value of `None`, null, or the omission of the parameter will not apply any normalization\n  - a value of `CDD`, will normalize the results by the Cooling Degree Days time-series linked to the sites of the slotUids fetched.\n  - a value of `HDD`, will normalize the results by the Heating Degree Days time-series linked to the sites of the slotUids fetched.\n  - a value of `CDDHDD`, will normalize the results by both Heating and Cooling Degree Days time-series linked to the sites of the slotUids fetched.\n- `specialFilter` : a `SpecialFilter?` for fitlering out some specific data.\n  - a value of `None`, null, or the omission of the parameter will not apply any filtering.\n  - a value of `OPENED_HOURS`, will only fetch data when the building or site linked to the slotUuid has a schedule indicating the site is open.\n  - a value of `CLOSED_HOURS`, will only fetch data when the building or site linked to the slotUuid has a schedule indicating the site is closed.\n\n#### Results\n\n- The timeSeriesValues results' time range are returned with an inclusive startTime and exclusive endTime.\n- The value returned is always interval-based -- the value for that time interval -- it is never cumulative.\n- The results are based on the configuration of the Energy hierarchy.\n- Calculation methodology can be found on [this page on the Team 2 Wiki](https://se-tfs.visualstudio.com/SoftwarePortfolio/_wiki/wikis/SoftwarePortfolio.wiki/853/Usage-based-Energy-and-Power-(Demand)-Aggregation-in-Energy-One-Hub).\n\n#### Example - Get Monthly-aggregated values for the appContext and specified time range in the specified time zone\n\n**Query**\n\n```graphql title=\"Query\"\nquery exampleQuery (\n  $appContext: [EMCP_TopoNodeContextInput!]!\n  $startTime: DateTime!\n  $endTime: DateTime!\n  $timeZone: String!\n  $businessQuantityName: String!\n  $aggregationInterval: EMCP_AggregationInterval!\n  ) {\n  binnedUsageTrendData(\n    appContext: $appContext\n    businessQuantityName: $businessQuantityName\n    startTime: $startTime\n    endTime: $endTime\n    timeZone: $timeZone\n    aggregationInterval: $aggregationInterval\n    ) {\n    items {\n      usageId\n      businessQuantity { name }\n      measure { label unit { symbol } }\n      thingContext { type urn id }\n      timeSeriesValues { startTime endTime value }\n    }\n  }\n}\n```\n\n**Variables**\n\n```json title=\"Variables\"\n{\n  \"appContext\":  [\n    { \"type\": \"TENANT\", \"id\": 87293, \"urn\": \"urn:edm-se:em:core:pr:tenant\" },\n    { \"type\": \"TENANT\", \"id\": 87295, \"urn\": \"urn:edm-se:em:core:pr:region\" },\n    { \"type\": \"TENANT\", \"id\": 87297, \"urn\": \"urn:edm-se:em:core:pr:site\" },\n    { \"type\": \"TENANT\", \"id\": 87354, \"urn\": \"urn:edm-se:em:core:pc:circuit_breaker\" }\n  ],\n  \"startTime\": \"2021-11-25Z\",\n  \"endTime\": \"2021-11-30Z\",\n  \"timeZone\": \"America/Vancouver\",\n  \"businessQuantityName\": \"APPARENT_ENERGY\",\n  \"aggregationInterval\": \"MONTH\"\n}\n```\n\n**Results**\n\n```json title=\"Results\"\n{\n  \"data\": {\n    \"binnedTrendData\": {\n      \"items\": [\n        {\n          \"usageId\": 255,\n          \"businessQuantity\": {\n            \"name\": \"APPARENT_ENERGY\"\n          },\n          \"measure\": {\n            \"label\": \"Apparent energy delivered+received\",\n            \"unit\": {\n              \"symbol\": \"VAh\"\n            }\n          },\n          \"thingContext\": [\n            { \"type\": \"TENANT\", \"urn\": \"urn:edm-se:em:core:pr:tenant\", \"id\": 87293 },\n            { \"type\": \"ID\", \"urn\": \"urn:edm-se:em:core:pr:region\", \"id\": 87295 },\n            { \"type\": \"ID\", \"urn\": \"urn:edm-se:em:core:pr:site\", \"id\": 87297 },\n            { \"type\": \"ID\", \"urn\": \"urn:edm-se:em:core:pc:circuit_breaker\", \"id\": 87354 }\n          ],\n          \"timeSeriesValues\": [\n            {\n              \"startTime\": \"2021-11-01T00:00:00.000-07:00\",\n              \"endTime\": \"2021-12-01T00:00:00.000-08:00\",\n              \"value\": 161833741052\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n### BinnedUsageCostData query\n\nReturns a paginated view of `EMCP_BusinessQuantityBinnedUsageTimeSeriesWithCostsCollectionSegment` data, based on the parameters. There is no way to filter the usages -- it will always return all usages, including Total Usage.\n\n#### Arguments\n\n- `appContext!` : an Array of `EMCP_TopoNodeContextInput` to filter to result by topology.\n- `skip` / `take` : `Int`s specifying pagination of the data.\n- `input` : a collection of the following values, type = `EMCP_BinnedUsageCostDataInput!`\n  - `startTime!` : a `DateTime` to indicate the inclusive start of the interval.\n  - `endTime!` : a `DateTime` to indicate the exclusive end of the interval.\n  - `timeZone!` : a `String` to indicate the IANA time zone the data should be aggregated into.\n  - `businessQuantityName!` : a `String` indicating the business quantity to get values for.\n  - `aggregationInterval!` : a `EMCP_AggregationInterval` indicating the temporal bin size that the data is aggregated into.\n\n#### Results\n\n- The timeSeriesValues results' time range are returned with an inclusive startTime and exclusive endTime.\n- The value returned is always interval-based -- the value for that time interval -- it is never cumulative.\n- The results are based on the configuration of the Energy hierarchy.\n- Calculation methodology can be found on [this page on the Team 2 Wiki](https://se-tfs.visualstudio.com/SoftwarePortfolio/_wiki/wikis/SoftwarePortfolio.wiki/853/Usage-based-Energy-and-Power-(Demand)-Aggregation-in-Energy-One-Hub).\n\n#### Example - Get Yearly-aggregated cost values for the appContext and specified time range in the specified time zone\n\n**Query**\n\n```graphql title=\"Query\"\nquery binnedUsageCostData(\n  $appContext: [EMCP_TopoNodeContextInput!]!\n  $businessQuantityName: String!\n  $startTime: DateTime!\n  $endTime: DateTime!\n  $timeZone: String!\n  $aggregationInterval: EMCP_AggregationInterval!\n) {\n  binnedUsageCostData(\n    appContext: $appContext\n    input: {\n      startTime: $startTime\n      endTime: $endTime\n      timeZone: $timeZone\n      businessQuantityName: $businessQuantityName\n      aggregationInterval: $aggregationInterval\n    }\n  ) {\n    items {\n      usageId\n      businessQuantity { name }\n      measure {\n        name\n        unit { symbol }\n      }\n      thingId\n      thingLabel\n      timeSeriesValuesAndCosts { startTime endTime value cost }\n    }\n  }\n}\n```\n\n**Variables**\n\n```json title=\"Variables\"\n{\n  \"appContext\":  [\n    { \"type\": \"TENANT\", \"id\": 87901, \"urn\": \"urn:edm-se:em:core:pr:tenant\" },\n    { \"type\": \"TENANT\", \"id\": 132441, \"urn\": \"urn:edm-se:em:core:pr:region\" },\n    { \"type\": \"TENANT\", \"id\": 87903, \"urn\": \"urn:edm-se:em:core:pr:site\" },\n  ],\n  \"businessQuantityName\": \"ACTIVE_ENERGY\",\n  \"startTime\": \"2020-01-01T00:00:00-08:00\",\n  \"endTime\": \"2023-01-01T00:00:00-08:00\",\n  \"timeZone\": \"America/Vancouver\",\n  \"aggregationInterval\": \"YEAR\"\n}\n```\n\n**Results**\n\n```json title=\"Results\"\n{\n  \"data\": {\n    \"binnedUsageCostData\": {\n      \"items\": [\n        {\n          \"usageId\": 276,\n          \"businessQuantity\": {\n            \"name\": \"ACTIVE_ENERGY\"\n          },\n          \"measure\": {\n            \"name\": \"Wp del+rec\",\n            \"unit\": {\n              \"symbol\": \"Wh\"\n            }\n          },\n          \"thingId\": 87903,\n          \"thingLabel\": \"Team 2 Site\",\n          \"timeSeriesValuesAndCosts\": [\n            {\n              \"startTime\": \"2020-01-01T00:00:00.000-08:00\",\n              \"endTime\": \"2021-01-01T00:00:00.000-08:00\",\n              \"value\": 0,\n              \"cost\": 0\n            },\n            {\n              \"startTime\": \"2021-01-01T00:00:00.000-08:00\",\n              \"endTime\": \"2022-01-01T00:00:00.000-08:00\",\n              \"value\": -14966477,\n              \"cost\": -17959.7724\n            },\n            {\n              \"startTime\": \"2022-01-01T00:00:00.000-08:00\",\n              \"endTime\": \"2023-01-01T00:00:00.000-08:00\",\n              \"value\": 1278100,\n              \"cost\": 1533.72\n            }\n          ]\n        },\n        [ ... truncated ... ]\n        {\n          \"usageId\": 9550,\n          \"businessQuantity\": {\n            \"name\": \"ACTIVE_ENERGY\"\n          },\n          \"measure\": {\n            \"name\": \"Wp del+rec\",\n            \"unit\": {\n              \"symbol\": \"Wh\"\n            }\n          },\n          \"thingId\": 87903,\n          \"thingLabel\": \"Team 2 Site\",\n          \"timeSeriesValuesAndCosts\": [\n            {\n              \"startTime\": \"2020-01-01T00:00:00.000-08:00\",\n              \"endTime\": \"2021-01-01T00:00:00.000-08:00\",\n              \"value\": null,\n              \"cost\": null\n            },\n            {\n              \"startTime\": \"2021-01-01T00:00:00.000-08:00\",\n              \"endTime\": \"2022-01-01T00:00:00.000-08:00\",\n              \"value\": 3235563,\n              \"cost\": 3882.6756\n            },\n            {\n              \"startTime\": \"2022-01-01T00:00:00.000-08:00\",\n              \"endTime\": \"2023-01-01T00:00:00.000-08:00\",\n              \"value\": 3448733,\n              \"cost\": 4138.4796\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n### RankedMeasures query\n\nReturns a paginated view of `EMCP_RankedMeasureValue` data, based on the parameters.\n\n#### Arguments\n\n- `appContext!` : an Array of `EMCP_TopoNodeContextInput` to filter to result by topology.\n- `skip` / `take` : `Int`s specifying pagination of the data.\n- `startTime!` : a `DateTime` to indicate the inclusive start of the interval.\n- `endTime!` : a `DateTime` to indicate the exclusive end of the interval.\n- `businessQuantityName!` : a `String` indicating the business quantity to get values for.\n- `topoConceptUrn` : a `String` indicating (by urn) of the level of items that will be ranked, such as ranking all buildings below the current appContext node. If null, the direct child toponodes are ranked.\n\n#### Results\n\n- The results are the ranked energy usage -- highest usage to lowest usage -- based on the appContext (parent node).\n  - If there is no data for a child, NULL is returned.\n  - In the case of a tie, all children with the same value will have the same rank\n- If topoConceptUrn is null, the items to be ranked are the direct children of the node specified in the appContext.\n- If topoConceptUrn is not null, the items to be ranked are the descendants of the node specified in the appContext that are of the specified concept.\n  - For example, if the appContext specified the orgniazation, and the topoConceptUrn is \"building\", then all buildings under the organization will be ranked against each other.\n\n#### Example - Get ranked values for the children of the specified appContext and specified time range for the given business quantity\n\n**Query**\n\n```graphql title=\"Query\"\nquery exampleQuery (\n  $appContext: [EMCP_TopoNodeContextInput!]!\n  $startTime: DateTime!\n  $endTime: DateTime!\n  $businessQuantityName: String!\n  ) {\n  rankedMeasures(\n    appContext: $appContext\n    businessQuantityName: $businessQuantityName\n    startTime: $startTime\n    endTime: $endTime\n    ) {\n    items {\n      ranking\n      value\n      thingId\n      thingLabel      \n    }\n  }\n}\n```\n\n**Variables**\n\n```json title=\"Variables\"\n{\n  \"appContext\":  [\n    { \"type\": \"TENANT\", \"id\": 87293, \"urn\": \"urn:edm-se:em:core:pr:tenant\" },\n    { \"type\": \"TENANT\", \"id\": 87295, \"urn\": \"urn:edm-se:em:core:pr:region\" }\n  ],\n  \"startTime\": \"2021-11-25Z\",\n  \"endTime\": \"2021-11-30Z\",\n  \"businessQuantityName\": \"APPARENT_ENERGY\"\n}\n```\n\n**Results**\n\n```json title=\"Results\"\n{\n  \"data\": {\n    \"rankedMeasures\": {\n      \"items\": [\n        {\n          \"ranking\": 1,\n          \"value\": 26957916065,\n          \"thingId\": 87297,\n          \"thingLabel\": \"Montréal Factory\"\n        },\n        {\n          \"ranking\": 2,\n          \"value\": null,\n          \"thingId\": 87299,\n          \"thingLabel\": \"Québec City Factory\"\n        },\n        {\n          \"ranking\": 2,\n          \"value\": null,\n          \"thingId\": 87301,\n          \"thingLabel\": \"Halifax Factory\"\n        }\n      ]\n    }\n  }\n}\n```\n\n### RankedUsageIntensity query\n\nReturns a paginated view of `EMCP_RankedUsageIntensityValue` data, based on the parameters.\n\n#### Arguments\n\n- `appContext!` : an Array of `EMCP_TopoNodeContextInput` to filter to result by topology.\n- `skip` / `take` : `Int`s specifying pagination of the data.\n- `startTime!` : a `DateTime` to indicate the inclusive start of the interval.\n- `endTime!` : a `DateTime` to indicate the exclusive end of the interval.\n- `businessQuantityName!` : a `String` indicating the business quantity to get values for.\n- `topoConceptUrn` : a `String` indicating (by urn) of the level of items that will be ranked, such as ranking all buildings below the current appContext node. \n  - If value is null, the direct child toponodes are ranked.\n  - If value is 'urn:PRODUCT' then it will rank all products (aka, devices) under the given appContext.  \n\n#### Results\n\n- The results are the ranked energy usage intensities -- highest usage to lowest usage -- based on the appContext (parent node).\n  - If there is no data for a child, NULL is returned.\n  - In the case of a tie, all children with the same value will have the same rank\n- If topoConceptUrn is null, the items to be ranked are the direct children of the node specified in the appContext.\n- If topoConceptUrn is not null, the items to be ranked are the descendants of the node specified in the appContext that are of the specified concept.\n  - For example, if the appContext specified the orgniazation, and the topoConceptUrn is \"building\", then all buildings under the organization will be ranked against each other.\n  - And for the special topoConceptUrn value of 'urn:PRODUCT', all descendant products (aka, devices) will be returned\n\n#### Example - Get ranked values for the children of the specified appContext and specified time range for the given business quantity\n\n**Query**\n\n```graphql title=\"Query\"\nquery rankedUsageIntensity(\n  $appContext: [EMCP_TopoNodeContextInput!]!\n  $input: EMCP_RankedUsageIntensityInput!\n  $order: [EMCP_RankedUsageIntensityValueSortInput!]\n  $take: Int!\n  $skip: Int = 0\n) {\n  rankedUsageIntensity(\n    appContext: $appContext\n    input: $input\n    order: $order\n    take: $take\n    skip: $skip\n  ) {\n    totalCount\n    items {\n      ranking\n      value\n      usageIntensity\n      thingId\n      thingLabel\n    }\n  }\n}\n```\n\n**Variables**\n\n```json title=\"Variables\"\n{\n  \"appContext\":  [\n    { \"type\": \"TENANT\", \"id\": 87293, \"urn\": \"urn:edm-se:em:core:pr:tenant\" },\n    { \"type\": \"TENANT\", \"id\": 87295, \"urn\": \"urn:edm-se:em:core:pr:region\" }\n  ],\n  \"startTime\": \"2021-11-25Z\",\n  \"endTime\": \"2021-11-30Z\",\n  \"businessQuantityName\": \"APPARENT_ENERGY\",\n  \"topoContextUrn\": \"urn:PRODUCT\"\n}\n```\n\n**Results**\n\n```json title=\"Results\"\n{\n  \"data\": {\n    \"rankedUsageIntensity\": {\n      \"items\": [\n        {\n          \"ranking\": 1,\n          \"usageIntensity\": 26957916065,\n          \"thingId\": 87297,\n          \"thingLabel\": \"Montréal Factory\"\n        },\n        {\n          \"ranking\": 2,\n          \"usageIntensity\": null,\n          \"thingId\": 87299,\n          \"thingLabel\": \"Québec City Factory\"\n        },\n        {\n          \"ranking\": 2,\n          \"usageIntensity\": null,\n          \"thingId\": 87301,\n          \"thingLabel\": \"Halifax Factory\"\n        }\n      ]\n    }\n  }\n}\n```\n\n### UsageData query\n\nReturns a paginated view of `EMCP_BusinessQuantityUsageData` data, based on the parameters.\n\n#### Arguments\n\n- `appContext!` : an Array of `EMCP_TopoNodeContextInput` to filter to result by topology.\n- `skip` / `take` : `Int`s specifying pagination of the data.\n- `startTime!` : a `DateTime` to indicate the inclusive start of the interval.\n- `endTime!` : a `DateTime` to indicate the exclusive end of the interval.\n- `timeZone!` : a `String` to indicate the IANA time zone the data should be aggregated into.\n- `businessQuantityName!` : a `String` indicating the business quantitiy to get values for.\n- `splitByChildNodes!` : to indicate whether to return usage information for the toponode specified in the appContext (false), or for the child toponodes (true).\n- `normalizationFactor` : a `NormalizationFactor?` indicates that retrieved time-series has to be normalized according to weather data.\n  - a value of `None`, null, or the omission of the parameter will not apply any normalization\n  - a value of `CDD`, will normalize the results by the Cooling Degree Days time-series linked to the sites of the slotUids fetched.\n  - a value of `HDD`, will normalize the results by the Heating Degree Days time-series linked to the sites of the slotUids fetched.\n  - a value of `CDDHDD`, will normalize the results by both Heating and Cooling Degree Days time-series linked to the sites of the slotUids fetched.\n- `specialFilter` : a `SpecialFilter?` for fitlering out some specific data.\n  - a value of `None`, null, or the omission of the parameter will not apply any filtering.\n  - a value of `OPENED_HOURS`, will only fetch data when the building or site linked to the slotUuid has a schedule indicating the site is open.\n  - a value of `CLOSED_HOURS`, will only fetch data when the building or site linked to the slotUuid has a schedule indicating the site is closed.\n\n#### Results\n\n- The value for each configured usage for the appContext (or the immediate children of the appContext) is returned.\n\n#### Example - Get usage values for the children of the specified appContext and specified time range for the given business quantity\n\n**Query**\n\n```graphql title=\"Query\"\nquery usageData(\n  $appContext: [EMCP_TopoNodeContextInput!]!\n  $businessQuantityName: String!\n  $startTime: DateTime!\n  $endTime: DateTime!\n  $timeZone: String!\n  $take: Int = 250\n  $skip: Int = 0\n  $splitByChildNodes: Boolean\n) {\n  usageData(\n    skip: $skip\n    take: $take\n    appContext: $appContext\n    input: {\n      startTime: $startTime\n      endTime: $endTime\n      timeZone: $timeZone\n      businessQuantityName: $businessQuantityName\n      splitByChildNodes: $splitByChildNodes\n    }\n  ) {\n    items {\n      thingId\n      thingLabel\n      startTime\n      endTime\n      timeZone\n      usageId\n      businessQuantityName\n      unit { urn name symbol }\n      value\n    }\n  }\n}\n```\n\n**Variables**\n\n```json title=\"Variables\"\n{\n  \"appContext\":  [\n    { \"type\": \"TENANT\", \"id\": 87293, \"urn\": \"urn:edm-se:em:core:pr:tenant\" },\n    { \"type\": \"TENANT\", \"id\": 87295, \"urn\": \"urn:edm-se:em:core:pr:region\" },\n    { \"type\": \"ID\", \"id\": 87903, \"urn\": \"urn:edm-se:em:core:pr:site\" },\n    { \"type\": \"ID\", \"id\": 87905, \"urn\": \"urn:edm-se:em:core:pr:building\" }\n  ],\n  \"startTime\": \"2021-11-25Z\",\n  \"endTime\": \"2021-11-30Z\",\n  \"businessQuantityName\": \"APPARENT_ENERGY\",\n  \"timeZone\": \"America/Vancouver\",\n  \"splitByChildNodes\": true\n}\n```\n\n**Results**\n\n```json title=\"Results\"\n{\n  \"data\": {\n    \"usageData\": {\n      \"items\": [\n        {\n          \"thingId\": 87909,\n          \"thingLabel\": \"Floor 2\",\n          \"startTime\": \"2022-02-13T08:00:00.000Z\",\n          \"endTime\": \"2022-02-17T08:00:00.000Z\",\n          \"timeZone\": \"America/Vancouver\",\n          \"usageId\": 277,\n          \"businessQuantityName\": \"ACTIVE_ENERGY\",\n          \"unit\": { \"urn\": \"urn:edm-se:em:core:ut:watt_hour\", \"name\": \"watt hour\", \"symbol\": \"Wh\" },\n          \"value\": 555589\n        },\n        {\n          \"thingId\": 87909,\n          \"thingLabel\": \"Floor 2\",\n          \"startTime\": \"2022-02-13T08:00:00.000Z\",\n          \"endTime\": \"2022-02-17T08:00:00.000Z\",\n          \"timeZone\": \"America/Vancouver\",\n          \"usageId\": 9546,\n          \"businessQuantityName\": \"ACTIVE_ENERGY\",\n          \"unit\": { \"urn\": \"urn:edm-se:em:core:ut:watt_hour\", \"name\": \"watt hour\", \"symbol\": \"Wh\" },\n          \"value\": 499651\n        },\n        {\n          \"thingId\": 87909,\n          \"thingLabel\": \"Floor 2\",\n          \"startTime\": \"2022-02-13T08:00:00.000Z\",\n          \"endTime\": \"2022-02-17T08:00:00.000Z\",\n          \"timeZone\": \"America/Vancouver\",\n          \"usageId\": 9550,\n          \"businessQuantityName\": \"ACTIVE_ENERGY\",\n          \"unit\": { \"urn\": \"urn:edm-se:em:core:ut:watt_hour\", \"name\": \"watt hour\", \"symbol\": \"Wh\" },\n          \"value\": 55938\n        }\n      ]\n    }\n  }\n}\n```\n\n### BinnedUsage query\n\nThis function returns multiple streams of data, based on the input parameters. \n\nIt can return two main types of energy data, returned as `mode` in the dataset.\n- CONSUMPTION: energy that is consumed (such as lighting and heating)\n- PRODUCTION: energy that is produced (such as solar power and generators)\n\nAnd each of these two main types can be further broken down into the `energySource`: ALL, GRID, and LOCAL.\n- Consumption\n  - GRID\n    - all consumption that came from the utility/grid.\n    - the cost is the \"grid\" consumption value multiplied by the electricity rate for the site.\n  - LOCAL\n    - all consumption that was produced locally.\n    - the cost is the \"local\" consumption value multiplied by the electricity rate for the site.\n  - ALL\n    - all consumption, independent of how/where the energy was produced. \n    - the cost is the \"all\" consumption value multiplied by the electricity rate for the site.\n- Production\n  - GRID\n    - all production that is sent to the grid (or more specifically, sent to a higher level in the hierarchy than is being queried).\n    - the cost is the \"grid\" production multiplied by the electricity sell-back rate for the site.\n  - LOCAL\n    - all production that is consumed locally.\n    - the cost is the \"local\" production multiplied by the electricity rate for the site.\n  - ALL\n    - all production, independent of how/where it is consumed.\n    - the cost is the sum of \"grid\" production cost and \"local\" production cost.\n\nAlthough this takes a business quantity, that business quantity is not used verbatim for electrical commodities. This is because for\nthe electrical commodity, when asking for ACTIVE_ENERGY, consumption data generally comes from ACTIVE_ENERGY_DELIVERED and production generally\ncomes from ACTIVE_ENERGY_RECEIVED.\n\n_**Note:** To know what was sent back to the grid, a TotalUsage device must be configured at the site level._\n\n_**Note**: Future versions of this API will support APPARENT_ENERGY and REACTIVE_ENERGY, but currently those are not supported and will simply use ACTIVE_ENERGY instead._\n\n#### Arguments\n\n- `appContext!` : an Array of `EMCP_TopoNodeContextInput` to filter the result by topology.\n- `skip` / `take` : `Int`s specifying pagination of the data.\n- `input` : a collection of the following values, type = `EMCP_BinnedUsageCostDataInput!`\n  - `startTime!` : a `DateTime` to indicate the inclusive start of the interval.\n  - `endTime!` : a `DateTime` to indicate the exclusive end of the interval.\n  - `timeZone!` : a `String` to indicate the IANA time zone the data should be aggregated into.\n  - `aggregationInterval!` : an `EMCP_AggregationInterval` indicating the temporal bin size that the data is aggregated into.\n  - `businessQuantityName!` : a `String` to indicate what measures should be returned. This does not DIRECTLY relate to a specific business quantity, but is more general. I.e., when asking for ACTIVE_ENERGY, multiple business quantities maybe be needed (ACTIVE_ENERGY_DELIVERED and ACTIVE_ENERGY_RECEIVED).\n  - `includeConsumptionTimeseries` : a `Boolean` indicating whether consumption data streams should be returned.\n  - `IncludeConsumptionEnergySourceBreakdown` : a `Boolean` indicating whether to return the breakdown of consumption energy. \n  - `includeProductionTimeseries` : a `Boolean` indicating whether production data streams should be returned.\n  - `IncludeProductionEnergySourceBreakdown` : a `Boolean` indicating whether to return the breakdown of production energy.\n\n#### Results\n\n- The timeSeriesValues results' time range are returned with an inclusive startTime and exclusive endTime.\n  - E.g., if the aggregation period is an HOUR, then a value with a timestamp of 02:00:00 refers to the time period 02:00:00 (inclusive) to 03:00:00 (exclusive).\n- The value returned is the energy consumed or produced in that interval; it is never cumulative.\n- The results are based on the configuration of the Energy hierarchy.\n\n#### Example - Get Monthly-aggregated values for the appContext and specified time range in the specified time zone\n\n**Query**\n\n```graphql title=\"Query\"\nquery binnedUsage(\n  $appContext: [EMCP_TopoNodeContextInput!]!\n  $businessQuantityName: String!\n  $startTime: DateTime!\n  $endTime: DateTime!\n  $timeZone: String!\n  $aggregationInterval: EMCP_AggregationInterval!\n  $includeConsumptionTimeseries: Boolean!\n  $includeConsumptionEnergySourceBreakdown: Boolean!\n  $includeProductionTimeseries: Boolean!\n  $includeProductionEnergySourceBreakdown: Boolean!\n  $take: Int = 250\n  $skip: Int = 0\n) {\n  binnedUsage(\n    input: {\n      startTime: $startTime\n      endTime: $endTime\n      timeZone: $timeZone\n      businessQuantityName: $businessQuantityName\n      aggregationInterval: $aggregationInterval\n      includeConsumptionTimeseries: $includeConsumptionTimeseries\n      includeConsumptionEnergySourceBreakdown: $includeConsumptionEnergySourceBreakdown\n      includeProductionTimeseries: $includeProductionTimeseries\n      includeProductionEnergySourceBreakdown: $includeProductionEnergySourceBreakdown\n    }\n    appContext: $appContext\n  ) {\n    items {\n      mode\n      energySource\n      usageId\n      thingId\n      thingLabel\n      thingContext { type id urn }\n      measureId\n      measure { urn name label unit { symbol } }\n      timeSeriesValues { startTime endTime value }\n    }\n  }\n}\n\n```\n\n**Variables**\n\n```json title=\"Variables\"\n{\n  \"appContext\":  [\n    { \"type\": \"TENANT\", \"id\": 87293, \"urn\": \"urn:edm-se:em:core:pr:tenant\" },\n    { \"type\": \"TENANT\", \"id\": 87295, \"urn\": \"urn:edm-se:em:core:pr:region\" },\n    { \"type\": \"TENANT\", \"id\": 87297, \"urn\": \"urn:edm-se:em:core:pr:site\" }\n  ],\n  \"startTime\": \"2023-01-01T08:00:00.000Z\",  \n  \"endTime\": \"2023-07-01T07:00:00.000Z\",\n  \"businessQuantityName\": \"ACTIVE_ENERGY\",\n  \"timeZone\": \"America/Vancouver\",\n  \"aggregationInterval\": \"MONTH\",  \n  \"includeConsumptionTimeseries\": true,\n  \"includeConsumptionEnergySourceBreakdown\": true,\n  \"includeProductionTimeseries\": true,\n  \"includeProductionEnergySourceBreakdown\": false\n}\n```\n\n**Results**\n\n```json title=\"Results\"\n{\n  \"data\": {\n    \"binnedUsage\": {\n      \"items\": [\n        {\n          \"mode\": \"CONSUMPTION\",\n          \"energySource\": \"ALL\",\n          \"usageId\": 276,\n          \"thingId\": 1326454,\n          \"thingLabel\": \"Floor z\",\n          \"thingContext\": [...],\n          \"measureId\": 5790,\n          \"measure\": {\n            \"urn\": \"urn:edm-se:em:core:me:whrin\",\n            \"name\": \"Wp del\",\n            \"label\": \"Active energy delivered\",\n            \"unit\": {\n              \"symbol\": \"Wh\"\n            }\n          },\n          \"timeSeriesValues\": [\n            {\n              \"startTime\": \"2023-01-01T00:00:00.000-08:00\",\n              \"endTime\": \"2023-02-01T00:00:00.000-08:00\",\n              \"value\": 0\n            },\n            ...\n            {\n              \"startTime\": \"2023-06-01T00:00:00.000-07:00\",\n              \"endTime\": \"2023-07-01T00:00:00.000-07:00\",\n              \"value\": 0\n            }\n          ]\n        },\n        {\n          \"mode\": \"CONSUMPTION\",\n          \"energySource\": \"ALL\",\n          \"usageId\": 277,\n          \"thingId\": 1326454,\n          \"thingLabel\": \"Floor z\",\n          \"thingContext\": [...],\n          \"measureId\": 5790,\n          \"measure\": {\n            \"urn\": \"urn:edm-se:em:core:me:whrin\",\n            \"name\": \"Wp del\",\n            \"label\": \"Active energy delivered\",\n            \"unit\": {\n              \"symbol\": \"Wh\"\n            }\n          },\n          \"timeSeriesValues\": [\n            {\n              \"startTime\": \"2023-01-01T00:00:00.000-08:00\",\n              \"endTime\": \"2023-02-01T00:00:00.000-08:00\",\n              \"value\": \"128831582\"\n            },\n            ...\n            {\n              \"startTime\": \"2023-06-01T00:00:00.000-07:00\",\n              \"endTime\": \"2023-07-01T00:00:00.000-07:00\",\n              \"value\": \"44026406.3\"\n            }\n          ]\n        },\n        {\n          \"mode\": \"CONSUMPTION\",\n          \"energySource\": \"ALL\",\n          \"usageId\": 278,\n          \"thingId\": 1326454,\n          \"thingLabel\": \"Floor z\",\n          \"thingContext\": [...],\n          \"measureId\": 5790,\n          \"measure\": {\n            \"urn\": \"urn:edm-se:em:core:me:whrin\",\n            \"name\": \"Wp del\",\n            \"label\": \"Active energy delivered\",\n            \"unit\": {\n              \"symbol\": \"Wh\"\n            }\n          },\n          \"timeSeriesValues\": [\n            {\n              \"startTime\": \"2023-01-01T00:00:00.000-08:00\",\n              \"endTime\": \"2023-02-01T00:00:00.000-08:00\",\n              \"value\": 343687.5\n            },\n            ...\n            {\n              \"startTime\": \"2023-06-01T00:00:00.000-07:00\",\n              \"endTime\": \"2023-07-01T00:00:00.000-07:00\",\n              \"value\": 342718.8\n            }\n          ]\n        },\n        ...\n        {\n          \"mode\": \"CONSUMPTION\",\n          \"energySource\": \"GRID\",\n          \"usageId\": 276,\n          \"thingId\": 1326454,\n          \"thingLabel\": \"Floor z\",\n          \"thingContext\": [...],\n          \"measureId\": 5790,\n          \"measure\": {\n            \"urn\": \"urn:edm-se:em:core:me:whrin\",\n            \"name\": \"Wp del\",\n            \"label\": \"Active energy delivered\",\n            \"unit\": {\n              \"symbol\": \"Wh\"\n            }\n          },\n          \"timeSeriesValues\": [\n            {\n              \"startTime\": \"2023-01-01T00:00:00.000-08:00\",\n              \"endTime\": \"2023-02-01T00:00:00.000-08:00\",\n              \"value\": 0\n            },\n            ...\n            {\n              \"startTime\": \"2023-06-01T00:00:00.000-07:00\",\n              \"endTime\": \"2023-07-01T00:00:00.000-07:00\",\n              \"value\": 0\n            }\n          ]\n        },\n        ...\n        {\n          \"mode\": \"CONSUMPTION\",\n          \"energySource\": \"LOCAL\",\n          \"usageId\": 276,\n          \"thingId\": 1326454,\n          \"thingLabel\": \"Floor z\",\n          \"thingContext\": [...],\n          \"measureId\": null,\n          \"measure\": null,\n          \"timeSeriesValues\": [\n            {\n              \"startTime\": \"2023-01-01T00:00:00.000-08:00\",\n              \"endTime\": \"2023-02-01T00:00:00.000-08:00\",\n              \"value\": null\n            },           \n            {\n              \"startTime\": \"2023-06-01T00:00:00.000-07:00\",\n              \"endTime\": \"2023-07-01T00:00:00.000-07:00\",\n              \"value\": null\n            }\n          ]\n        },\n        ...\n        {\n          \"mode\": \"PRODUCTION\",\n          \"energySource\": \"ALL\",\n          \"usageId\": 277,\n          \"thingId\": 1326454,\n          \"thingLabel\": \"Floor z\",\n          \"thingContext\": [...],\n          \"measureId\": 5791,\n          \"measure\": {\n            \"urn\": \"urn:edm-se:em:core:me:whrout\",\n            \"name\": \"Wp rec\",\n            \"label\": \"Active energy received\",\n            \"unit\": {\n              \"symbol\": \"Wh\"\n            }\n          },\n          \"timeSeriesValues\": [...],\n        },\n        {\n          \"mode\": \"PRODUCTION\",\n          \"energySource\": \"ALL\",\n          \"usageId\": 9597,\n          \"thingId\": 1326454,\n          \"thingLabel\": \"Floor z\",\n          \"thingContext\": [...],\n          \"measureId\": 5791,\n          \"measure\": {\n            \"urn\": \"urn:edm-se:em:core:me:whrout\",\n            \"name\": \"Wp rec\",\n            \"label\": \"Active energy received\",\n            \"unit\": {\n              \"symbol\": \"Wh\"\n            }\n          },\n          \"timeSeriesValues\": [\n            {\n              \"startTime\": \"2023-01-01T00:00:00.000-08:00\",\n              \"endTime\": \"2023-02-01T00:00:00.000-08:00\",\n              \"value\": 0\n            },\n            ...\n            {\n              \"startTime\": \"2023-06-01T00:00:00.000-07:00\",\n              \"endTime\": \"2023-07-01T00:00:00.000-07:00\",\n              \"value\": 1122709.1\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n### BinnedUsageCO2Data query\n\nReturns a paginated view of `EMCP_BusinessQuantityBinnedUsageTimeSeriesWithCO2CollectionSegment` data, based on the parameters. There is no way to filter the usages -- it will always return all usages, including Total Usage.\n\n#### Arguments\n\n- `appContext!` : an Array of `EMCP_TopoNodeContextInput` to filter the results by topology.\n- `skip` / `take` : `Int`s specifying pagination of the data.\n- `input` : a collection of the following values, type = `EMCP_BinnedUsageCO2DataInput!`\n  - `startTime!` : a `DateTime` to indicate the inclusive start of the interval.\n  - `endTime!` : a `DateTime` to indicate the exclusive end of the interval.\n  - `timeZone!` : a `String` indicates the IANA time zone the data should be aggregated into.\n  - `businessQuantityName!` : a `String` indicating the business quantity to get values for.\n  - `aggregationInterval!` : an `EMCP_AggregationInterval` indicating the temporal bin size that the data is aggregated into.\n\n#### Results\n\n- The timeSeriesValues results' time range are returned with an inclusive startTime and exclusive endTime.\n- The value returned is always interval-based -- the value for that time interval -- it is never cumulative.\n- The results are based on the configuration of the Energy hierarchy.\n- isEmissionFactorAvailable returns `true` only if all the sites (the countries they belong to) have emission factors configured.\n- cO2 value is null for a tenant/region if any site under it doesn't have emission factor configured.\n- Calculation methodology can be found on [this page on the Team 2 Wiki](https://se-tfs.visualstudio.com/SoftwarePortfolio/_wiki/wikis/SoftwarePortfolio.wiki/853/Usage-based-Energy-and-Power-(Demand)-Aggregation-in-Energy-One-Hub).\n\n### Example - Get Yearly-aggregated CO2 values for the appContext and specified time range in the specified time zone for the tenant\n\n**Query**\n\n```graphql title=\"Query\"\nquery binnedUsageCO2Data(\n  $appContext: [EMCP_TopoNodeContextInput!]!\n  $businessQuantityName: String!\n  $startTime: DateTime!\n  $endTime: DateTime!\n  $timeZone: String!\n  $aggregationInterval: EMCP_AggregationInterval!\n) {\n  binnedUsageCO2Data(\n    appContext: $appContext\n    input: {\n      startTime: $startTime\n      endTime: $endTime\n      timeZone: $timeZone\n      businessQuantityName: $businessQuantityName\n      aggregationInterval: $aggregationInterval\n    }\n  ) {\n    items {\n      usageId\n      businessQuantity { name }\n      isEmissionFactorAvailable\n      measure {\n        name\n        unit { symbol }\n      }\n      thingId\n      thingLabel\n      timeSeriesValuesAndCO2 { startTime endTime value cO2 }\n      unit { symbol }\n    }\n  }\n}\n```\n\n**Variables**\n\n```json title=\"Variables\"\n{\n  \"appContext\":  [\n    { \"type\": \"TENANT\", \"id\": 1524425, \"urn\": \"urn:edm-se:em:core:pr:tenant\" }\n  ],\n  \"businessQuantityName\": \"ACTIVE_ENERGY\",\n  \"startTime\": \"2021-12-31T18:30:00.000Z\",\n  \"endTime\": \"2023-08-29T18:30:00.000Z\",\n  \"timeZone\": \"Asia/Calcutta\",\n  \"aggregationInterval\": \"YEAR\"\n}\n```\n\n**Results**\n\n```json title=\"Results\"\n{\n  \"data\": {\n    \"binnedUsageCO2Data\": {\n      \"items\": [\n        {\n          \"usageId\": 276,\n          \"businessQuantity\": {\n            \"name\": \"ACTIVE_ENERGY\"\n          },\n          \"isEmissionFactorAvailable\": true,\n          \"measure\": {\n            \"name\": \"Wp del pos no reset\",\n            \"unit\": {\n              \"symbol\": \"Wh\"\n            }\n          },\n          \"thingId\": 1524425,\n          \"thingLabel\": \"Emission Trials\",\n          \"timeSeriesValuesAndCO2\": [\n            {\n              \"startTime\": \"2022-01-01T00:00:00.000+05:30\",\n              \"endTime\": \"2023-01-01T00:00:00.000+05:30\",\n              \"value\": 815311,\n              \"cO2\": -5.202861\n            },\n            {\n              \"startTime\": \"2023-01-01T00:00:00.000+05:30\",\n              \"endTime\": \"2024-01-01T00:00:00.000+05:30\",\n              \"value\": -606328,\n              \"cO2\": 165.530278\n            }\n          ],\n          \"unit\": {\n            \"symbol\": \"kg\"\n          }\n        },\n        [ ... truncated ... ]\n        {\n          \"usageId\": 278,\n          \"businessQuantity\": {\n            \"name\": \"ACTIVE_ENERGY\"\n          },\n          \"isEmissionFactorAvailable\": true,\n          \"measure\": {\n            \"name\": \"Wp del pos no reset\",\n            \"unit\": {\n              \"symbol\": \"Wh\"\n            }\n          },\n          \"thingId\": 1524425,\n          \"thingLabel\": \"Emission Trials\",\n          \"timeSeriesValuesAndCO2\": [\n            {\n              \"startTime\": \"2022-01-01T00:00:00.000+05:30\",\n              \"endTime\": \"2023-01-01T00:00:00.000+05:30\",\n              \"value\": 560193,\n              \"cO2\": 27.606372\n            },\n            {\n              \"startTime\": \"2023-01-01T00:00:00.000+05:30\",\n              \"endTime\": \"2024-01-01T00:00:00.000+05:30\",\n              \"value\": -663077,\n              \"cO2\": -88.007621\n            }\n          ],\n          \"unit\": {\n            \"symbol\": \"kg\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n#### Example - Get Yearly-aggregated CO2 values for the appContext and specified time range in the specified time zone for the site\n\n**Variables**\n\n```json title=\"Variables\"\n{\n  \"appContext\":  [\n    { \"type\": \"TENANT\", \"id\": 1524425, \"urn\": \"urn:edm-se:em:core:pr:tenant\" },\n    { \"type\": \"ID\", \"id\": 1524605, \"urn\": \"urn:edm-se:em:core:pr:region\" },\n    { \"type\": \"ID\", \"id\": 1524597, \"urn\": \"urn:edm-se:em:core:pr:site\" }\n  ],\n  \"businessQuantityName\": \"ACTIVE_ENERGY\",\n  \"startTime\": \"2021-12-31T18:30:00.000Z\",\n  \"endTime\": \"2023-08-29T18:30:00.000Z\",\n  \"timeZone\": \"Asia/Calcutta\",\n  \"aggregationInterval\": \"YEAR\"\n}\n```\n\n**Results**\n\n```json title=\"Results\"\n{\n  \"data\": {\n    \"binnedUsageCO2Data\": {\n      \"items\": [\n        [ ... truncated ... ]\n        {\n          \"usageId\": 277,\n          \"businessQuantity\": {\n            \"name\": \"ACTIVE_ENERGY\"\n          },\n          \"isEmissionFactorAvailable\": true,\n          \"measure\": {\n            \"name\": \"Wp del pos no reset\",\n            \"unit\": {\n              \"symbol\": \"Wh\"\n            }\n          },\n          \"thingId\": 1524597,\n          \"thingLabel\": \"Bengaluru\",\n          \"timeSeriesValuesAndCO2\": [\n            {\n              \"startTime\": \"2022-01-01T00:00:00.000+05:30\",\n              \"endTime\": \"2023-01-01T00:00:00.000+05:30\",\n              \"value\": 9105,\n              \"cO2\": 9.50562\n            },\n            {\n              \"startTime\": \"2023-01-01T00:00:00.000+05:30\",\n              \"endTime\": \"2024-01-01T00:00:00.000+05:30\",\n              \"value\": -11318,\n              \"cO2\": -11.815992\n            }\n          ],\n          \"unit\": {\n            \"symbol\": \"kg\"\n          }\n        },\n        [ ... truncated ... ]\n      ]\n    }\n  }\n}\n```\n\n#### Example - Get Yearly-aggregated CO2 values for the appContext and specified time range in the specified time zone for the asset\n\n**Variables**\n\n```json title=\"Variables\"\n{\n  \"appContext\":  [\n    { \"type\": \"TENANT\", \"id\": 1524425, \"urn\": \"urn:edm-se:em:core:pr:tenant\" },\n    { \"type\": \"ID\", \"id\": 1524605, \"urn\": \"urn:edm-se:em:core:pr:region\" },\n    { \"type\": \"ID\", \"id\": 1524597, \"urn\": \"urn:edm-se:em:core:pr:site\" },\n    { \"type\": \"ID\", \"id\": 1615425, \"urn\": \"urn:edm-se:em:core:pc:accessory\" }\n  ],\n  \"businessQuantityName\": \"ACTIVE_ENERGY\",\n  \"startTime\": \"2021-12-31T18:30:00.000Z\",\n  \"endTime\": \"2023-08-29T18:30:00.000Z\",\n  \"timeZone\": \"Asia/Calcutta\",\n  \"aggregationInterval\": \"YEAR\"\n}\n```\n\n**Results**\n\n```json title=\"Results\"\n{\n  \"data\": {\n    \"binnedUsageCO2Data\": {\n      \"items\": [\n        [ ... truncated ... ]\n{\n          \"usageId\": 277,\n          \"businessQuantity\": {\n            \"name\": \"ACTIVE_ENERGY\"\n          },\n          \"isEmissionFactorAvailable\": true,\n          \"measure\": {\n            \"name\": \"Wp del pos no reset\",\n            \"unit\": {\n              \"symbol\": \"Wh\"\n            }\n          },\n          \"thingId\": 1615425,\n          \"thingLabel\": \"MasterpactMTZ-CO2\",\n          \"timeSeriesValuesAndCO2\": [\n            {\n              \"startTime\": \"2022-01-01T00:00:00.000+05:30\",\n              \"endTime\": \"2023-01-01T00:00:00.000+05:30\",\n              \"value\": 9105,\n              \"cO2\": 9.50562\n            },\n            {\n              \"startTime\": \"2023-01-01T00:00:00.000+05:30\",\n              \"endTime\": \"2024-01-01T00:00:00.000+05:30\",\n              \"value\": -11318,\n              \"cO2\": -11.815992\n            }\n          ],\n          \"unit\": {\n            \"symbol\": \"kg\"\n          }\n        },\n        [ ... truncated ... ]\n      ]\n    }\n  }\n}\n```\n\n## subject\n\nThe `subject` query is designed to return only one subject.\n\n### Arguments\n\n* `federatedId`: The user federatedId from IDMS - ***optional***\n* `email`: The user email - ***optional***\n* `subjectId`: The subject identifier - ***optional***\n\n### Behavior\n\nIf there is no argument passed to the `subject` query, the query will return the current user information based on the idms token.\n\n:::note\nThis query enable filtering on the `subjectPropertyValues`. \n:::\n\n### Examples\n\n#### Get the current user information\n\nTo get information about the currently logged user you can call the `subject` query without arguments.\n\n:::caution\nThe field assignments is resolved by the graphql gateway and doesn't appears on the original subject graphql api.\n:::\n\n```graphql title=\"Graphql Query\"\nquery subjectInfo($where: EMCP_SubjectPropertyValueFilterInput){\n  subject {\n    id\n    ...Assignments\n    ...Properties\n  }\n}\n\nfragment Assignments on EMCP_Subject {\n  assignments {\n    items {\n      status\n      roleId\n      ...Access\n    }\n  }\n}\n\nfragment Access on EMCP_AccessAssignment {\n  access {\n    tenant {\n      label\n    }\n  }\n}\n\nfragment Properties on EMCP_Subject{\n  subjectPropertyValues(where:$where){\n    psval\n    property{\n      urn\n      label\n    }\n  }\n}\n\n```\n\n\n```json title=\"Graphql variables\"\n{\n  \"where\": {\n    \"property\": {\n      \"urn\": {\n        \"in\":[\n        \"urn:edm-se:em:core:pr:federated_id\",\n        \"urn:edm-se:em:core:pr:email\",\n        \"urn:edm-se:em:core:pr:name\",\n        \"urn:edm-se:em:core:pr:first_name\",\n        \"urn:edm-se:em:core:pr:last_name\",\n        \"urn:edm-se:em:core:pr:company\",\n        \"urn:edm-se:em:core:pr:locale\",\n        \"urn:edm-se:em:core:pr:favorite_organization_id\"\n      \t]\n      }\n    }\n  }\n}\n```\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"subject\": {\n      \"id\": 165,\n      \"assignments\": {\n        \"items\": [\n          {\n            \"status\": \"ACTIVE\",\n            \"roleId\": 4,\n            \"access\": {\n              \"tenant\": {\n                \"label\": \"ACME Inc\"\n              }\n            }\n          },\n          {\n            \"status\": \"ACTIVE\",\n            \"roleId\": 4,\n            \"access\": {\n              \"tenant\": {\n                \"label\": \"Mindt Chocolates\"\n              }\n            }\n          }\n        ]\n      },\n      \"subjectPropertyValues\": [\n        {\n          \"psval\": \"gb009fbd-698a-e81d-a3df-367daf1e9949\",\n          \"property\": {\n            \"urn\": \"urn:edm-se:em:core:pr:federated_id\",\n            \"label\": \"federated id\"\n          }\n        },\n        {\n          \"psval\": \"econrjop+johnnorman@gmail.com\",\n          \"property\": {\n            \"urn\": \"urn:edm-se:em:core:pr:email\",\n            \"label\": \"email\"\n          }\n        },\n        {\n          \"psval\": \"John\",\n          \"property\": {\n            \"urn\": \"urn:edm-se:em:core:pr:first_name\",\n            \"label\": \"first name\"\n          }\n        },\n        {\n          \"psval\": \"Norman\",\n          \"property\": {\n            \"urn\": \"urn:edm-se:em:core:pr:last_name\",\n            \"label\": \"last name\"\n          }\n        },\n        {\n          \"psval\": \"John Norman\",\n          \"property\": {\n            \"urn\": \"urn:edm-se:em:core:pr:name\",\n            \"label\": \"name\"\n          }\n        },\n        {\n          \"psval\": \"Momentum\",\n          \"property\": {\n            \"urn\": \"urn:edm-se:em:core:pr:company\",\n            \"label\": \"Company\"\n          }\n        },\n        {\n          \"psval\": \"en-US\",\n          \"property\": {\n            \"urn\": \"urn:edm-se:em:core:pr:locale\",\n            \"label\": \"locale\"\n          }\n        },\n        {\n          \"psval\": null,\n          \"property\": {\n            \"urn\": \"urn:edm-se:em:core:pr:favorite_organization_id\",\n            \"label\": \"favorite organization id\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n:::caution\nThe subject will be null if the user is not yet registered on the db.\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"subject\": null\n  }\n} \n```\n:::\n\n#### Find a user by using the user federatedId\n\nYou can use the argument `federatedId` to find a specific user.\n\n```graphql title=\"Graphql Query\"\nquery subjectQuery(\n  $federatedId: String\n  $where: EMCP_SubjectPropertyValueFilterInput\n) {\n  subject(federatedId: $federatedId) {\n    subjectPropertyValues(where: $where) {\n      psval\n      property {\n        label\n        urn\n      }\n    }\n  }\n}\n```\n\n```json title=\"Graphql variables\"\n{\n  \"federatedId\": \"gb007fed-4719-af59-d5b4-909c372120b8\"\n}\n```\n\n:::tip\nYou can use a filter on the `subjectPropertyValues` to get a specific property. \n  ```json \n{\n  \"where\": {\n    \"property\": {\n      \"urn\": {\n        \"eq\": \"urn:edm-se:em:core:pr:email\"\n      }\n    }\n  }\n}\n  ```\n:::\n\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"subject\": {\n      \"subjectPropertyValues\": [\n        {\n          \"psval\": \"econrjop+christinehoffman@gmail.com\",\n          \"property\": {\n            \"label\": \"email\",\n            \"urn\": \"urn:edm-se:em:core:pr:email\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n:::caution\nThe subject will be null if the logged user doesn't share at least one same organization with the requested user.\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"subject\": null\n  }\n} \n```\n:::\n\n#### Find a user by using the user email\n\nYou can use the argument `email` to find a specific user.\n\n```graphql title=\"Graphql Query\"\nquery subjectQuery(\n  $email: String\n  $where: EMCP_SubjectPropertyValueFilterInput\n) {\n  subject(email: $email) {\n    subjectPropertyValues(where: $where) {\n      psval\n      property {\n        label\n        urn\n      }\n    }\n  }\n}\n```\n\n```json title=\"Graphql variables\"\n{\n  \"email\": \"econrjop+peterdoe@gmail.com\"\n}\n```\n\n:::tip\nYou can use a filter on the `subjectPropertyValues` to get only certain property. \n  ```json \n{\n  \"where\": {\n    \"property\": {\n      \"urn\": {\n        \"eq\": \"urn:edm-se:em:core:pr:name\"\n      }\n    }\n  }\n}\n  ```\n:::\n\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"subject\": {\n      \"subjectPropertyValues\": [\n        {\n          \"psval\": \"Peter Doe\",\n          \"property\": {\n            \"label\": \"name\",\n            \"urn\": \"urn:edm-se:em:core:pr:name\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n:::caution\nThe subject will be null if the logged user doesn't share at least one same organization with the requested user.\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"subject\": null\n  }\n} \n```\n:::\n\n#### Find a user by using the subjectId of the user\n\nYou can use the argument `subjectId` to find a specific user.\n\n```graphql title=\"Graphql Query\"\nquery subjectQuery(\n  $subjectId: Int\n  $where: EMCP_SubjectPropertyValueFilterInput\n) {\n  subject(subjectId: $subjectId) {\n    subjectPropertyValues(where: $where) {\n      psval\n      property {\n        label\n        urn\n      }\n    }\n  }\n}\n```\n\n```json title=\"Graphql variables\"\n{\n  \"subjectId\": 1611\n}\n```\n\n:::tip\nYou can use a filter on the `subjectPropertyValues` to get a specific property. \n  ```json \n{\n  \"where\": {\n    \"property\": {\n      \"urn\": {\n        \"eq\": \"urn:edm-se:em:core:pr:name\"\n      }\n    }\n  }\n}\n  ```\n:::\n\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"subject\": {\n      \"subjectPropertyValues\": [\n        {\n          \"psval\": \"Jesper Nielsen\",\n          \"property\": {\n            \"label\": \"name\",\n            \"urn\": \"urn:edm-se:em:core:pr:name\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n:::caution\nThe subject will be null if the logged user doesn't share at least one same organization with the requested user.\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"subject\": null\n  }\n} \n```\n:::\n\n\n## subjects\n\nThe `subjects` query is designed to return a list of subjects.\n\n### Arguments\n\n* `appContext`: The execution context - ***optional***\n* `kind` [*User*, *Service*, *Group*] : Argument used to specify the type of expected subject  - ***mandatory***\n\n\n### Behavior\n\nIf the `appContext` argument is not passed to the `subjects` query, the query will return all subjects based on the specified kind and will use the EEO Token to scope the result.\n\nIf an `appContext` argument is provied the list of subjects will be scoped to it.\n\n:::note\nThis query enable filtering on `subjet` and `subjectPropertyValues`. \n\nThe offset paging is enabled for this query.\n:::\n\n### Examples \n\n\n#### Get a list of users scoped to an organization\n\nTo get the list of users scoped to an organization you can use the `subjects` query with the `appContext` set to the targeted organization.\n\n```graphql title=\"Graphql Query\"\nquery subjectsQuery(\n  $appContext: [EMCP_TopoNodeContextInput!]\n  $kind: EMCP_SubjectKind!\n  $where: EMCP_SubjectPropertyValueFilterInput\n) {\n  subjects(kind: $kind, appContext: $appContext, take: 100) {\n    totalCount\n    items {\n      id\n      subjectPropertyValues(where: $where) {\n        psval\n        pival\n        property {\n          urn\n          label\n        }\n      }\n    }\n  }\n}\n```\n\n```json title=\"Graphql variables\"\n{\n  \"appContext\": [\n    {\n      \"id\": 21,\n      \"type\": \"TENANT\",\n      \"urn\": \"urn:edm-se:em:core:pr:tenant\"\n    }\n  ],\n  \"where\": {\n    \"property\": {\n      \"urn\": {\n        \"in\": [\n          \"urn:edm-se:em:core:pr:name\",\n          \"urn:edm-se:em:core:pr:email\"\n        ]\n      }\n    }\n  },\n  \"kind\": \"USER\"\n}\n```\n\n:::tip\nAs you can see you can set a filter on the `subjectPropertyValues` to get some specific properties. \n:::\n\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"subjects\": {\n      \"totalCount\": 5,\n      \"items\": [\n        {\n          \"id\": 1622,\n          \"subjectPropertyValues\": [\n            {\n              \"psval\": \"econrjop+johnnorman@gmail.com\",\n              \"pival\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:email\",\n                \"label\": \"email\"\n              }\n            },\n            {\n              \"psval\": \"John Norman\",\n              \"pival\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:name\",\n                \"label\": \"name\"\n              }\n            }\n          ]\n        },\n        {\n          \"id\": 1623,\n          \"subjectPropertyValues\": [\n            {\n              \"psval\": \"econrjop+janecooper@gmail.com\",\n              \"pival\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:email\",\n                \"label\": \"email\"\n              }\n            },\n            {\n              \"psval\": \"Jane Cooper\",\n              \"pival\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:name\",\n                \"label\": \"name\"\n              }\n            }\n          ]\n        },\n        {\n          \"id\": 1624,\n          \"subjectPropertyValues\": [\n            {\n              \"psval\": \"econrjop+tomomaeda@gmail.com\",\n              \"pival\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:email\",\n                \"label\": \"email\"\n              }\n            },\n            {\n              \"psval\": \"Tomo Maeda\",\n              \"pival\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:name\",\n                \"label\": \"name\"\n              }\n            }\n          ]\n        },\n        {\n          \"id\": 1625,\n          \"subjectPropertyValues\": [\n            {\n              \"psval\": \"econrjop+jespernielsen@gmail.com\",\n              \"pival\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:email\",\n                \"label\": \"email\"\n              }\n            },\n            {\n              \"psval\": \"Jesper Nielsen\",\n              \"pival\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:name\",\n                \"label\": \"name\"\n              }\n            }\n          ]\n        },\n        {\n          \"id\": 1629,\n          \"subjectPropertyValues\": [\n            {\n              \"psval\": \"econrjop+christinehoffman@gmail.com\",\n              \"pival\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:email\",\n                \"label\": \"email\"\n              }\n            },\n            {\n              \"psval\": \"Christine Hoffman\",\n              \"pival\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:name\",\n                \"label\": \"name\"\n              }\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n:::caution\nThe subjects list will be empty if the caller can't access to the targeted organization.\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"subjects\": {\n      \"totalCount\": 0,\n      \"items\": []\n    }\n  }\n}\n```\n:::\n####  Get a list of all accessible users\n\nTo get the list of all users that the caller can access you can use the `subjects` query without the `appContext` argument.\n\n```graphql title=\"Graphql Query\"\nquery subjectsQuery(\n  $kind: EMCP_SubjectKind!\n  $where: EMCP_SubjectPropertyValueFilterInput\n) {\n  subjects(kind: $kind, take: 100) {\n    totalCount\n    items {\n      id\n      subjectPropertyValues(where: $where) {\n        psval\n        pival\n        property {\n          urn\n          label\n        }\n      }\n    }\n  }\n}\n```\n\n```json title=\"Graphql variables\"\n{\n  \"where\": {\n    \"property\": {\n      \"urn\": {\n        \"in\": [\n          \"urn:edm-se:em:core:pr:name\",\n          \"urn:edm-se:em:core:pr:email\"\n        ]\n      }\n    }\n  },\n  \"kind\": \"USER\"\n}\n```\n\n:::tip\nAs you can see you can set a filter on the `subjectPropertyValues` to get some specific properties. \n:::\n\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"subjects\": {\n      \"totalCount\": 6,\n      \"items\": [\n        {\n          \"id\": 1622,\n          \"subjectPropertyValues\": [\n            {\n              \"psval\": \"econrjop+johnnorman@gmail.com\",\n              \"pival\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:email\",\n                \"label\": \"email\"\n              }\n            },\n            {\n              \"psval\": \"John Norman\",\n              \"pival\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:name\",\n                \"label\": \"name\"\n              }\n            }\n          ]\n        },\n        {\n          \"id\": 1623,\n          \"subjectPropertyValues\": [\n            {\n              \"psval\": \"econrjop+janecooper@gmail.com\",\n              \"pival\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:email\",\n                \"label\": \"email\"\n              }\n            },\n            {\n              \"psval\": \"Jane Cooper\",\n              \"pival\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:name\",\n                \"label\": \"name\"\n              }\n            }\n          ]\n        },\n        {\n          \"id\": 1624,\n          \"subjectPropertyValues\": [\n            {\n              \"psval\": \"econrjop+tomomaeda@gmail.com\",\n              \"pival\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:email\",\n                \"label\": \"email\"\n              }\n            },\n            {\n              \"psval\": \"Tomo Maeda\",\n              \"pival\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:name\",\n                \"label\": \"name\"\n              }\n            }\n          ]\n        },\n        {\n          \"id\": 1625,\n          \"subjectPropertyValues\": [\n            {\n              \"psval\": \"econrjop+jespernielsen@gmail.com\",\n              \"pival\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:email\",\n                \"label\": \"email\"\n              }\n            },\n            {\n              \"psval\": \"Jesper Nielsen\",\n              \"pival\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:name\",\n                \"label\": \"name\"\n              }\n            }\n          ]\n        },\n        {\n          \"id\": 1628,\n          \"subjectPropertyValues\": [\n            {\n              \"psval\": \"econrjop+peterdoe@gmail.com\",\n              \"pival\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:email\",\n                \"label\": \"email\"\n              }\n            },\n            {\n              \"psval\": \"Peter Doe\",\n              \"pival\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:name\",\n                \"label\": \"name\"\n              }\n            }\n          ]\n        },\n        {\n          \"id\": 1629,\n          \"subjectPropertyValues\": [\n            {\n              \"psval\": \"econrjop+christinehoffman@gmail.com\",\n              \"pival\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:email\",\n                \"label\": \"email\"\n              }\n            },\n            {\n              \"psval\": \"Christine Hoffman\",\n              \"pival\": null,\n              \"property\": {\n                \"urn\": \"urn:edm-se:em:core:pr:name\",\n                \"label\": \"name\"\n              }\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n#### Get a list of all users\n\nA service plaftorm with global scope can use `subjects` query to get all users and can also apply differents filters to it.\n\n:::note\nThe EEO token is used to determined if the caller is a service plaform or not.\n:::\n\nHere on this example we use the `subjects` query to get the email of each user thanks to the user federatedId.\n\n\n```graphql title=\"Graphql Query\"\nquery subjectsQuery(\n  $kind: EMCP_SubjectKind!\n  $where1: EMCP_SubjectFilterInput  \n  $where2: EMCP_SubjectPropertyValueFilterInput\n) {\n  subjects(kind: $kind,take: 100,where:$where1) {\n    totalCount\n    items {\n      id\n      subjectPropertyValues(where: $where2) {\n        psval\n      }\n    }\n  }\n}\n\n```\n\n```json title=\"Graphql variables\"\n{\n  \"where1\": {\n    \"subjectPropertyValues\": {\n      \"some\": {\n        \"and\": [\n          {\n            \"psval\": {\n              \"in\": [\n                \"gb006a9b-8ba9-855c-b8d9-e7b7bbca2c5d\",\n                \"gb0043b9-1ff8-f375-af24-b7d5014e1700\"\n              ]\n            }\n          },\n          {\n            \"property\": {\n              \"urn\": {\n                \"eq\": \"urn:edm-se:em:core:pr:federated_id\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  },\n  \"where2\": {\n    \"property\": {\n      \"urn\": {\n        \"in\": [\n          \"urn:edm-se:em:core:pr:email\"\n        ]\n      }\n    }\n  },\n  \"kind\": \"USER\"\n}\n```\n\n:::tip\nAs you can see a filter can be set on `subjectPropertyValues` to get some specific properties.\n\nAnd another filter can also be set on `subject` to filter the list of users.\n:::\n\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"subjects\": {\n      \"totalCount\": 2,\n      \"items\": [\n        {\n          \"id\": 1623,\n          \"subjectPropertyValues\": [\n            {\n              \"psval\": \"econrjop+janecooper@gmail.com\"\n            }\n          ]\n        },\n        {\n          \"id\": 1624,\n          \"subjectPropertyValues\": [\n            {\n              \"psval\": \"econrjop+tomomaeda@gmail.com\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n# Mutations\n\n## acknowledgeAlarmInstance\nAcknowledges alarm instance and all its previously unacknowledged occurrences up to the moment. \n\n### Arguments\n\n* `appContext`: the execution context.\n* `input`: required parameter `EMCP_AcknowledgeAlarmInstanceInput` with the required fields `alarmInstanceId` and `comment`.\n\n### Behavior\n\n- If the user has no required permissions to update alarms, the response is `ALARM_INSTANCE_NOT_FOUND` error.\n\n- If the alarm instance is not available to the user via alarm categories, the response is `ALARM_INSTANCE_NOT_FOUND` error. Basic alarm categories available for all registered users. More alarm categories are provided via module subscriptions. \n\n- If the user has no required privileges to access the requested organization topology, the response is `ALARM_INSTANCE_NOT_FOUND` error.\n\n- If current state of the alarm instance is not acknowledgeable, the response is `ALARM_INSTANCE_NOT_ACKNOWLEDGEABLE` error.\n\n- If composite state cannot be calculated, the alarm instance is in corrupt state and response is `ALARM_INSTANCE_COMPOSITE_STATE_NOT_DEFINED` error. The composite state of the alarm instance calculated by `alarmModel` and `alarmState` properties of the alarm instance.\n\n- If all conditions described above verified, following changes are applied in a single database transaction:\n  - create a new alarm state transition in the database with a UTC timestamp to represent the acknowledgement event.\n  - assign the new state transition to all previously unacknowledged occurrences of the alarm instance. \n  - set alarm state of the instance to acknowledged, in accordance with the latest alarm state transition. \n\n- If any part of the database transaction fails, the entire transaction is rolled back, and the response is `ALARM_INSTANCE_ACKNOWLEDGEMENT_FAILED` error. \n\n\n### Example\n\nThe following GraphQL mutation acknowledges alarm instance with a comment.\n\n#### Mutation\n\n```graphql title=\"GraphQL Mutation\"\nmutation acknowledgeAlarmInstance(\n  $appContext: [EMCP_TopoNodeContextInput!]!\n  $input: EMCP_AcknowledgeAlarmInstanceInput!\n) {\n  acknowledgeAlarmInstance(appContext: $appContext, input: $input) {\n    id\n    alarmState\n    alarmStateTransitions {\n      id\n      alarmInstanceId\n      alarmState\n      transitionTime\n      idmsFederatedId\n      comment\n    }\n    alarmOccurrences {\n      id\n      endTime\n      acknowledgementAlarmStateTransitionId\n    }\n  }\n}\n```\n\n#### Variables\n\n```json title=\"Graphql variables\"\n{\n  \"appContext\": [\n    {\n      \"id\": 87293,\n      \"label\": \"Mindt Chocolates\",\n      \"urn\": \"urn:edm-se:em:core:pr:tenant\",\n      \"type\": \"TENANT\"\n    }\n  ],\n  \"input\": {\n    \"alarmInstanceId\": 14477,\n    \"comment\": \"Alarm was reviewed and acknowledged.\"\n  }\n}\n```\n\n#### Result\n\n```json title=\"Graphql result\"\n{\n  \"data\": {\n    \"acknowledgeAlarmInstance\": {\n      \"id\": 14477,\n      \"alarmState\": \"NORM\",\n      \"alarmStateTransitions\": [\n        {\n          \"id\": 39592,\n          \"alarmInstanceId\": 14477,\n          \"alarmState\": \"NORM\",\n          \"transitionTime\": \"2022-02-21T19:49:36.505Z\",\n          \"idmsFederatedId\": \"gb009fbd-698a-e81d-a3df-367daf1e9949\",\n          \"comment\": \"Alarm was reviewed and acknowledged.\"\n        }\n      ],\n      \"alarmOccurrences\": [\n        {\n          \"id\": 105779,\n          \"endTime\": \"2022-02-05T01:00:15.109Z\",\n          \"acknowledgementAlarmStateTransitionId\": 39592\n        },\n        ...\n      ]\n    }\n  }\n}\n```\n\n## upsertAlarmInstancesAndOccurrences\n\nAdd and/or update alarm instance and occurrence information. This mutation performs several things:\n* Create or update the AlarmInstance.\n* Create or update the AlarmOccurrence.\n* Add a new AlarmStateTransition if a new instance or the state has changed.\n* Sends out AlarmOccurrence Message\n\n### Arguments\n\n* `alarmInstance!` : `EMCP_UpsertAlarmMutationInput`\n  * `startTime!`: The start of the alarm. Be sure to indicate the offset. `DateTime`\n  * `endTime`: The end of the alarm. Be sure to indicate the offset. If null, then the alarm is still active. `DateTime`\n  * `properties!`: A JSON array of alarm property+value pairs. `String`\n  * `measures` : A JSON array of measure information. `String`\n  * `possibleProblem`: Describes a problem that can be presented if an alarm occurs. `String`\n  * `possibleCause`: A list of possible causes for an alarm. `String`\n  * `possibleRisk`: A list of possible risks and impacts. `String`\n  * `possibleRecommendation`: Possible recommendations based on a particular alarm. `String`\n  * `instanceHandle`: The unique identifier of an alarm instance in the external system. Used when updating this instance in a later mutation. `String`\n  * `occurrenceHandle!`: The unique identifier of an alarm occurrence in the external system. Used when updating this occurrence in a later mutation. `String`\n  * `conceptUrn!`: The URN of the concept for an alarm. `String`\n  * `priority!`: The proposed priority of an alarm. `EMCP_AlarmPriorityType`\n  * `state!`: The current state of an alarm. `EMCP_AlarmState`\n  * `condition!`: The current condition of an alarm. `EMCP_AlarmCondition`\n  * `confirmed`: The confirmation state of an alarm. `EMCP_AlarmConfirmed`\n  * `thingHandle`: The handle of the thing that a particular alarm is associated with. `String`\n  * `thingId`: The ID of the thing that an alarm is associated with. `String`\n  * `controlValue!`: The alarm's control value. `EMCP_AlarmControlValueType`\n  * `tsMath!`: How the alarm timestamp is determined. `EMCP_TsMathType`\n  * `onditmms!`: On delay for activation of the alarm. `Int`\n\n#### Argument verification\n* Either `thingId` or `thingHandle` has to be set, but not both\n\n### Behavior \n* If an instance exists with the instanceHandle, then it will update the instance otherwise it will create it\n* If an occurrence exists with the occurrenceHandle, then it will update the occurrence otherwise it will create it\n* If the condition is NORMAL and the instance already exist, all linked occurences will be modified to reflect that this is a normal condition\n\n### Results\n\n* The new or updated `EMCP_AlarmOccurrence` is returned.\n\n### Example\n\nAdd a new alarm occurrence.\n\n#### Mutation\n```graphql title=\"GraphQL Mutation\"\nmutation {\n  upsertAlarmInstancesAndOccurrences(inputs: [ {\n       conceptUrn: \"urn:edm-se:em:core:al:calh1_unbalialm\",\n       condition: NORMAL,\n       confirmed: NOT_APPLICABLE,\n       controlValue: NA,\n       priority: YELLOW,\n       state: NORMAL,\n       endTime: \"2022-02-07T17:34:34Z\",\n       startTime: \"2022-02-07T17:32:47Z\",\n       occurrenceHandle: \"ION:c14fc11e-283d-4ca7-a6f8-6b40b6fda69a:alarm:34051\",\n       onditmms: 0,\n       properties: \"{\\\"urn:edm-se:em:core:pr:detail_text\\\":\\\"Current Unbalance – Extreme: 200.0\\\",\\\"urn:edm-se:em:core:pr:summary_text\\\":\\\"Over I unbal\\\",\\\"urn:edm-se:em:core:pr:user_priority\\\":128}\",\n       thingHandle: \"ION:c14fc11e-283d-4ca7-a6f8-6b40b6fda69a:Keating.RTU_5\",\n       tsMath: INPUT_BASED } ]) {\n    id\n    alarmInstanceId\n  }\n}\n```\n\n## event\n\nAllow to create or update an event\n\n### Arguments\n\n* `id` : optional : the event ID : if set this is an update, otherwise it's a create\n* `thingId`  : mandatory for creation, the thingId\n* `handle`  : mandatory for creation, should be unique accross all handle\n* `eventConceptId` & `eventConceptUrn` : mandatory for creation, but only one should be set, the URN has the precedence over the Id : the concept of the event\n* `eventType` : the event type, possible value : TOPO, UNARY, PICK, DROPOUT\n* `eventFamily` : mandatory for creation, the event family, possible value : ELECTRICAL, HVAC\n* `measures` : optional, an json array of measures\n* `message` : optional, the event message\n* `pvUrns` : The list of property value with the corresponding urn\n\n### Examples\n\n#### Create a event\n```graphql title=\"Graphql Query\"\nmutation EventMutation($inputParams: EMCP_EventMutationInput) {\n  event(input: $inputParams) {\n    id\n    handle\n    eventType\n    eventFamily\n    eventConceptId\n    message\n    measures\n    thingId\n    thing {\n      id\n    }\n    eventPValues {\n      createDate\n      eventId\n      handle\n      id\n      pFVal\n      pIVal\n      pSVal\n      pTsVal\n      property {\n        urn\n      }\n    }\n  }\n}\n```\n\n```json title=\"Graphql variables\"\n{\n  \"inputParams\": {\n    \"thingId\": 150,\n    \"handle\": \"TEST_EVENT_HANDLE_2\",\n    \"eventConceptUrn\": \"urn:edm-se:em:core:ev:calh1_batalm\",\n    \"measures\": \"{\\\"foo\\\":\\\"bar\\\"}\",\n    \"message\": \"Test Message\",\n    \"pvUrns\": [\n      {\"urn\": \"urn:edm-se:em:core:pr:cause\", \"sval\": \"testCause\"},\n      {\"urn\": \"urn:edm-se:em:core:pr:user_priority\", \"ival\": 1},\n      {\"urn\": \"urn:edm-se:em:core:pr:enum_statusid\", \"ival\": 1}\n    ]\n  }\n}\n```\n\n## deleteEvents\n\nAllow to delete  a set of events\n\n### Arguments\n\n* `ids` : mandatory : the event IDs (Int) array to delete\n\n### Examples\n\n#### Delete Slot(s)\n```graphql title=\"Graphql Query\"\nmutation deleteEvents($ids: [Int!]) {\n  __typename\n  deleteEvents(ids: $ids) {\n    id\n  }\n}\n```\n\n```json title=\"Graphql variables\"\n{\n  \"ids\": [\n    10\n  ]\n}\n```\n\n\nContact Support:\n Name: API support",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34682654"
	},
	"item": [
		{
			"name": "graphql",
			"item": [
				{
					"name": "EEH GraphQL",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"<string>\",\n  \"variables\": {}\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "This end point provides access to all of EEH data."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"query\": \"<string>\",\n  \"variables\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {}\n}"
						},
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"query\": \"<string>\",\n  \"variables\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"locations\": [\n        {\n          \"line\": \"<integer>\",\n          \"column\": \"<integer>\"\n        },\n        {\n          \"line\": \"<integer>\",\n          \"column\": \"<integer>\"\n        }\n      ],\n      \"extensions\": {\n        \"operation\": \"<string>\",\n        \"type\": \"<string>\",\n        \"specifiedBy\": \"<string>\"\n      }\n    },\n    {\n      \"message\": \"<string>\",\n      \"locations\": [\n        {\n          \"line\": \"<integer>\",\n          \"column\": \"<integer>\"\n        },\n        {\n          \"line\": \"<integer>\",\n          \"column\": \"<integer>\"\n        }\n      ],\n      \"extensions\": {\n        \"operation\": \"<string>\",\n        \"type\": \"<string>\",\n        \"specifiedBy\": \"<string>\"\n      }\n    }\n  ]\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"query\": \"<string>\",\n  \"variables\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"<uri>\",\n  \"title\": \"<string>\",\n  \"status\": \"<number>\",\n  \"detail\": \"<string>\"\n}"
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://dev.api.exchange.se.app/ecostruxure/energy-hub/v1"
		}
	]
}
